{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/volantis/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/volantis/source/fonts/Monaco.ttf","path":"fonts/Monaco.ttf","modified":0,"renderable":1},{"_id":"themes/volantis/source/fonts/Skranji-Regular.ttf","path":"fonts/Skranji-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/volantis/source/fonts/Ubuntu-Regular.ttf","path":"fonts/Ubuntu-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/azure.svg","path":"img/azure.svg","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/baidu.svg","path":"img/baidu.svg","modified":0,"renderable":1},{"_id":"themes/volantis/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/volantis/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/volantis/source/js/busuanzi.pure.mini.js","path":"js/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/volantis/source/js/comment_typing.js","path":"js/comment_typing.js","modified":0,"renderable":1},{"_id":"themes/volantis/source/js/instant_page.js","path":"js/instant_page.js","modified":0,"renderable":1},{"_id":"themes/volantis/source/js/jinrishici.js","path":"js/jinrishici.js","modified":0,"renderable":1},{"_id":"themes/volantis/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/volantis/source/js/valine.js","path":"js/valine.js","modified":0,"renderable":1},{"_id":"source/BingSiteAuth.xml","path":"BingSiteAuth.xml","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":0},{"_id":"source/images/waterboy.JPG","path":"images/waterboy.JPG","modified":0,"renderable":0},{"_id":"source/images/background/index.jpeg","path":"images/background/index.jpeg","modified":0,"renderable":0},{"_id":"source/images/background/index.jpg","path":"images/background/index.jpg","modified":0,"renderable":0},{"_id":"source/images/background/index1.jpeg","path":"images/background/index1.jpeg","modified":0,"renderable":0},{"_id":"source/images/background/index3.jpg","path":"images/background/index3.jpg","modified":0,"renderable":0},{"_id":"source/images/background/index2.jpg-slim","path":"images/background/index2.jpg-slim","modified":0,"renderable":0},{"_id":"source/images/qrcode/wechat.JPG","path":"images/qrcode/wechat.JPG","modified":0,"renderable":0},{"_id":"source/images/2020/02/Apple-iMac.jpg","path":"images/2020/02/Apple-iMac.jpg","modified":0,"renderable":0},{"_id":"source/images/2020/02/quantum.jpg","path":"images/2020/02/quantum.jpg","modified":0,"renderable":0},{"_id":"source/images/2020/02/artificial-intelligence-conscious-3d-illustration-neuron-concept-ai-consciousness-592921421.jpg","path":"images/2020/02/artificial-intelligence-conscious-3d-illustration-neuron-concept-ai-consciousness-592921421.jpg","modified":0,"renderable":0},{"_id":"source/images/2020/02/seoul.jpg","path":"images/2020/02/seoul.jpg","modified":0,"renderable":0},{"_id":"source/images/2020/03/7552A5D8.jpeg","path":"images/2020/03/7552A5D8.jpeg","modified":0,"renderable":0},{"_id":"source/images/2020/03/IMG_2372-2.JPG","path":"images/2020/03/IMG_2372-2.JPG","modified":0,"renderable":0},{"_id":"source/images/2020/03/Crevisio-101-vOIDtN8rT.jpg","path":"images/2020/03/Crevisio-101-vOIDtN8rT.jpg","modified":0,"renderable":0},{"_id":"source/images/2020/03/IMG_2377.jpg","path":"images/2020/03/IMG_2377.jpg","modified":0,"renderable":0},{"_id":"source/images/2020/03/IMG_2391-scaled.jpg","path":"images/2020/03/IMG_2391-scaled.jpg","modified":0,"renderable":0},{"_id":"source/images/2020/03/pi.png","path":"images/2020/03/pi.png","modified":0,"renderable":0},{"_id":"source/images/2020/03/IMG_2391.jpg","path":"images/2020/03/IMG_2391.jpg","modified":0,"renderable":0},{"_id":"source/images/2020/03/pi3.5.jpg","path":"images/2020/03/pi3.5.jpg","modified":0,"renderable":0},{"_id":"source/images/2020/03/pi3.52.jpg","path":"images/2020/03/pi3.52.jpg","modified":0,"renderable":0},{"_id":"source/images/2020/03/pi4shan.png","path":"images/2020/03/pi4shan.png","modified":0,"renderable":0},{"_id":"source/images/2020/03/psychedelic-treatments-consciousness-disorder-news-oct-2019.jpg","path":"images/2020/03/psychedelic-treatments-consciousness-disorder-news-oct-2019.jpg","modified":0,"renderable":0},{"_id":"source/images/2020/04/ac1200-scaled.jpg","path":"images/2020/04/ac1200-scaled.jpg","modified":0,"renderable":0},{"_id":"source/images/2020/04/ac1200.jpg","path":"images/2020/04/ac1200.jpg","modified":0,"renderable":0},{"_id":"source/images/2020/04/frp.png","path":"images/2020/04/frp.png","modified":0,"renderable":0},{"_id":"source/images/2020/04/ac1200m.jpg","path":"images/2020/04/ac1200m.jpg","modified":0,"renderable":0},{"_id":"source/images/2020/04/hexo-index.png","path":"images/2020/04/hexo-index.png","modified":0,"renderable":0},{"_id":"source/images/2020/04/spi-black.jpg","path":"images/2020/04/spi-black.jpg","modified":0,"renderable":0},{"_id":"source/images/2020/04/spi-night.jpg","path":"images/2020/04/spi-night.jpg","modified":0,"renderable":0},{"_id":"source/images/2020/04/hexopi.jpg","path":"images/2020/04/hexopi.jpg","modified":0,"renderable":0},{"_id":"source/images/2020/04/spi-scaled.jpg","path":"images/2020/04/spi-scaled.jpg","modified":0,"renderable":0},{"_id":"source/images/2020/04/spi.bmp","path":"images/2020/04/spi.bmp","modified":0,"renderable":0},{"_id":"source/images/2020/04/spi.jpg","path":"images/2020/04/spi.jpg","modified":0,"renderable":0},{"_id":"source/images/2020/04/sys_info.jpg","path":"images/2020/04/sys_info.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"themes/volantis/LICENSE","hash":"e0cbf6906cab5926a34f17852db6c05187ee1f68","modified":1647781403260},{"_id":"themes/volantis/_config.yml","hash":"002469b221909336cc72ac03e9177c5775c92bff","modified":1647781403261},{"_id":"themes/volantis/README.md","hash":"91f213a172dd9e57e4ef03c9151ad94ec1bb2690","modified":1647781403261},{"_id":"themes/volantis/languages/en.yml","hash":"809cbd1198ff45440e2997a22be34ae94367f92d","modified":1647781403262},{"_id":"themes/volantis/languages/zh-CN.yml","hash":"f93a6e18f675efe80c858693aa11641103c4dc8e","modified":1647781403263},{"_id":"themes/volantis/layout/404.ejs","hash":"805804c27fcdb07201d38162361c606a167b44e9","modified":1647781403264},{"_id":"themes/volantis/layout/_pre.ejs","hash":"bdbcf68e3f71df73bc59ffa5007d8fe800c5cdc1","modified":1647781403280},{"_id":"themes/volantis/languages/zh-TW.yml","hash":"874115b53594bab21e4b5d0d2f2ed25f85a973c6","modified":1647781403264},{"_id":"themes/volantis/layout/category.ejs","hash":"552c289263727e09320c6a839e74a8dcaef7378d","modified":1647781403296},{"_id":"themes/volantis/layout/index.ejs","hash":"6fee00696b3de0b7440cf1b4c2c099f19c2580f8","modified":1647781403296},{"_id":"themes/volantis/layout/archive.ejs","hash":"eca3275301019d11d81de6e4f25f438735629905","modified":1647781403295},{"_id":"themes/volantis/layout/layout.ejs","hash":"872f54691e2e6cc2ed36caab551d04a157b3dd94","modified":1647781403297},{"_id":"themes/volantis/layout/links.ejs","hash":"e557eae1450b1cd295eaae29b4863279ea4a813e","modified":1647781403297},{"_id":"themes/volantis/layout/list.ejs","hash":"5d1efdee83a9979996b34fc743ac957517be5bb4","modified":1647781403298},{"_id":"themes/volantis/layout/post.ejs","hash":"e1285b47ace87cbcf0ab459ab2d51567e3d43bba","modified":1647781403299},{"_id":"themes/volantis/layout/_cover/index.ejs","hash":"ed7ac0a682ffdf2d72ebf531ad3f19bf52086bb3","modified":1647781403265},{"_id":"themes/volantis/layout/_meta/btns.ejs","hash":"e4004bbb7a2bf46dfc95cd610822c0d58e7af6b7","modified":1647781403267},{"_id":"themes/volantis/layout/page.ejs","hash":"e1285b47ace87cbcf0ab459ab2d51567e3d43bba","modified":1647781403299},{"_id":"themes/volantis/layout/tag.ejs","hash":"7cdf58c7483138f4456264a5b02bd5f934ecb851","modified":1647781403300},{"_id":"themes/volantis/layout/_meta/counter.ejs","hash":"dd34316f50826687fd19baef341f8c2a92ea3dd3","modified":1647781403268},{"_id":"themes/volantis/layout/_meta/category.ejs","hash":"1a801cf409dc24fd4ea1f90c9941b74890a16ec3","modified":1647781403267},{"_id":"themes/volantis/layout/_meta/date.ejs","hash":"e18dd6f5ea703ebd7afe50d4e94fdce8e33e71b3","modified":1647781403269},{"_id":"themes/volantis/layout/_meta/author.ejs","hash":"6abae4a1e188d2f059b841d6f466c8b77918ab66","modified":1647781403266},{"_id":"themes/volantis/layout/_meta/music.ejs","hash":"32e95a5ad95bf799b58ca9f4d595c201d64e372e","modified":1647781403269},{"_id":"themes/volantis/layout/_meta/share.ejs","hash":"d1aca13ece4278daf470e801b23b7546959a5b4e","modified":1647781403270},{"_id":"themes/volantis/layout/_meta/thumbnail.ejs","hash":"8afd94949e88f7c0373974234c6f80ed858705c7","modified":1647781403271},{"_id":"themes/volantis/layout/_meta/title.ejs","hash":"0f21bda3c7ed44ab26c22818114ed875f5718018","modified":1647781403271},{"_id":"themes/volantis/layout/_meta/wordcount.ejs","hash":"6d75bcb787ce216b45830c52e3a69b0b2630110e","modified":1647781403273},{"_id":"themes/volantis/layout/_meta/updated.ejs","hash":"4e6ed816c7ff181c820d1976e4557bcfb1486bc2","modified":1647781403272},{"_id":"themes/volantis/layout/_meta/top.ejs","hash":"4e7f1b980942b15eb5b15e43d969c4a0d3ad921f","modified":1647781403272},{"_id":"themes/volantis/layout/_partial/archive.ejs","hash":"4f3ec993e4498d0a9cd6e3f9aa796cbf6e659571","modified":1647781403274},{"_id":"themes/volantis/layout/_partial/article.ejs","hash":"0fcc6c99af3469e407fd90506e8550bc935fb6b0","modified":1647781403274},{"_id":"themes/volantis/layout/_meta/tags.ejs","hash":"111c399d6b90e2cda99d9d846c60e0a65bcd7e2d","modified":1647781403270},{"_id":"themes/volantis/layout/_partial/categories.ejs","hash":"7c7b6cc39e1aa8d01cc2e94d1195bb7620bb68ea","modified":1647781403275},{"_id":"themes/volantis/layout/_partial/cover.ejs","hash":"5beb8271519bccc1297381effd5de7f6cbf3cd7d","modified":1647781403275},{"_id":"themes/volantis/layout/_partial/footer.ejs","hash":"b4b7d9376e499b4aa760eea12122775cb1ebd0e5","modified":1647781403276},{"_id":"themes/volantis/layout/_partial/post.ejs","hash":"b4f9de79f5d153898685de976218c5ff10175d35","modified":1647781403278},{"_id":"themes/volantis/layout/_partial/header.ejs","hash":"8534579e5269178a2c827f9769370f07f55c3a5a","modified":1647781403277},{"_id":"themes/volantis/layout/_partial/meta.ejs","hash":"fe23edb7bb14b89dcaaf5e2046095a5402c4c06f","modified":1647781403278},{"_id":"themes/volantis/layout/_partial/head.ejs","hash":"ed0ef092bdf46c32852787eb139fa0f0a4efed50","modified":1647781403277},{"_id":"themes/volantis/layout/_partial/side.ejs","hash":"8fcd8edfaa77a9f2b8ec93268c9448e515b46254","modified":1647781403280},{"_id":"themes/volantis/layout/_third-party/clipboard.ejs","hash":"f3e8383b9f018d47715c3cfda51852556ca27061","modified":1647781403282},{"_id":"themes/volantis/layout/_third-party/aplayer.ejs","hash":"e520ca71b9c5a8b9eb383d82ca741efcc753ee47","modified":1647781403281},{"_id":"themes/volantis/layout/_partial/scripts.ejs","hash":"e7e8b74bf9d252bc09bcd2e093df79963605ecef","modified":1647781403279},{"_id":"themes/volantis/layout/_third-party/comments.ejs","hash":"fc1d6b2ce5ed022573497e2c8acacc69e5d91379","modified":1647781403282},{"_id":"themes/volantis/layout/_third-party/fancybox.ejs","hash":"4a80eea4b5766aac8ee72fff1ec976ca0ac037d9","modified":1647781403283},{"_id":"themes/volantis/layout/_widget/_pre.ejs","hash":"be59b18c8816d469e2d24fa644d7dc105ed2f850","modified":1647781403285},{"_id":"themes/volantis/layout/_third-party/mathjax.ejs","hash":"02977d9817e1897bde3f79d7006651930c4a6788","modified":1647781403284},{"_id":"themes/volantis/layout/_third-party/share.ejs","hash":"d67326e2ee45d035f4728a6df1ee662a8d00a3c2","modified":1647781403285},{"_id":"themes/volantis/layout/_widget/copyright.ejs","hash":"de6870c3cc658c054012c0c700d3e0342de99251","modified":1647781403287},{"_id":"themes/volantis/layout/_widget/category.ejs","hash":"7295c87e3e095018d07af7941232b12970f0fcc5","modified":1647781403287},{"_id":"themes/volantis/layout/_widget/blogger.ejs","hash":"91e085b11621d51057ac135d4046e5db1117e809","modified":1647781403286},{"_id":"themes/volantis/layout/_widget/group.ejs","hash":"4b438f59093823927a4adf36faad6482b814e0bd","modified":1647781403289},{"_id":"themes/volantis/layout/_widget/grid.ejs","hash":"6ceb91ad7fecbfaf86342a99656767c76bca357d","modified":1647781403288},{"_id":"themes/volantis/layout/_widget/header.ejs","hash":"b54a04af22efd55585af6e76ddbb7e856c5e9601","modified":1647781403289},{"_id":"themes/volantis/layout/_widget/load.ejs","hash":"bd5bd5bedcfd535fd1b774b26f944df4f6319ea7","modified":1647781403290},{"_id":"themes/volantis/layout/_widget/page.ejs","hash":"49ee453f2694a978dc159a39667e74d6b5b139e5","modified":1647781403291},{"_id":"themes/volantis/layout/_widget/music.ejs","hash":"92f156ef87392f7842c72540367ae452d85b2d63","modified":1647781403291},{"_id":"themes/volantis/layout/_widget/list.ejs","hash":"e00537a91f4099d5bc200fe23ba8e334bc1dc077","modified":1647781403290},{"_id":"themes/volantis/layout/_widget/related_posts.ejs","hash":"92754a4f747299709cda4e32a1eecb6ec54265ef","modified":1647781403293},{"_id":"themes/volantis/layout/_widget/qrcode.ejs","hash":"0209fc678cf2e7d0bf35be6a4b572598c150515d","modified":1647781403292},{"_id":"themes/volantis/layout/_widget/references.ejs","hash":"a893e28a646fa3bc8778f40da36e2cf15ff2a4fa","modified":1647781403292},{"_id":"themes/volantis/layout/_widget/text.ejs","hash":"a6e2d9e52008b548e1863355d319504abb59fabb","modified":1647781403294},{"_id":"themes/volantis/layout/_widget/toc.ejs","hash":"14e2078fcee0dabc10f37be53a065a8d1932dcfc","modified":1647781403295},{"_id":"themes/volantis/scripts/tags/btn.js","hash":"b89a1a6a889ed5b54b2d9a5c63493fa35934e3aa","modified":1647781403303},{"_id":"themes/volantis/scripts/events/index.js","hash":"a0f10031807f8c58c99085cfe95d850269ca709b","modified":1647781403301},{"_id":"themes/volantis/layout/_widget/tagcloud.ejs","hash":"e58c16a7671a3575cfec7093a24267d97f84646f","modified":1647781403293},{"_id":"themes/volantis/scripts/tags/dropmenu.js","hash":"5af4b247d1c05681455a3538949a95486f65eea8","modified":1647781403304},{"_id":"themes/volantis/scripts/tags/media.js","hash":"6109f4f68119ebe18900428d869b808b582648e7","modified":1647781403306},{"_id":"themes/volantis/scripts/tags/btns.js","hash":"84f9f17a2b73ab84d0a4e0980e393a00807db4ec","modified":1647781403303},{"_id":"themes/volantis/scripts/tags/fancybox.js","hash":"1114a4814ee7fc9ce9aaa64fe12cd333d7b9596d","modified":1647781403304},{"_id":"themes/volantis/scripts/tags/folding.js","hash":"12c5a1f771944f9c1dbcdbc52b1915a8a6b0c2d3","modified":1647781403305},{"_id":"themes/volantis/scripts/tags/note.js","hash":"21b6180562952b425e884dad73af3728179fb675","modified":1647781403306},{"_id":"themes/volantis/scripts/tags/span.js","hash":"89aaa0678188aa85ec18116af4b036f80ca7c073","modified":1647781403307},{"_id":"themes/volantis/source/img/azure.svg","hash":"9c42c8070528e28a97705fb410e65100632ae92b","modified":1647781403338},{"_id":"themes/volantis/scripts/tags/tabs.js","hash":"ee78854c09a3c67bd5512c69b6ccd3c19c6e08fb","modified":1647781403308},{"_id":"themes/volantis/source/img/algolia.svg","hash":"f86c0288423ba1b62c3bde06fc38f031af56e5f6","modified":1647781403337},{"_id":"themes/volantis/source/fonts/Monaco.ttf","hash":"d4de9305ce9e916ece179c3ab3b1faf80cc52bbb","modified":1647781403331},{"_id":"themes/volantis/source/css/style.styl","hash":"1495c9f380ef3767b77251dfbb30d2cefe78ca4d","modified":1647781403329},{"_id":"themes/volantis/source/img/baidu.svg","hash":"8f08ba555b4d8b262e2c3b7793dd169760f63880","modified":1647781403339},{"_id":"themes/volantis/source/js/._jinrishici.js","hash":"6223b096d9dce1c61e685ab5503c6a26bc08d126","modified":1647781403340},{"_id":"themes/volantis/source/js/app.js","hash":"ccc2c5bc1df54f416885c5d3cac04af754da9ee7","modified":1647781403340},{"_id":"themes/volantis/source/js/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1647781403341},{"_id":"themes/volantis/source/js/comment_typing.js","hash":"d56612535bf604fde1f96f8f2f4bb56a22f4801b","modified":1647781403342},{"_id":"themes/volantis/source/js/instant_page.js","hash":"277833fb1bc2a6e771d2961b4defa98c3a3a139e","modified":1647781403342},{"_id":"themes/volantis/source/js/jinrishici.js","hash":"366c97d572c91f032b463c584165a8d33f0a85d7","modified":1647781403343},{"_id":"themes/volantis/scripts/events/lib/config.js","hash":"913154f487b0e49c5a7fb0f462ec7fa4c90e87cb","modified":1647781403302},{"_id":"themes/volantis/source/css/_base/index.styl","hash":"ab9910c04338c5424081c3feff309ce9033792f7","modified":1647781403309},{"_id":"themes/volantis/source/js/search.js","hash":"f350aa35ddd23a9ccfed7b43043dbb1f5b53964f","modified":1647781403344},{"_id":"themes/volantis/source/css/_defines/color.styl","hash":"cfb9337896fcb634b81d3b81f8d7adca1f5d2e64","modified":1647781403310},{"_id":"themes/volantis/source/css/_defines/effect.styl","hash":"08129644c09950f527a9c13380442b01802d3a98","modified":1647781403310},{"_id":"themes/volantis/source/css/_highlight/index.styl","hash":"391d122f2f60129ea419b84c9461fd9555d9128a","modified":1647781403313},{"_id":"themes/volantis/source/css/_tag-plugins/btns.styl","hash":"0797b3cd818ea17c1eff7744fa0746527ae30a8e","modified":1647781403321},{"_id":"themes/volantis/source/css/_defines/layout.styl","hash":"1643920e34312eb2f4321998aaacede68a1587db","modified":1647781403312},{"_id":"themes/volantis/source/css/_defines/func.styl","hash":"79aa375a4e3a6c6f2a0ec87fd85c547612296ecb","modified":1647781403312},{"_id":"themes/volantis/source/css/_defines/fonts.styl","hash":"fab08291f9e0878b17488b5e448dc5b1385cb625","modified":1647781403311},{"_id":"themes/volantis/source/css/_tag-plugins/dropmenu.styl","hash":"95dee4693b259c2cf301732d02f62fc932438bda","modified":1647781403322},{"_id":"themes/volantis/source/css/_tag-plugins/folding.styl","hash":"50113ef473e19c3ee18345c2434468d86ceb46ac","modified":1647781403323},{"_id":"themes/volantis/source/css/_tag-plugins/media.styl","hash":"2f4afba9ddca31207733c44ef42884be0152c153","modified":1647781403323},{"_id":"themes/volantis/source/css/_tag-plugins/span.styl","hash":"0ba358f023c2efb3a289d3081af4789c521f5a12","modified":1647781403324},{"_id":"themes/volantis/source/css/_tag-plugins/note.styl","hash":"f1758e9307125bb316e9a325e69445bf8cef2d0e","modified":1647781403324},{"_id":"themes/volantis/source/css/_tag-plugins/tabs.styl","hash":"9c4dd75b3122b8ed1acc7819dbf146c7ddbe1cde","modified":1647781403325},{"_id":"themes/volantis/source/css/_layout/article.styl","hash":"ef170d587af2972c6b368762e2ca7e4f06eac743","modified":1647781403315},{"_id":"themes/volantis/source/css/_layout/archive.styl","hash":"67056065d1281bdd176aae97fef87f197d2e407d","modified":1647781403314},{"_id":"themes/volantis/source/css/_layout/cover.styl","hash":"6a759d8f94cd5b17149f1e5f05c0ff580d29ffe7","modified":1647781403315},{"_id":"themes/volantis/source/css/_layout/footer.styl","hash":"b1052db8e5460c825fff635cbed54d5f1bf38af1","modified":1647781403316},{"_id":"themes/volantis/source/css/_layout/friends.styl","hash":"8f5cc4d8ca1caec43fc9d257a1901322ab66e8a5","modified":1647781403317},{"_id":"themes/volantis/source/css/_layout/main.styl","hash":"6d318c44d36fbb2e3bfe3552dcce145ccb8b4d27","modified":1647781403317},{"_id":"themes/volantis/source/css/_layout/pagination.styl","hash":"5df45501c8daadf3b21b48ec49fed11d2894b86d","modified":1647781403318},{"_id":"themes/volantis/source/css/_layout/search.styl","hash":"d6bc91f03e6629ab94ab9ae09a2772a3eeb0b8c5","modified":1647781403319},{"_id":"themes/volantis/source/css/_layout/navbar.styl","hash":"fe1551c7133c40fd76f75da0ced9024335eb1d4e","modified":1647781403318},{"_id":"themes/volantis/source/css/_layout/sidebar.styl","hash":"a17629a04e12f5f2eace989930d76fdfa4f4ee8c","modified":1647781403320},{"_id":"themes/volantis/source/css/_layout/toc.styl","hash":"227186b7bc06fea575458d4ed28b42c0f05b678d","modified":1647781403320},{"_id":"themes/volantis/source/css/_third-party/alert.styl","hash":"b70cf9bb91586c70c70238802165a56b4bee8004","modified":1647781403326},{"_id":"themes/volantis/source/css/_third-party/clipboard.styl","hash":"939053df26a187536414eccadc4114c7ad0e3532","modified":1647781403327},{"_id":"themes/volantis/source/css/_third-party/aplayer.styl","hash":"2aa314005ced93a5b5b6d9b7b26b613a2ad5cac7","modified":1647781403326},{"_id":"themes/volantis/source/css/_third-party/fancybox.styl","hash":"d2634fb7f74decdaca142514d988a1f013c1de03","modified":1647781403328},{"_id":"themes/volantis/source/css/_third-party/valine.styl","hash":"88361fe4625116ff30d35ca20fd8c6774de2dba4","modified":1647781403329},{"_id":"source/BingSiteAuth.xml","hash":"750411de8d8d5ab1a1ad493217d8cc3354564fc9","modified":1647781402532},{"_id":"source/baidu_verify_wK0aFjA23e.html","hash":"a244a952d802628f34407822f4e325fdcdfd612a","modified":1647781402544},{"_id":"source/google0d6db0a70a8bfc6c.html","hash":"9138fbb4d29aaff25f5942a3e3b48c4f39a25e59","modified":1647781402547},{"_id":"source/robots.txt","hash":"fed0d2023190c2ac6c215e2e336fba3800bec60d","modified":1647781402691},{"_id":"source/404/index.md","hash":"358e125f34edc7e5f835b3ecb46dc38d894c2d17","modified":1647781402532},{"_id":"source/_posts/2020-02-11-meet-again-why-is-purel-in.md","hash":"e1cc24d1b76f7c0ccfff1ceca744ee012577a331","modified":1647781402535},{"_id":"source/_posts/2020-02-15-from-san-francisco-to-singapore-we-finally-arrived-in-seoul.md","hash":"c6c7dbbff04d436ebf89d1f721c22b0d9d2d18d9","modified":1647781402536},{"_id":"source/_posts/2020-03-04-seven-practices-of-great-leaders.md","hash":"3723701c40e84f0b1c5c4bbc2027c0da20e5a390","modified":1647781402537},{"_id":"source/_posts/2020-03-19-raspberry-pi-quantum-cloud-lab-in-your-pocket-software.md","hash":"32709c6d44336632d962b34499d3222c5acfa9cc","modified":1647781402539},{"_id":"source/_posts/2020-03-17-raspberry-pi-quantum-cloud-lab-in-your-pocket-hardware.md","hash":"967e824121e2171c77e21c9ca68f0bba2005855b","modified":1647781402538},{"_id":"source/_posts/2020-04-04-raspberry-pi-install-0-96-inch-spi-interface-ssd1306-screen.md","hash":"d70f0239f8f4d3f3fae022a076acaa3b8dd456c0","modified":1647781402539},{"_id":"source/_posts/2020-04-04-raspberry-pi-install-rtl8812bu-dual-band-wireless-network-card-driver.md","hash":"e5f87ac6d2c73c90d8e26b78976d35e8dba640ab","modified":1647781402540},{"_id":"source/_posts/2020-04-09-Hexo-Frp-iAWriter-Overclocked-Blogger.md","hash":"db598959b6904cdc2d10e8c33a9601ff36dab5d2","modified":1647781402541},{"_id":"source/_posts/2020-04-13-frp-fully-automated-daemon.md","hash":"94f691ae5f96df687b9c23d0ad1229a6e9e45b65","modified":1647781402543},{"_id":"source/about/index.md","hash":"9f51a3e2af8897542e646649e74a8600e873ea6b","modified":1647781402543},{"_id":"source/categories/index.md","hash":"2c4a5220e387a07df40c3b74231f06e166ebf943","modified":1647781402545},{"_id":"source/bbs/index.md","hash":"a2f94bc3fc50aa7ea7615492f8fc7f90448117e8","modified":1647781402545},{"_id":"source/_data/menu.yml","hash":"b0e88dc0c7c5ef3acd1ba9d31dec4969861b3154","modified":1647781402533},{"_id":"source/_posts/2020-04-12-Deploy-Hexo-to-Raspberry-Pi-and-Github.md","hash":"742dc16ea2f3ee9e180e11d0d9af12dba83ad904","modified":1647781402542},{"_id":"source/friends/index.md","hash":"00aaaeb5f0022ceef590a91de0f44cbcf5bb58d1","modified":1647781402546},{"_id":"source/mylist/index.md","hash":"26c538cb7104a2ac081bfd6bfb6526cd962d3af4","modified":1647781402690},{"_id":"source/images/.DS_Store","hash":"78c3193261722509c2888c9cff65d77bff67380f","modified":1647781402548},{"_id":"source/images/favicon.ico","hash":"0cea4c992a45666910b598e8401901a9e238b2bd","modified":1647781402682},{"_id":"source/images/._.DS_Store","hash":"fc7fa33a6d13d8f4d4b48fc9da0bdf65df8b1b44","modified":1647781402549},{"_id":"source/tags/index.md","hash":"c92af2dd14596d6fca0fc4a171fc7ba08d45ca0a","modified":1647781402692},{"_id":"source/images/2020/._.DS_Store","hash":"6802d822214dc3cb869ece23b57ed4f62c56071a","modified":1647781402550},{"_id":"source/images/2020/.DS_Store","hash":"1d6a8e797e4ce7a3847b15d017139de62849a0cf","modified":1647781402549},{"_id":"source/images/2020/02/._seoul.jpg","hash":"4f9ea538f445d31afa92d996463680ed2036bb8c","modified":1647781402551},{"_id":"source/images/2020/03/._7552A5D8.jpeg","hash":"95aed083da06a3d4dac836553c27d921b26efb75","modified":1647781402561},{"_id":"source/images/2020/03/._IMG_2372-2.JPG","hash":"f9d2d5db2075a08c40dae3ed048548ddae97f43b","modified":1647781402562},{"_id":"source/images/2020/03/._IMG_2377.jpg","hash":"c92e20d0ced1cbb21c95ab7e68e2b08c0ff95934","modified":1647781402562},{"_id":"source/images/2020/03/._IMG_2391.jpg","hash":"608607fb927a0f98b2c0f2d6de544dc44af39270","modified":1647781402564},{"_id":"source/images/2020/03/._pi3.5.jpg","hash":"3b41452f0699a01d9e04ec34155f73c7cc061d37","modified":1647781402565},{"_id":"source/images/2020/03/._pi.png","hash":"dd8affc9833d05905ba538ddd46d3877c9ac0412","modified":1647781402564},{"_id":"source/images/2020/03/._pi3.52.jpg","hash":"e4097f644c77662841615e6dbe9b102e8e4f04e7","modified":1647781402565},{"_id":"source/images/2020/03/._IMG_2391-scaled.jpg","hash":"6248e6c2df685b35067dd761924b3759bc7444eb","modified":1647781402563},{"_id":"source/images/2020/03/._psychedelic-treatments-consciousness-disorder-news-oct-2019.jpg","hash":"f34b048d3791ba42d792922c37d2e26fa4111aac","modified":1647781402566},{"_id":"source/images/2020/03/Crevisio-101-vOIDtN8rT.jpg","hash":"a3ed3c832a0c783a7b7ee5015d41efd09b712e00","modified":1647781402572},{"_id":"source/images/2020/03/pi3.52.jpg","hash":"d01fce6221b8e588b9553f6a767b772497c4c703","modified":1647781402587},{"_id":"source/images/2020/04/._ac1200m.jpg","hash":"7a90c6e8f60295d95cef5a0d8ca6d60fa7752983","modified":1647781402590},{"_id":"source/images/2020/03/psychedelic-treatments-consciousness-disorder-news-oct-2019.jpg","hash":"a38341c9746d0486a9a32bf097ec79d7104233e0","modified":1647781402589},{"_id":"source/images/2020/04/._frp.png","hash":"38aa7e11d41a9de02652d74830760ff2d44f1bf1","modified":1647781402591},{"_id":"source/images/2020/04/hexo-index.png","hash":"aa8825aa816234d879defd2c99851596eee08e40","modified":1647781402605},{"_id":"source/images/background/index.jpg","hash":"869457c57ec131f20a231b5fd1c2c0de21787e4f","modified":1647781402668},{"_id":"source/images/qrcode/wechat.JPG","hash":"49d8f1068f29893d282b8e5a1e4e4931ef8fddbd","modified":1647781402683},{"_id":"source/images/2020/02/seoul.jpg","hash":"1b055f5ad3e6307ee9d5821f96fbe9a9a6093e2d","modified":1647781402560},{"_id":"source/images/2020/02/artificial-intelligence-conscious-3d-illustration-neuron-concept-ai-consciousness-592921421.jpg","hash":"a0be21098f23b902306ee05e6352c9b5102f4dc8","modified":1647781402557},{"_id":"source/images/2020/03/pi3.5.jpg","hash":"2b942e1ac49e6952f82e5a542475ef63dc049027","modified":1647781402586},{"_id":"source/images/2020/04/frp.png","hash":"24fd8ce0ba5ff0b746f3db3632e1a599b2d3e425","modified":1647781402605},{"_id":"source/images/2020/04/ac1200m.jpg","hash":"0b705bc16a21c4c966ee49a552bd887bcac042f0","modified":1647781402603},{"_id":"source/images/background/index3.jpg","hash":"8aefdae8278be4bb0021e33ceb1e0bafd2cf06f5","modified":1647781402681},{"_id":"source/images/2020/03/pi.png","hash":"aef918e35cb09025822b238efb6f38bb2ff241ab","modified":1647781402585},{"_id":"source/images/2020/03/pi4shan.png","hash":"5fc05f128268a5afba2532befa58604a26931245","modified":1647781402588},{"_id":"themes/volantis/source/fonts/Skranji-Regular.ttf","hash":"485dc033e34a5a92a45ffe5839514f0471b18208","modified":1647781403333},{"_id":"themes/volantis/source/js/valine.js","hash":"a6d12a1d92f9e2ae82df728f7e459a2b5efb2c23","modified":1647781403346},{"_id":"source/images/2020/03/IMG_2372-2.JPG","hash":"d728b9112764f0bdcd09a235cd8d300a311cd8e5","modified":1647781402574},{"_id":"source/images/2020/03/IMG_2391-scaled.jpg","hash":"ed402ecfae6c80d2d9cfbd5e9932c60f2fe80af0","modified":1647781402580},{"_id":"source/images/2020/02/quantum.jpg","hash":"6ea6d07f6158c5ed263e1ff8301c7495ed565639","modified":1647781402559},{"_id":"themes/volantis/source/fonts/Ubuntu-Regular.ttf","hash":"b100b2ed912a91e4d0a7c5f5309fe8ad7b3a2dd8","modified":1647781403336},{"_id":"source/images/2020/04/spi-scaled.jpg","hash":"e8e53e01ec8296474620b89907ab818a8d8e99a0","modified":1647781402628},{"_id":"source/images/2020/03/IMG_2377.jpg","hash":"4e15ab0cca0935c84d0778ae3d91c217cf99a207","modified":1647781402577},{"_id":"source/images/2020/03/IMG_2391.jpg","hash":"2c835878c58c80b4e10bbc08cd36d2d373a9aee0","modified":1647781402584},{"_id":"source/images/2020/04/ac1200-scaled.jpg","hash":"7d82885951e63fa8d6d32c1cd97270dbeb1f136a","modified":1647781402594},{"_id":"source/images/2020/04/spi-night.jpg","hash":"c08b8c1ea468209a07faacc2ec82a33434deaa36","modified":1647781402623},{"_id":"source/images/background/index2.jpg-slim","hash":"e6a9ecd066b8968bb32900fe0aef78defd728e5f","modified":1647781402680},{"_id":"source/images/2020/03/7552A5D8.jpeg","hash":"bce6ae6c1c42a23a7559c4126b967cb715bc4fb1","modified":1647781402570},{"_id":"source/images/2020/04/spi-black.jpg","hash":"8ec94603470d36c6922bdb1b071a64fd726e6e6a","modified":1647781402619},{"_id":"source/images/2020/02/Apple-iMac.jpg","hash":"847bbafea3d5e02f49aaeab206d2f9ff5382aac6","modified":1647781402556},{"_id":"source/images/2020/04/ac1200.jpg","hash":"e5160c77bc2e07efb3449959ea9ed908a44a87c0","modified":1647781402602},{"_id":"source/images/waterboy.JPG","hash":"51cf810bedb924fdf299ea5e7f3602674fa0c8a9","modified":1647781402689},{"_id":"source/images/background/index.jpeg","hash":"ef1b6bd9f86f63927dc2a17093f5a1e0ef6197b0","modified":1647781402667},{"_id":"source/images/background/index1.jpeg","hash":"ef1b6bd9f86f63927dc2a17093f5a1e0ef6197b0","modified":1647781402676},{"_id":"source/images/2020/04/sys_info.jpg","hash":"4d0f75fe6d375b5d010b8d2d84fb5135ab41f5dc","modified":1647781402659},{"_id":"source/images/2020/04/spi.jpg","hash":"4d16f2cb127817e8951acd9fddc6ea55812fe09d","modified":1647781402652},{"_id":"source/images/2020/04/hexopi.jpg","hash":"0b0025085af02f29b4f63d876af7d3373252b7bb","modified":1647781402614},{"_id":"source/images/2020/04/spi.bmp","hash":"78d622fd0b82ed86c84aca6e475a3702a6c197e9","modified":1647781402645},{"_id":"public/atom.xml","hash":"a90bd3cc9e6f4d0764dfcdfd3a35e51d5ec37249","modified":1647790147698},{"_id":"public/sitemap.xml","hash":"7735dae7a82b9a8390c3a3efdcfcf253915091d0","modified":1647790212836},{"_id":"public/search.xml","hash":"bb510c0048ca15d6a2448afbc63796d4898f366d","modified":1647790147698},{"_id":"public/content.json","hash":"781d5b7fcf3cf55c164d757c2a0a500bf990d5de","modified":1647790147698},{"_id":"public/about/index.html","hash":"f010f2605fbb8781d571ab1359321c7cdcea348c","modified":1647790147698},{"_id":"public/categories/index.html","hash":"f29200ac0b23314ca795e4a9609784a166dc89d1","modified":1647790147698},{"_id":"public/google0d6db0a70a8bfc6c.html","hash":"a4311f10321c7d5e72b146c9fafd4cb577260cb8","modified":1647790147698},{"_id":"public/404/index.html","hash":"d046cf512878f1988a44bdec4188d992ed926c91","modified":1647790147698},{"_id":"public/bbs/index.html","hash":"fc2eaa0cbe7d9ee72f8739febc0a0cabe920d19a","modified":1647790147698},{"_id":"public/friends/index.html","hash":"9e6d2a9dbb4a23b35fa8ad4f917372c8072b612c","modified":1647790147698},{"_id":"public/mylist/index.html","hash":"b582f6345a50ae3a03f572f13d2f1275e8c5c390","modified":1647790147698},{"_id":"public/tags/index.html","hash":"f4d7e40de71e056f6b2588c48d0f5ec5af7be0b5","modified":1647790147698},{"_id":"public/frp-fully-automated-daemon/index.html","hash":"85c7406ffd4cb4fd320110518ca2db541f31b852","modified":1647790147698},{"_id":"public/baidu_verify_wK0aFjA23e.html","hash":"f24f6ab74929ca1ff5a119061b5602e0f36b4778","modified":1647790147698},{"_id":"public/Deploy-Hexo-to-Raspberry-Pi-and-Github/index.html","hash":"6b8f33c223a6027b9cac4d3b3f844007f06895ab","modified":1647790147698},{"_id":"public/Hexo-Frp-iAWriter-Overclocked-Blogger/index.html","hash":"d14342a7d3f330be6290c9de9e3361c2f5f6b4e2","modified":1647790147698},{"_id":"public/raspberry-pi-install-rtl8812bu-dual-band-wireless-network-card-driver/index.html","hash":"93805752d0f85f6732f2d745b7b750c5530d4199","modified":1647790147698},{"_id":"public/raspberry-pi-install-0-96-inch-spi-interface-ssd1306-screen/index.html","hash":"9d28ec05fd527659868d047023ae949965c36b8e","modified":1647790147698},{"_id":"public/raspberry-pi-quantum-cloud-lab-in-your-pocket-hardware/index.html","hash":"8b72f5f59277a51373637301da1d52930a5bc369","modified":1647790147698},{"_id":"public/raspberry-pi-quantum-cloud-lab-in-your-pocket-software/index.html","hash":"3101eea161eedf689d010f6c0e792e46f292da8c","modified":1647790147698},{"_id":"public/seven-practices-of-great-leaders/index.html","hash":"67c3c825cdb4442fea76df22524725a5bc08361a","modified":1647790147698},{"_id":"public/from-san-francisco-to-singapore-we-finally-arrived-in-seoul/index.html","hash":"55dad0543cd8f47af0785c9dd416623dea4fed06","modified":1647790147698},{"_id":"public/meet-again-why-is-purel-in/index.html","hash":"be5a0bb1701143d9c4071e19714fc1a0e3c843fa","modified":1647790147698},{"_id":"public/archives/index.html","hash":"5b56e4b532dbc87deb1b94838675f2de04b59384","modified":1647790147698},{"_id":"public/archives/2020/index.html","hash":"38b690f41ab3b80d480b407558d42edd6fbbada8","modified":1647790147698},{"_id":"public/archives/2020/02/index.html","hash":"7f6ceedcf05bbda8de26867a4aba5c16ff7d8249","modified":1647790147698},{"_id":"public/archives/2020/03/index.html","hash":"50bca88bd5349c7606551a007bdf482dba61b036","modified":1647790147698},{"_id":"public/categories/网站/index.html","hash":"d0a14109e7b695fa595b754c850b53786dbab52e","modified":1647790147698},{"_id":"public/archives/2020/04/index.html","hash":"893d782c42551deb6d01aefc81de0859d8ac4e73","modified":1647790147698},{"_id":"public/categories/树梅派/index.html","hash":"d42e0d240cb5f0479a22c51f5cb64bd63554772e","modified":1647790147698},{"_id":"public/tags/Purel-in/index.html","hash":"652df5c217d63b6febccc29fe228853641de7e2f","modified":1647790147698},{"_id":"public/categories/学习/index.html","hash":"44035b83fde4d6f6879034126d85cd774b97e1ba","modified":1647790147698},{"_id":"public/tags/Wordpress/index.html","hash":"2299b5c6010f2d1291b28a312d907a880d24aa37","modified":1647790147698},{"_id":"public/index.html","hash":"a5a3d4b32ef31fe123b1252527247e9ad99ff4ec","modified":1647790147698},{"_id":"public/tags/服务器/index.html","hash":"f9f3a87957765206e81e0e907e155c29a24db5e2","modified":1647790147698},{"_id":"public/tags/数据中心/index.html","hash":"1abbb5a6362756d597564d163cd389f6041ba294","modified":1647790147698},{"_id":"public/tags/领导力/index.html","hash":"6e0ee91af4637323f5d7337fbfd6188c0179b6d3","modified":1647790147698},{"_id":"public/tags/修炼/index.html","hash":"8676bf6c8e655cfa1997a0c9503e5de0c2361d91","modified":1647790147698},{"_id":"public/tags/Leadership/index.html","hash":"11ffd5c804d86f8a83245b3d5d8c1105c52e7f89","modified":1647790147698},{"_id":"public/tags/疫情/index.html","hash":"85a2fba20990dac005abdc936398ad330fe38eb4","modified":1647790147698},{"_id":"public/tags/合一/index.html","hash":"9c4e79e29dd049e0a4ce12c59b49594f9d81d8b3","modified":1647790147698},{"_id":"public/tags/学习/index.html","hash":"b04639a96389cc527cb189575d8732da3b6b8405","modified":1647790147698},{"_id":"public/tags/树梅派/index.html","hash":"802c4e4287030c8856c0574600c95fa3df04a8d9","modified":1647790147698},{"_id":"public/tags/3-5inch/index.html","hash":"5a32a5615dcd7779525745a7ccc4bfa01cc114e9","modified":1647790147698},{"_id":"public/tags/LCD/index.html","hash":"5c026b653c2ae11e05b3420d363b79032266438d","modified":1647790147698},{"_id":"public/tags/Lofree/index.html","hash":"71b6f45a453e109998d9cc5d3a82c60b4cf131b7","modified":1647790147698},{"_id":"public/tags/Pi/index.html","hash":"5c407c746010512a5c86b63fc70648522d75d625","modified":1647790147698},{"_id":"public/tags/Frp/index.html","hash":"742751b606dab234f4e539fbfa6c0407f5a37586","modified":1647790147698},{"_id":"public/tags/内网穿透/index.html","hash":"ad7e87c62b6fd3fa674413cc04361a3d777c76e5","modified":1647790147698},{"_id":"public/tags/WIFI/index.html","hash":"b4d7a25c5158668da0f093313c3007342b5ba2e0","modified":1647790147698},{"_id":"public/tags/SSH/index.html","hash":"e025d1dd9e542a61300126afcdd024983515d0ff","modified":1647790147698},{"_id":"public/tags/root/index.html","hash":"2ba845740683294ae65bb6cb4d13734a146baccc","modified":1647790147698},{"_id":"public/tags/ssd1306/index.html","hash":"6a9b3439d3a8026f879d83de518f4fe42bb2c6c4","modified":1647790147698},{"_id":"public/tags/SSR/index.html","hash":"bfd9178c1f0cffada4bb3c67b4ce157d8c9fc4f8","modified":1647790147698},{"_id":"public/tags/SPI/index.html","hash":"814cc03e31962bdbd0a14a4efbcb5faa9ee3c3a5","modified":1647790147698},{"_id":"public/tags/Python/index.html","hash":"4b1033ccc1870d60ce4365327c64e85ab081cfcb","modified":1647790147698},{"_id":"public/tags/驱动/index.html","hash":"bcf8e753d3424d71446efbac2f9c482cf7e0f5b7","modified":1647790147698},{"_id":"public/tags/rtl8812bu/index.html","hash":"7530cd0f93fc3ad672b14a1d4a0bcf90da0e83b6","modified":1647790147698},{"_id":"public/tags/无线网卡/index.html","hash":"9a9dee8ac20521722a1f7578e2bb8891b1f919f6","modified":1647790147698},{"_id":"public/tags/树莓派/index.html","hash":"cc1a21d1a6705f685e9ab5d00142f5b90c9ab137","modified":1647790147698},{"_id":"public/tags/守护进程/index.html","hash":"71643d3408f913315cef72b1f6eb77a5277641e4","modified":1647790147698},{"_id":"public/tags/Hexo/index.html","hash":"c6b6b60310c547a76047e1356b813224e655dba5","modified":1647790147698},{"_id":"public/tags/Markdown/index.html","hash":"b46ce55f9183f568093517fe458267e84d96e1b6","modified":1647790147698},{"_id":"public/tags/Blog/index.html","hash":"aaf1bbc1660f6fa5c776b468e181d3f206e11d35","modified":1647790147698},{"_id":"public/tags/iA-Writer/index.html","hash":"fe2d74cd8dddbbe49dd7549d2d9cc80cd2678563","modified":1647790147698},{"_id":"public/tags/Samba/index.html","hash":"fbcfb3fdc0f0c3f7423e1d6a7e2f30395eab7760","modified":1647790147698},{"_id":"public/tags/Github/index.html","hash":"03e6f2bbf73533b28e5bff3b2641457b255fd701","modified":1647790147698},{"_id":"public/img/algolia.svg","hash":"f86c0288423ba1b62c3bde06fc38f031af56e5f6","modified":1647790147698},{"_id":"public/fonts/Monaco.ttf","hash":"d4de9305ce9e916ece179c3ab3b1faf80cc52bbb","modified":1647790147698},{"_id":"public/img/azure.svg","hash":"9c42c8070528e28a97705fb410e65100632ae92b","modified":1647790147698},{"_id":"public/img/baidu.svg","hash":"8f08ba555b4d8b262e2c3b7793dd169760f63880","modified":1647790147698},{"_id":"public/images/favicon.ico","hash":"0cea4c992a45666910b598e8401901a9e238b2bd","modified":1647790147698},{"_id":"public/robots.txt","hash":"fed0d2023190c2ac6c215e2e336fba3800bec60d","modified":1647790147698},{"_id":"public/BingSiteAuth.xml","hash":"750411de8d8d5ab1a1ad493217d8cc3354564fc9","modified":1647790147698},{"_id":"public/images/2020/03/Crevisio-101-vOIDtN8rT.jpg","hash":"a3ed3c832a0c783a7b7ee5015d41efd09b712e00","modified":1647790147698},{"_id":"public/images/2020/04/hexo-index.png","hash":"aa8825aa816234d879defd2c99851596eee08e40","modified":1647790147698},{"_id":"public/images/2020/03/pi3.52.jpg","hash":"d01fce6221b8e588b9553f6a767b772497c4c703","modified":1647790147698},{"_id":"public/images/2020/03/psychedelic-treatments-consciousness-disorder-news-oct-2019.jpg","hash":"a38341c9746d0486a9a32bf097ec79d7104233e0","modified":1647790147698},{"_id":"public/images/background/index.jpg","hash":"869457c57ec131f20a231b5fd1c2c0de21787e4f","modified":1647790147698},{"_id":"public/images/qrcode/wechat.JPG","hash":"49d8f1068f29893d282b8e5a1e4e4931ef8fddbd","modified":1647790147698},{"_id":"public/images/2020/02/artificial-intelligence-conscious-3d-illustration-neuron-concept-ai-consciousness-592921421.jpg","hash":"a0be21098f23b902306ee05e6352c9b5102f4dc8","modified":1647790147698},{"_id":"public/images/2020/02/seoul.jpg","hash":"1b055f5ad3e6307ee9d5821f96fbe9a9a6093e2d","modified":1647790147698},{"_id":"public/js/instant_page.js","hash":"bca8b08e62be2f0cb66455ac325dc560987dd455","modified":1647790147698},{"_id":"public/js/app.js","hash":"e24838e0f14d2e8a5c27667fec0cdfd3efc1ea91","modified":1647790147698},{"_id":"public/js/comment_typing.js","hash":"08dfdff4cc2c2a2c6741cd2dfba04369c8ba81bc","modified":1647790147698},{"_id":"public/js/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1647790147698},{"_id":"public/js/jinrishici.js","hash":"a8a77d7ddb55a71616c6eb3d0e562751d5cab7e4","modified":1647790147698},{"_id":"public/css/style.css","hash":"54ec98d494317c012395e97514cbc04d219ce5e2","modified":1647790147698},{"_id":"public/js/search.js","hash":"9814708d244d30cd9baaee358f9f29b9e3d6a0ac","modified":1647790147698},{"_id":"public/js/valine.js","hash":"55e9986e28474e60044cc92f87c3faf2a3a8cfe2","modified":1647790147698},{"_id":"public/images/2020/03/pi3.5.jpg","hash":"2b942e1ac49e6952f82e5a542475ef63dc049027","modified":1647790147698},{"_id":"public/images/2020/04/frp.png","hash":"24fd8ce0ba5ff0b746f3db3632e1a599b2d3e425","modified":1647790147698},{"_id":"public/images/2020/04/ac1200m.jpg","hash":"0b705bc16a21c4c966ee49a552bd887bcac042f0","modified":1647790147698},{"_id":"public/images/background/index3.jpg","hash":"8aefdae8278be4bb0021e33ceb1e0bafd2cf06f5","modified":1647790147698},{"_id":"public/images/2020/03/pi.png","hash":"aef918e35cb09025822b238efb6f38bb2ff241ab","modified":1647790147698},{"_id":"public/images/2020/03/pi4shan.png","hash":"5fc05f128268a5afba2532befa58604a26931245","modified":1647790147698},{"_id":"public/fonts/Skranji-Regular.ttf","hash":"485dc033e34a5a92a45ffe5839514f0471b18208","modified":1647790147698},{"_id":"public/images/2020/03/IMG_2372-2.JPG","hash":"d728b9112764f0bdcd09a235cd8d300a311cd8e5","modified":1647790147698},{"_id":"public/images/2020/03/IMG_2391-scaled.jpg","hash":"ed402ecfae6c80d2d9cfbd5e9932c60f2fe80af0","modified":1647790147698},{"_id":"public/images/2020/02/quantum.jpg","hash":"6ea6d07f6158c5ed263e1ff8301c7495ed565639","modified":1647790147698},{"_id":"public/fonts/Ubuntu-Regular.ttf","hash":"b100b2ed912a91e4d0a7c5f5309fe8ad7b3a2dd8","modified":1647790147698},{"_id":"public/images/2020/04/spi-scaled.jpg","hash":"e8e53e01ec8296474620b89907ab818a8d8e99a0","modified":1647790147698},{"_id":"public/images/2020/03/IMG_2391.jpg","hash":"2c835878c58c80b4e10bbc08cd36d2d373a9aee0","modified":1647790147698},{"_id":"public/images/2020/04/ac1200-scaled.jpg","hash":"7d82885951e63fa8d6d32c1cd97270dbeb1f136a","modified":1647790147698},{"_id":"public/images/2020/03/IMG_2377.jpg","hash":"4e15ab0cca0935c84d0778ae3d91c217cf99a207","modified":1647790147698},{"_id":"public/images/2020/04/spi-night.jpg","hash":"c08b8c1ea468209a07faacc2ec82a33434deaa36","modified":1647790147698},{"_id":"public/images/2020/03/7552A5D8.jpeg","hash":"bce6ae6c1c42a23a7559c4126b967cb715bc4fb1","modified":1647790147698},{"_id":"public/images/background/index2.jpg-slim","hash":"e6a9ecd066b8968bb32900fe0aef78defd728e5f","modified":1647790147698},{"_id":"public/images/2020/04/spi-black.jpg","hash":"8ec94603470d36c6922bdb1b071a64fd726e6e6a","modified":1647790147698},{"_id":"public/images/2020/02/Apple-iMac.jpg","hash":"847bbafea3d5e02f49aaeab206d2f9ff5382aac6","modified":1647790147698},{"_id":"public/images/2020/04/ac1200.jpg","hash":"e5160c77bc2e07efb3449959ea9ed908a44a87c0","modified":1647790147698},{"_id":"public/images/waterboy.JPG","hash":"51cf810bedb924fdf299ea5e7f3602674fa0c8a9","modified":1647790147698},{"_id":"public/images/background/index.jpeg","hash":"ef1b6bd9f86f63927dc2a17093f5a1e0ef6197b0","modified":1647790147698},{"_id":"public/images/background/index1.jpeg","hash":"ef1b6bd9f86f63927dc2a17093f5a1e0ef6197b0","modified":1647790147698},{"_id":"public/images/2020/04/sys_info.jpg","hash":"4d0f75fe6d375b5d010b8d2d84fb5135ab41f5dc","modified":1647790147698},{"_id":"public/images/2020/04/spi.jpg","hash":"4d16f2cb127817e8951acd9fddc6ea55812fe09d","modified":1647790147698},{"_id":"public/images/2020/04/hexopi.jpg","hash":"0b0025085af02f29b4f63d876af7d3373252b7bb","modified":1647790147698},{"_id":"public/images/2020/04/spi.bmp","hash":"78d622fd0b82ed86c84aca6e475a3702a6c197e9","modified":1647790147698},{"_id":"public/post-sitemap.xml","hash":"d0e609f4f633e4d9c329463ac02bd968418bcb33","modified":1647790212836},{"_id":"public/page-sitemap.xml","hash":"4801cb810528ff7a5f0263f98f07c09cb0a918c0","modified":1647790212836},{"_id":"public/category-sitemap.xml","hash":"93a140bdf94b8807b097ad9097e10c91b6666cc9","modified":1647790212836},{"_id":"public/tag-sitemap.xml","hash":"f09f31a7ed45cc54a924e1963b4cea3f12007699","modified":1647790212836},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1647790212836}],"Category":[{"name":"网站","_id":"cl0zfpkce0004loc6hrjh11uw"},{"name":"学习","_id":"cl0zfpkcn000iloc6a0ld2gg3"},{"name":"树梅派","_id":"cl0zfpkcp000rloc6hav78ioi"}],"Data":[{"_id":"menu","data":[{"name":"文章","icon":"fas fa-newspaper","rows":[{"name":"分类","icon":"fas fa-folder-open","url":"categories/"},{"name":"标签","icon":"fas fa-tags","url":"tags/"},{"name":"归档","icon":"fas fa-archive","url":"archives/"}]},{"name":"邻星","icon":"fas fa-link","url":"friends/"},{"name":"关于","icon":"fas fa-info-circle","url":"about/"},{"name":"留言板","icon":"fas fa-comment-dots","url":"bbs/"},{"name":"实验室","icon":"fas fa-flask","rows":[{"name":"Pi","icon":"fab fa-raspberry-pi","url":"https://pi.purel.in"},{"name":"Cloud","icon":"fab fa-cloudversify","url":"https://cloud.purel.in/"}]}]}],"Page":[{"_content":"google-site-verification: google0d6db0a70a8bfc6c.html","source":"google0d6db0a70a8bfc6c.html","raw":"google-site-verification: google0d6db0a70a8bfc6c.html","date":"2022-03-20T13:03:22.547Z","updated":"2022-03-20T13:03:22.547Z","path":"google0d6db0a70a8bfc6c.html","title":"","comments":1,"layout":"page","_id":"cl0zfpkc40000loc62pvhgafr","content":"google-site-verification: google0d6db0a70a8bfc6c.html","site":{"data":{"menu":[{"name":"文章","icon":"fas fa-newspaper","rows":[{"name":"分类","icon":"fas fa-folder-open","url":"categories/"},{"name":"标签","icon":"fas fa-tags","url":"tags/"},{"name":"归档","icon":"fas fa-archive","url":"archives/"}]},{"name":"邻星","icon":"fas fa-link","url":"friends/"},{"name":"关于","icon":"fas fa-info-circle","url":"about/"},{"name":"留言板","icon":"fas fa-comment-dots","url":"bbs/"},{"name":"实验室","icon":"fas fa-flask","rows":[{"name":"Pi","icon":"fab fa-raspberry-pi","url":"https://pi.purel.in"},{"name":"Cloud","icon":"fab fa-cloudversify","url":"https://cloud.purel.in/"}]}]}},"excerpt":"","more":"google-site-verification: google0d6db0a70a8bfc6c.html"},{"layout":"page","title":"404 Not Found","body":["article","comments"],"meta":{"header":[],"footer":[]},"sidebar":[],"valine":{"path":"/404.html","placeholder":"请留言告诉我您要访问哪个页面找不到了"},"_content":"{% p center huge, 404 %}\n{% p center bold, 很抱歉，您访问的页面不存在 %}\n{% p center small, 可能是输入地址有误或该地址已被删除 %}","source":"404/index.md","raw":"---\nlayout: page\ntitle: 404 Not Found\nbody: [article, comments]\nmeta:\n  header: []\n  footer: []\nsidebar: []\nvaline:\n  path: /404.html\n  placeholder: 请留言告诉我您要访问哪个页面找不到了\n---\n{% p center huge, 404 %}\n{% p center bold, 很抱歉，您访问的页面不存在 %}\n{% p center small, 可能是输入地址有误或该地址已被删除 %}","date":"2022-03-20T13:03:22.532Z","updated":"2022-03-20T13:03:22.532Z","path":"404/index.html","comments":1,"_id":"cl0zfpkcb0002loc69v447vk0","content":"<p class='p center huge'>404</p>\n<p class='p center bold'>很抱歉，您访问的页面不存在</p>\n<p class='p center small'>可能是输入地址有误或该地址已被删除</p>","site":{"data":{"menu":[{"name":"文章","icon":"fas fa-newspaper","rows":[{"name":"分类","icon":"fas fa-folder-open","url":"categories/"},{"name":"标签","icon":"fas fa-tags","url":"tags/"},{"name":"归档","icon":"fas fa-archive","url":"archives/"}]},{"name":"邻星","icon":"fas fa-link","url":"friends/"},{"name":"关于","icon":"fas fa-info-circle","url":"about/"},{"name":"留言板","icon":"fas fa-comment-dots","url":"bbs/"},{"name":"实验室","icon":"fas fa-flask","rows":[{"name":"Pi","icon":"fab fa-raspberry-pi","url":"https://pi.purel.in"},{"name":"Cloud","icon":"fab fa-cloudversify","url":"https://cloud.purel.in/"}]}]}},"excerpt":"","more":"<p class='p center huge'>404</p>\n<p class='p center bold'>很抱歉，您访问的页面不存在</p>\n<p class='p center small'>可能是输入地址有误或该地址已被删除</p>"},{"layout":"page","title":"关于","cover":true,"meta":{"header":[],"footer":[]},"sidebar":[],"comments":0,"_content":"徐老师正在努力建设本站，它架设在我家客厅的树梅派上。\n你可以前往 [<i class=\"fas fa-comment-dots\"></i> 留言板](https://purel.in/bbs/) 写下想说的话","source":"about/index.md","raw":"---\nlayout: page\ntitle: 关于\ncover: true\nmeta:\n  header: []\n  footer: []\nsidebar: []\ncomments: false\n---\n徐老师正在努力建设本站，它架设在我家客厅的树梅派上。\n你可以前往 [<i class=\"fas fa-comment-dots\"></i> 留言板](https://purel.in/bbs/) 写下想说的话","date":"2022-03-20T13:03:22.543Z","updated":"2022-03-20T13:03:22.543Z","path":"about/index.html","_id":"cl0zfpkcf0006loc6frrjh00k","content":"<p>徐老师正在努力建设本站，它架设在我家客厅的树梅派上。<br>你可以前往 <a href=\"https://purel.in/bbs/\"><i class=\"fas fa-comment-dots\"></i> 留言板</a> 写下想说的话</p>\n","site":{"data":{"menu":[{"name":"文章","icon":"fas fa-newspaper","rows":[{"name":"分类","icon":"fas fa-folder-open","url":"categories/"},{"name":"标签","icon":"fas fa-tags","url":"tags/"},{"name":"归档","icon":"fas fa-archive","url":"archives/"}]},{"name":"邻星","icon":"fas fa-link","url":"friends/"},{"name":"关于","icon":"fas fa-info-circle","url":"about/"},{"name":"留言板","icon":"fas fa-comment-dots","url":"bbs/"},{"name":"实验室","icon":"fas fa-flask","rows":[{"name":"Pi","icon":"fab fa-raspberry-pi","url":"https://pi.purel.in"},{"name":"Cloud","icon":"fab fa-cloudversify","url":"https://cloud.purel.in/"}]}]}},"excerpt":"","more":"<p>徐老师正在努力建设本站，它架设在我家客厅的树梅派上。<br>你可以前往 <a href=\"https://purel.in/bbs/\"><i class=\"fas fa-comment-dots\"></i> 留言板</a> 写下想说的话</p>\n"},{"layout":"category","index":true,"cover":true,"title":"所有分类","_content":"","source":"categories/index.md","raw":"---\nlayout: category\nindex: true\ncover: true\ntitle: 所有分类\n---","date":"2022-03-20T13:03:22.545Z","updated":"2022-03-20T13:03:22.545Z","path":"categories/index.html","comments":1,"_id":"cl0zfpkch0008loc6bqm38y2b","content":"","site":{"data":{"menu":[{"name":"文章","icon":"fas fa-newspaper","rows":[{"name":"分类","icon":"fas fa-folder-open","url":"categories/"},{"name":"标签","icon":"fas fa-tags","url":"tags/"},{"name":"归档","icon":"fas fa-archive","url":"archives/"}]},{"name":"邻星","icon":"fas fa-link","url":"friends/"},{"name":"关于","icon":"fas fa-info-circle","url":"about/"},{"name":"留言板","icon":"fas fa-comment-dots","url":"bbs/"},{"name":"实验室","icon":"fas fa-flask","rows":[{"name":"Pi","icon":"fab fa-raspberry-pi","url":"https://pi.purel.in"},{"name":"Cloud","icon":"fab fa-cloudversify","url":"https://cloud.purel.in/"}]}]}},"excerpt":"","more":""},{"_content":"wK0aFjA23e","source":"baidu_verify_wK0aFjA23e.html","raw":"wK0aFjA23e","date":"2022-03-20T13:03:22.544Z","updated":"2022-03-20T13:03:22.544Z","path":"baidu_verify_wK0aFjA23e.html","title":"","comments":1,"layout":"page","_id":"cl0zfpkci000aloc67c0thqy2","content":"wK0aFjA23e","site":{"data":{"menu":[{"name":"文章","icon":"fas fa-newspaper","rows":[{"name":"分类","icon":"fas fa-folder-open","url":"categories/"},{"name":"标签","icon":"fas fa-tags","url":"tags/"},{"name":"归档","icon":"fas fa-archive","url":"archives/"}]},{"name":"邻星","icon":"fas fa-link","url":"friends/"},{"name":"关于","icon":"fas fa-info-circle","url":"about/"},{"name":"留言板","icon":"fas fa-comment-dots","url":"bbs/"},{"name":"实验室","icon":"fas fa-flask","rows":[{"name":"Pi","icon":"fab fa-raspberry-pi","url":"https://pi.purel.in"},{"name":"Cloud","icon":"fab fa-cloudversify","url":"https://cloud.purel.in/"}]}]}},"excerpt":"","more":"wK0aFjA23e"},{"layout":"bbs","title":"留言板","meta":{"header":[],"footer":[]},"valine":{"placeholder":"有什么想对我说的呢？"},"_content":"Hi there.\n欢迎给我留言～","source":"bbs/index.md","raw":"---\nlayout: bbs\ntitle: 留言板\n\nmeta:\n  header: []\n  footer: []\nvaline:\n  placeholder: 有什么想对我说的呢？\n---\nHi there.\n欢迎给我留言～","date":"2022-03-20T13:03:22.545Z","updated":"2022-03-20T13:03:22.545Z","path":"bbs/index.html","comments":1,"_id":"cl0zfpkcl000eloc6fclyfjpa","content":"<p>Hi there.<br>欢迎给我留言～</p>\n","site":{"data":{"menu":[{"name":"文章","icon":"fas fa-newspaper","rows":[{"name":"分类","icon":"fas fa-folder-open","url":"categories/"},{"name":"标签","icon":"fas fa-tags","url":"tags/"},{"name":"归档","icon":"fas fa-archive","url":"archives/"}]},{"name":"邻星","icon":"fas fa-link","url":"friends/"},{"name":"关于","icon":"fas fa-info-circle","url":"about/"},{"name":"留言板","icon":"fas fa-comment-dots","url":"bbs/"},{"name":"实验室","icon":"fas fa-flask","rows":[{"name":"Pi","icon":"fab fa-raspberry-pi","url":"https://pi.purel.in"},{"name":"Cloud","icon":"fab fa-cloudversify","url":"https://cloud.purel.in/"}]}]}},"excerpt":"","more":"<p>Hi there.<br>欢迎给我留言～</p>\n"},{"layout":"list","group":"mylist","index":true,"cover":true,"_content":"","source":"mylist/index.md","raw":"---\nlayout: list\ngroup: mylist\nindex: true\ncover: true\n---","date":"2022-03-20T13:03:22.690Z","updated":"2022-03-20T13:03:22.690Z","path":"mylist/index.html","title":"","comments":1,"_id":"cl0zfpkcm000gloc6h8xehkow","content":"","site":{"data":{"menu":[{"name":"文章","icon":"fas fa-newspaper","rows":[{"name":"分类","icon":"fas fa-folder-open","url":"categories/"},{"name":"标签","icon":"fas fa-tags","url":"tags/"},{"name":"归档","icon":"fas fa-archive","url":"archives/"}]},{"name":"邻星","icon":"fas fa-link","url":"friends/"},{"name":"关于","icon":"fas fa-info-circle","url":"about/"},{"name":"留言板","icon":"fas fa-comment-dots","url":"bbs/"},{"name":"实验室","icon":"fas fa-flask","rows":[{"name":"Pi","icon":"fab fa-raspberry-pi","url":"https://pi.purel.in"},{"name":"Cloud","icon":"fab fa-cloudversify","url":"https://cloud.purel.in/"}]}]}},"excerpt":"","more":""},{"layout":"links","title":"我的朋友们","links":[{"group":"示例展示","icon":"fas fa-user-tie","desc":"这里是作为示例展示的分组","items":[{"name":"Purel.in","avatar":"/images/waterboy.JPG","url":"https://purel.in","backgroundColor":"#3E74C9","textColor":"#fff","tags":["学习","体验","树莓派"],"desc":"徐老师的小型云计算数据中心"}]},{"group":"邻家星球","icon":"fas fa-user-tie","desc":"下面是朋友们的博客，你可以试着随缘访问","items":[{"name":null,"avatar":null,"url":null,"backgroundColor":"#3E74C9","textColor":"#fff","tags":["标签1","标签2"],"desc":"描述文字"}]}],"_content":"\n欢迎和我做朋友，\n如果想交换博客链接，\n请先在自己的博客做好本站链接，\n然后在本页面按照以下格式留言申请。\n\n<!-- more -->\n### 友情链接申请格式\n```\n名称：你的博客名\n头像链接：https://example.com/demo/avatar.jpg\n博客地址：https://example.com\n标签：标签/标签2 # 如：咨询/极客/C++/Python\n```\n### 我的友情链接格式\n```\n名称: Purel.in\n头像链接: https://purel.in/images/waterboy.JPG\n博客地址: https://purel.in\n标签: 学习/体验/树莓派\n```\n如果你做好了本站链接，请按照以上格式在下方评论区留言，十分感谢！","source":"friends/index.md","raw":"---\nlayout: links     # 必须\ntitle: 我的朋友们   # 可选，这是友链页的标题\nlinks:\n  - group: 示例展示\n    icon: fas fa-user-tie\n    desc: 这里是作为示例展示的分组\n    items:\n    - name: Purel.in    # 博客名\n      avatar: /images/waterboy.JPG  # 头像链接\n      url: https://purel.in     # 博客链接\n      backgroundColor: '#3E74C9' # 卡片背景颜色\n      textColor: '#fff'  # 卡片文字颜色\n      tags: [学习, 体验, 树莓派]    # 标签\n      desc: 徐老师的小型云计算数据中心\n  - group: 邻家星球\n    icon: fas fa-user-tie\n    desc: 下面是朋友们的博客，你可以试着随缘访问\n    items:\n    - name:     # 博客名\n      avatar:   # 头像链接\n      url:      # 博客链接\n      backgroundColor: '#3E74C9' # 卡片背景颜色\n      textColor: '#fff'  # 卡片文字颜色\n      tags: [标签1, 标签2]    # 标签\n      desc: 描述文字\n---\n\n欢迎和我做朋友，\n如果想交换博客链接，\n请先在自己的博客做好本站链接，\n然后在本页面按照以下格式留言申请。\n\n<!-- more -->\n### 友情链接申请格式\n```\n名称：你的博客名\n头像链接：https://example.com/demo/avatar.jpg\n博客地址：https://example.com\n标签：标签/标签2 # 如：咨询/极客/C++/Python\n```\n### 我的友情链接格式\n```\n名称: Purel.in\n头像链接: https://purel.in/images/waterboy.JPG\n博客地址: https://purel.in\n标签: 学习/体验/树莓派\n```\n如果你做好了本站链接，请按照以上格式在下方评论区留言，十分感谢！","date":"2022-03-20T13:03:22.546Z","updated":"2022-03-20T13:03:22.546Z","path":"friends/index.html","comments":1,"_id":"cl0zfpkco000lloc680m8ffj5","content":"<p>欢迎和我做朋友，<br>如果想交换博客链接，<br>请先在自己的博客做好本站链接，<br>然后在本页面按照以下格式留言申请。</p>\n<span id=\"more\"></span>\n<h3 id=\"友情链接申请格式\"><a href=\"#友情链接申请格式\" class=\"headerlink\" title=\"友情链接申请格式\"></a>友情链接申请格式</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">名称：你的博客名</span><br><span class=\"line\">头像链接：https://example.com/demo/avatar.jpg</span><br><span class=\"line\">博客地址：https://example.com</span><br><span class=\"line\">标签：标签/标签2 # 如：咨询/极客/C++/Python</span><br></pre></td></tr></table></figure>\n<h3 id=\"我的友情链接格式\"><a href=\"#我的友情链接格式\" class=\"headerlink\" title=\"我的友情链接格式\"></a>我的友情链接格式</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">名称: Purel.in</span><br><span class=\"line\">头像链接: https://purel.in/images/waterboy.JPG</span><br><span class=\"line\">博客地址: https://purel.in</span><br><span class=\"line\">标签: 学习/体验/树莓派</span><br></pre></td></tr></table></figure>\n<p>如果你做好了本站链接，请按照以上格式在下方评论区留言，十分感谢！</p>\n","site":{"data":{"menu":[{"name":"文章","icon":"fas fa-newspaper","rows":[{"name":"分类","icon":"fas fa-folder-open","url":"categories/"},{"name":"标签","icon":"fas fa-tags","url":"tags/"},{"name":"归档","icon":"fas fa-archive","url":"archives/"}]},{"name":"邻星","icon":"fas fa-link","url":"friends/"},{"name":"关于","icon":"fas fa-info-circle","url":"about/"},{"name":"留言板","icon":"fas fa-comment-dots","url":"bbs/"},{"name":"实验室","icon":"fas fa-flask","rows":[{"name":"Pi","icon":"fab fa-raspberry-pi","url":"https://pi.purel.in"},{"name":"Cloud","icon":"fab fa-cloudversify","url":"https://cloud.purel.in/"}]}]}},"excerpt":"<p>欢迎和我做朋友，<br>如果想交换博客链接，<br>请先在自己的博客做好本站链接，<br>然后在本页面按照以下格式留言申请。</p>","more":"<h3 id=\"友情链接申请格式\"><a href=\"#友情链接申请格式\" class=\"headerlink\" title=\"友情链接申请格式\"></a>友情链接申请格式</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">名称：你的博客名</span><br><span class=\"line\">头像链接：https://example.com/demo/avatar.jpg</span><br><span class=\"line\">博客地址：https://example.com</span><br><span class=\"line\">标签：标签/标签2 # 如：咨询/极客/C++/Python</span><br></pre></td></tr></table></figure>\n<h3 id=\"我的友情链接格式\"><a href=\"#我的友情链接格式\" class=\"headerlink\" title=\"我的友情链接格式\"></a>我的友情链接格式</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">名称: Purel.in</span><br><span class=\"line\">头像链接: https://purel.in/images/waterboy.JPG</span><br><span class=\"line\">博客地址: https://purel.in</span><br><span class=\"line\">标签: 学习/体验/树莓派</span><br></pre></td></tr></table></figure>\n<p>如果你做好了本站链接，请按照以上格式在下方评论区留言，十分感谢！</p>"},{"layout":"tag","index":true,"cover":true,"title":"所有标签","_content":"","source":"tags/index.md","raw":"---\nlayout: tag\nindex: true\ncover: true\ntitle: 所有标签\n---","date":"2022-03-20T13:03:22.692Z","updated":"2022-03-20T13:03:22.692Z","path":"tags/index.html","comments":1,"_id":"cl0zfpkcp000oloc6aswwbo7r","content":"","site":{"data":{"menu":[{"name":"文章","icon":"fas fa-newspaper","rows":[{"name":"分类","icon":"fas fa-folder-open","url":"categories/"},{"name":"标签","icon":"fas fa-tags","url":"tags/"},{"name":"归档","icon":"fas fa-archive","url":"archives/"}]},{"name":"邻星","icon":"fas fa-link","url":"friends/"},{"name":"关于","icon":"fas fa-info-circle","url":"about/"},{"name":"留言板","icon":"fas fa-comment-dots","url":"bbs/"},{"name":"实验室","icon":"fas fa-flask","rows":[{"name":"Pi","icon":"fab fa-raspberry-pi","url":"https://pi.purel.in"},{"name":"Cloud","icon":"fab fa-cloudversify","url":"https://cloud.purel.in/"}]}]}},"excerpt":"","more":""}],"Post":[{"title":"又见面了，为什么是Purel.in？","type":"post","date":"2020-02-11T06:03:44.000Z","_content":"![](/images/2020/02/Apple-iMac.jpg)\n这一切都源于一个纯粹的念头逐渐清晰，这次我抓住了它，并没有让它和往常的同伴一样在我脑海一闪而过。\n<!-- more -->\n### Hello World\n没想到会以这样的方式开始我的2020年，不是指武汉肺炎nCoV，而是又一篇Hello World透过我的指尖发布在了互联网上。为什么要说“又”呢？经过漫长的回忆，距离我发布的上一篇博客大概已经时隔十几年之久了，那个时候人们正在学习如何从Blog断舍离到140字的twitter/微博，生怕赶不上时代的潮流被迭代掉，就像每年更新换代的电子设备一般。\n\n当下，正直nCoV新冠状病毒肺炎肆虐的时期，每个人都在家进行自我隔离。我想，如果一个人长期与世隔绝，可能大脑回路相对平时会更加活跃吧，至少你读到这篇文章时，我已经在这台Macbook前面连续奋斗了几个夜日。\n\n这一切都源于一个纯粹的念头逐渐清晰，这次我抓住了它，并没有让它和往常的同伴一样在我脑海一闪而过。\n\n“Touch the world. ”生活仍在推着我们往前走，然而这个念头的悄然浮现既像是对生存的本能渴望，也像是一种完全顺其自然地涌现。\n\n### Touch The World\n在水中自由自在的鱼并不知道水的存在。\n\n这个世界上最有趣的事情莫过于「建立连接」了，我就像一只怀着「多目的性」意图的鱼，希望在这个特殊时期可以刚好完成这件事情，即摆脱对各种互联网平台的高度依赖——建立一个真正的网站。\n\n在功能上它应该主要分担我工作的在线部分，如果能够使我的灵思泉涌有一个安放处就最好不过了。（你正在阅读的这篇文章正是结果的一部分，说明我已经比较满意的实现了后面的小心思。）\n### 取一个名字\n正如每一个网站的开始，选择一个合适的域名一定是所有网站主最头疼的环节了，我好像比较幸运，在关键字、简短和好记方面找到一款心仪的域名，那就是Purel.in。让我们来看看为什么是它。\n\nPure的含义是“纯粹”，包括了正见、无分别、百分百感受。紧跟的字母L则代表不同的意图如Life、Link、Learn、Love…>这个组合代表每一个都意图的背后都是那份纯粹觉察。“.in”的后缀意味着每个人的内在都有一个埋藏着无限潜能的宝藏。\n\n>真正重要的东西，用眼睛是看不到的，要用心去感受。\n——《小王子》\n\n其实如果我们将取名字这件事聚焦在自己的真实意图上，那么接下来的一切都会变得十分轻松，十几年的老东家Godaddy依然没让人失望。然而没想到的是，花费我最多时间的是为Purel.in部署一个合适的环境。\n### 安家\n在经过GoogleCP、亚马逊EC2/LightSail、Vultr和DigitalOcean各种横竖对比后，最终选择将实例开设在了DigitalOcean的旧金山数据中心。到目前为止，我对这台实例的稳定性和访问速度都比较满意，与机器沟通需要脱离我们日常交流的语境，去适应多种奇奇怪怪的计算机语言环境。事实就是这样，通过好的沟通去理解彼此真实意图永远是建立良好合作的前提，无论你对面的家伙能不能喘气。\n\n从搭建LNMP环境到安装Wordpress，一切都是自然发生的完全没有经过大脑，似乎在直觉中它就该是这样驱动的，甚至不需要我去思考。前几日我的朋友讲到微博的140字限制，这让人在发布内容前会仔细思考每一个字的价值，我十分认同这个观点，因为Less is more。可是让思维自由散漫的向四周无限延伸的感觉并非140字可以承载，它的生命轨迹需要由自己决定。或许这仅仅是我的小Ego，但是我必须尊重它，如此才能体验到纯粹、正见与合一的智慧，哪怕仅仅是一个瞥见。\n### 新的开始\n文章敲到这里，一旁的手机快要被各种视频会议、讨论和微信留言撕碎，越是这样，这片纯粹的净土就越显得尤为珍贵。\n\n>应无所住，而生其心。\n——《金刚经》\n\n有个声音一直都在提醒自己，众生是怎么迷的？妄想、分别、执念。还有很多工作等待我去完成，至于接下来会发生什么，那应该是被记录在下一篇文章的内容里，自然而然发生的了。\n\n*PS. 如果你好奇我是如何从Wordpress转到目前的Hexo方案的，你可以搜索关键词Hexo来获得相关文章。*","source":"_posts/2020-02-11-meet-again-why-is-purel-in.md","raw":"---\ntitle: 又见面了，为什么是Purel.in？\ntype: post\ndate: 2020-02-11T14:03:44+00:00\ncategories: [网站]\ntags: [Purel.in,Wordpress]\n---\n![](/images/2020/02/Apple-iMac.jpg)\n这一切都源于一个纯粹的念头逐渐清晰，这次我抓住了它，并没有让它和往常的同伴一样在我脑海一闪而过。\n<!-- more -->\n### Hello World\n没想到会以这样的方式开始我的2020年，不是指武汉肺炎nCoV，而是又一篇Hello World透过我的指尖发布在了互联网上。为什么要说“又”呢？经过漫长的回忆，距离我发布的上一篇博客大概已经时隔十几年之久了，那个时候人们正在学习如何从Blog断舍离到140字的twitter/微博，生怕赶不上时代的潮流被迭代掉，就像每年更新换代的电子设备一般。\n\n当下，正直nCoV新冠状病毒肺炎肆虐的时期，每个人都在家进行自我隔离。我想，如果一个人长期与世隔绝，可能大脑回路相对平时会更加活跃吧，至少你读到这篇文章时，我已经在这台Macbook前面连续奋斗了几个夜日。\n\n这一切都源于一个纯粹的念头逐渐清晰，这次我抓住了它，并没有让它和往常的同伴一样在我脑海一闪而过。\n\n“Touch the world. ”生活仍在推着我们往前走，然而这个念头的悄然浮现既像是对生存的本能渴望，也像是一种完全顺其自然地涌现。\n\n### Touch The World\n在水中自由自在的鱼并不知道水的存在。\n\n这个世界上最有趣的事情莫过于「建立连接」了，我就像一只怀着「多目的性」意图的鱼，希望在这个特殊时期可以刚好完成这件事情，即摆脱对各种互联网平台的高度依赖——建立一个真正的网站。\n\n在功能上它应该主要分担我工作的在线部分，如果能够使我的灵思泉涌有一个安放处就最好不过了。（你正在阅读的这篇文章正是结果的一部分，说明我已经比较满意的实现了后面的小心思。）\n### 取一个名字\n正如每一个网站的开始，选择一个合适的域名一定是所有网站主最头疼的环节了，我好像比较幸运，在关键字、简短和好记方面找到一款心仪的域名，那就是Purel.in。让我们来看看为什么是它。\n\nPure的含义是“纯粹”，包括了正见、无分别、百分百感受。紧跟的字母L则代表不同的意图如Life、Link、Learn、Love…>这个组合代表每一个都意图的背后都是那份纯粹觉察。“.in”的后缀意味着每个人的内在都有一个埋藏着无限潜能的宝藏。\n\n>真正重要的东西，用眼睛是看不到的，要用心去感受。\n——《小王子》\n\n其实如果我们将取名字这件事聚焦在自己的真实意图上，那么接下来的一切都会变得十分轻松，十几年的老东家Godaddy依然没让人失望。然而没想到的是，花费我最多时间的是为Purel.in部署一个合适的环境。\n### 安家\n在经过GoogleCP、亚马逊EC2/LightSail、Vultr和DigitalOcean各种横竖对比后，最终选择将实例开设在了DigitalOcean的旧金山数据中心。到目前为止，我对这台实例的稳定性和访问速度都比较满意，与机器沟通需要脱离我们日常交流的语境，去适应多种奇奇怪怪的计算机语言环境。事实就是这样，通过好的沟通去理解彼此真实意图永远是建立良好合作的前提，无论你对面的家伙能不能喘气。\n\n从搭建LNMP环境到安装Wordpress，一切都是自然发生的完全没有经过大脑，似乎在直觉中它就该是这样驱动的，甚至不需要我去思考。前几日我的朋友讲到微博的140字限制，这让人在发布内容前会仔细思考每一个字的价值，我十分认同这个观点，因为Less is more。可是让思维自由散漫的向四周无限延伸的感觉并非140字可以承载，它的生命轨迹需要由自己决定。或许这仅仅是我的小Ego，但是我必须尊重它，如此才能体验到纯粹、正见与合一的智慧，哪怕仅仅是一个瞥见。\n### 新的开始\n文章敲到这里，一旁的手机快要被各种视频会议、讨论和微信留言撕碎，越是这样，这片纯粹的净土就越显得尤为珍贵。\n\n>应无所住，而生其心。\n——《金刚经》\n\n有个声音一直都在提醒自己，众生是怎么迷的？妄想、分别、执念。还有很多工作等待我去完成，至于接下来会发生什么，那应该是被记录在下一篇文章的内容里，自然而然发生的了。\n\n*PS. 如果你好奇我是如何从Wordpress转到目前的Hexo方案的，你可以搜索关键词Hexo来获得相关文章。*","slug":"meet-again-why-is-purel-in","published":1,"updated":"2020-02-11T06:03:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zfpkc70001loc6387l8nnz","content":"<p><img src=\"/images/2020/02/Apple-iMac.jpg\" alt=\"\"><br>这一切都源于一个纯粹的念头逐渐清晰，这次我抓住了它，并没有让它和往常的同伴一样在我脑海一闪而过。</p>\n<span id=\"more\"></span>\n<h3 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h3><p>没想到会以这样的方式开始我的2020年，不是指武汉肺炎nCoV，而是又一篇Hello World透过我的指尖发布在了互联网上。为什么要说“又”呢？经过漫长的回忆，距离我发布的上一篇博客大概已经时隔十几年之久了，那个时候人们正在学习如何从Blog断舍离到140字的twitter/微博，生怕赶不上时代的潮流被迭代掉，就像每年更新换代的电子设备一般。</p>\n<p>当下，正直nCoV新冠状病毒肺炎肆虐的时期，每个人都在家进行自我隔离。我想，如果一个人长期与世隔绝，可能大脑回路相对平时会更加活跃吧，至少你读到这篇文章时，我已经在这台Macbook前面连续奋斗了几个夜日。</p>\n<p>这一切都源于一个纯粹的念头逐渐清晰，这次我抓住了它，并没有让它和往常的同伴一样在我脑海一闪而过。</p>\n<p>“Touch the world. ”生活仍在推着我们往前走，然而这个念头的悄然浮现既像是对生存的本能渴望，也像是一种完全顺其自然地涌现。</p>\n<h3 id=\"Touch-The-World\"><a href=\"#Touch-The-World\" class=\"headerlink\" title=\"Touch The World\"></a>Touch The World</h3><p>在水中自由自在的鱼并不知道水的存在。</p>\n<p>这个世界上最有趣的事情莫过于「建立连接」了，我就像一只怀着「多目的性」意图的鱼，希望在这个特殊时期可以刚好完成这件事情，即摆脱对各种互联网平台的高度依赖——建立一个真正的网站。</p>\n<p>在功能上它应该主要分担我工作的在线部分，如果能够使我的灵思泉涌有一个安放处就最好不过了。（你正在阅读的这篇文章正是结果的一部分，说明我已经比较满意的实现了后面的小心思。）</p>\n<h3 id=\"取一个名字\"><a href=\"#取一个名字\" class=\"headerlink\" title=\"取一个名字\"></a>取一个名字</h3><p>正如每一个网站的开始，选择一个合适的域名一定是所有网站主最头疼的环节了，我好像比较幸运，在关键字、简短和好记方面找到一款心仪的域名，那就是Purel.in。让我们来看看为什么是它。</p>\n<p>Pure的含义是“纯粹”，包括了正见、无分别、百分百感受。紧跟的字母L则代表不同的意图如Life、Link、Learn、Love…&gt;这个组合代表每一个都意图的背后都是那份纯粹觉察。“.in”的后缀意味着每个人的内在都有一个埋藏着无限潜能的宝藏。</p>\n<blockquote>\n<p>真正重要的东西，用眼睛是看不到的，要用心去感受。<br>——《小王子》</p>\n</blockquote>\n<p>其实如果我们将取名字这件事聚焦在自己的真实意图上，那么接下来的一切都会变得十分轻松，十几年的老东家Godaddy依然没让人失望。然而没想到的是，花费我最多时间的是为Purel.in部署一个合适的环境。</p>\n<h3 id=\"安家\"><a href=\"#安家\" class=\"headerlink\" title=\"安家\"></a>安家</h3><p>在经过GoogleCP、亚马逊EC2/LightSail、Vultr和DigitalOcean各种横竖对比后，最终选择将实例开设在了DigitalOcean的旧金山数据中心。到目前为止，我对这台实例的稳定性和访问速度都比较满意，与机器沟通需要脱离我们日常交流的语境，去适应多种奇奇怪怪的计算机语言环境。事实就是这样，通过好的沟通去理解彼此真实意图永远是建立良好合作的前提，无论你对面的家伙能不能喘气。</p>\n<p>从搭建LNMP环境到安装Wordpress，一切都是自然发生的完全没有经过大脑，似乎在直觉中它就该是这样驱动的，甚至不需要我去思考。前几日我的朋友讲到微博的140字限制，这让人在发布内容前会仔细思考每一个字的价值，我十分认同这个观点，因为Less is more。可是让思维自由散漫的向四周无限延伸的感觉并非140字可以承载，它的生命轨迹需要由自己决定。或许这仅仅是我的小Ego，但是我必须尊重它，如此才能体验到纯粹、正见与合一的智慧，哪怕仅仅是一个瞥见。</p>\n<h3 id=\"新的开始\"><a href=\"#新的开始\" class=\"headerlink\" title=\"新的开始\"></a>新的开始</h3><p>文章敲到这里，一旁的手机快要被各种视频会议、讨论和微信留言撕碎，越是这样，这片纯粹的净土就越显得尤为珍贵。</p>\n<blockquote>\n<p>应无所住，而生其心。<br>——《金刚经》</p>\n</blockquote>\n<p>有个声音一直都在提醒自己，众生是怎么迷的？妄想、分别、执念。还有很多工作等待我去完成，至于接下来会发生什么，那应该是被记录在下一篇文章的内容里，自然而然发生的了。</p>\n<p><em>PS. 如果你好奇我是如何从Wordpress转到目前的Hexo方案的，你可以搜索关键词Hexo来获得相关文章。</em></p>\n","site":{"data":{"menu":[{"name":"文章","icon":"fas fa-newspaper","rows":[{"name":"分类","icon":"fas fa-folder-open","url":"categories/"},{"name":"标签","icon":"fas fa-tags","url":"tags/"},{"name":"归档","icon":"fas fa-archive","url":"archives/"}]},{"name":"邻星","icon":"fas fa-link","url":"friends/"},{"name":"关于","icon":"fas fa-info-circle","url":"about/"},{"name":"留言板","icon":"fas fa-comment-dots","url":"bbs/"},{"name":"实验室","icon":"fas fa-flask","rows":[{"name":"Pi","icon":"fab fa-raspberry-pi","url":"https://pi.purel.in"},{"name":"Cloud","icon":"fab fa-cloudversify","url":"https://cloud.purel.in/"}]}]}},"excerpt":"<p><img src=\"/images/2020/02/Apple-iMac.jpg\" alt=\"\"><br>这一切都源于一个纯粹的念头逐渐清晰，这次我抓住了它，并没有让它和往常的同伴一样在我脑海一闪而过。</p>","more":"<h3 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h3><p>没想到会以这样的方式开始我的2020年，不是指武汉肺炎nCoV，而是又一篇Hello World透过我的指尖发布在了互联网上。为什么要说“又”呢？经过漫长的回忆，距离我发布的上一篇博客大概已经时隔十几年之久了，那个时候人们正在学习如何从Blog断舍离到140字的twitter/微博，生怕赶不上时代的潮流被迭代掉，就像每年更新换代的电子设备一般。</p>\n<p>当下，正直nCoV新冠状病毒肺炎肆虐的时期，每个人都在家进行自我隔离。我想，如果一个人长期与世隔绝，可能大脑回路相对平时会更加活跃吧，至少你读到这篇文章时，我已经在这台Macbook前面连续奋斗了几个夜日。</p>\n<p>这一切都源于一个纯粹的念头逐渐清晰，这次我抓住了它，并没有让它和往常的同伴一样在我脑海一闪而过。</p>\n<p>“Touch the world. ”生活仍在推着我们往前走，然而这个念头的悄然浮现既像是对生存的本能渴望，也像是一种完全顺其自然地涌现。</p>\n<h3 id=\"Touch-The-World\"><a href=\"#Touch-The-World\" class=\"headerlink\" title=\"Touch The World\"></a>Touch The World</h3><p>在水中自由自在的鱼并不知道水的存在。</p>\n<p>这个世界上最有趣的事情莫过于「建立连接」了，我就像一只怀着「多目的性」意图的鱼，希望在这个特殊时期可以刚好完成这件事情，即摆脱对各种互联网平台的高度依赖——建立一个真正的网站。</p>\n<p>在功能上它应该主要分担我工作的在线部分，如果能够使我的灵思泉涌有一个安放处就最好不过了。（你正在阅读的这篇文章正是结果的一部分，说明我已经比较满意的实现了后面的小心思。）</p>\n<h3 id=\"取一个名字\"><a href=\"#取一个名字\" class=\"headerlink\" title=\"取一个名字\"></a>取一个名字</h3><p>正如每一个网站的开始，选择一个合适的域名一定是所有网站主最头疼的环节了，我好像比较幸运，在关键字、简短和好记方面找到一款心仪的域名，那就是Purel.in。让我们来看看为什么是它。</p>\n<p>Pure的含义是“纯粹”，包括了正见、无分别、百分百感受。紧跟的字母L则代表不同的意图如Life、Link、Learn、Love…&gt;这个组合代表每一个都意图的背后都是那份纯粹觉察。“.in”的后缀意味着每个人的内在都有一个埋藏着无限潜能的宝藏。</p>\n<blockquote>\n<p>真正重要的东西，用眼睛是看不到的，要用心去感受。<br>——《小王子》</p>\n</blockquote>\n<p>其实如果我们将取名字这件事聚焦在自己的真实意图上，那么接下来的一切都会变得十分轻松，十几年的老东家Godaddy依然没让人失望。然而没想到的是，花费我最多时间的是为Purel.in部署一个合适的环境。</p>\n<h3 id=\"安家\"><a href=\"#安家\" class=\"headerlink\" title=\"安家\"></a>安家</h3><p>在经过GoogleCP、亚马逊EC2/LightSail、Vultr和DigitalOcean各种横竖对比后，最终选择将实例开设在了DigitalOcean的旧金山数据中心。到目前为止，我对这台实例的稳定性和访问速度都比较满意，与机器沟通需要脱离我们日常交流的语境，去适应多种奇奇怪怪的计算机语言环境。事实就是这样，通过好的沟通去理解彼此真实意图永远是建立良好合作的前提，无论你对面的家伙能不能喘气。</p>\n<p>从搭建LNMP环境到安装Wordpress，一切都是自然发生的完全没有经过大脑，似乎在直觉中它就该是这样驱动的，甚至不需要我去思考。前几日我的朋友讲到微博的140字限制，这让人在发布内容前会仔细思考每一个字的价值，我十分认同这个观点，因为Less is more。可是让思维自由散漫的向四周无限延伸的感觉并非140字可以承载，它的生命轨迹需要由自己决定。或许这仅仅是我的小Ego，但是我必须尊重它，如此才能体验到纯粹、正见与合一的智慧，哪怕仅仅是一个瞥见。</p>\n<h3 id=\"新的开始\"><a href=\"#新的开始\" class=\"headerlink\" title=\"新的开始\"></a>新的开始</h3><p>文章敲到这里，一旁的手机快要被各种视频会议、讨论和微信留言撕碎，越是这样，这片纯粹的净土就越显得尤为珍贵。</p>\n<blockquote>\n<p>应无所住，而生其心。<br>——《金刚经》</p>\n</blockquote>\n<p>有个声音一直都在提醒自己，众生是怎么迷的？妄想、分别、执念。还有很多工作等待我去完成，至于接下来会发生什么，那应该是被记录在下一篇文章的内容里，自然而然发生的了。</p>\n<p><em>PS. 如果你好奇我是如何从Wordpress转到目前的Hexo方案的，你可以搜索关键词Hexo来获得相关文章。</em></p>"},{"title":"从旧金山到新加坡，最终我们抵达首尔","type":"post","date":"2020-02-15T08:30:21.000Z","_content":"![](/images/2020/02/seoul.jpg)\n这几日的Purel.in就像是一个旅行家，穿梭于各大洲的数据中心。\n<!--more-->\n### 速度是关键\n最初它是准备安放在旧金山DigitalOcean数据中心进行托管的，结果Do的速度实在不能令人满意，从大陆访问过去丢包率竟然高达40%，无奈之下只好搬家。\n\n在经过多方对比后，选择了业内知名的服务商亚马逊，以及它开在AWS的新加坡数据中心。作为一个亚洲机房，从大陆访问过去的速度明显加快了不少，并且连接非常的稳定不丢包。不成想，在一顿常规的操作后，我还是发现了一个致命的问题，导致最终AWS新加坡只是Purel.in旅途中的一个驿站。\n\n在对AWS的服务器进行一系列操作后，它的IOPS读写限制会降低到非常离谱的地步，这就像是开车从北京的三环堵到五环。毫不夸张的讲，有时只是单单打开一个动态页面，也能造成CPU负载100%进而网站失去响应，在那之前我只是在服务器后台做了一些常规操作而已。各种调试无果之后就把它放在那里干脆不管了，结果十几分钟后它竟然自己恢复正常，经过研究我发现了AWS用的是IOPS积分制，意味着一段时间内你的读写操作不能太频繁，否则就因扣分而被限制，这对于目前运营的动态网站来说是简直是致命的。怎么办，只有继续寻找合适的服务商，可是还有比亚马逊更棒的吗？\n### 吸引力法则\n大概是吸引力法则起了作用，就在我一筹莫展的时候，通过Telegram的讨论组了解到甲骨文的Oracle Cloud，于是几经辗转，终于来到韩国首尔的甲骨文数据中心。它的连接速度简直可以用美妙来形容，比起亚马逊在新加坡的机房还要棒的多。你大可读完这篇文章后在Purel.in里随便逛一逛，相信你一定能体验到它惊人的速度，这甚至超越了国内大部分的服务商。在服务器的负载方面至今未发现CPU超负荷现象，这让我终于松了一口气，因为这意味着环境部署亦告一段落，接下来就是网站平台的功能设计与优化了。\n### Next？\n这应该是下一篇文章的内容了，尽管今天已经实现了完成在线课程后，会生成一张你专属的PDF证书来提供下载和打印，并且解决了它在服务器导出PDF时的中文乱码问题。\n\n说到这里，我还真的很期待Purel.in未来的样子，想到更多的人会因此而受益，就会满心欢喜。或许这也算是一种妄念吧...（笑～）","source":"_posts/2020-02-15-from-san-francisco-to-singapore-we-finally-arrived-in-seoul.md","raw":"---\ntitle: 从旧金山到新加坡，最终我们抵达首尔\ntype: post\ndate: 2020-02-15T16:30:21+00:00\ncategories: [网站]\ntags: [Purel.in,服务器,数据中心,Wordpress]\n---\n![](/images/2020/02/seoul.jpg)\n这几日的Purel.in就像是一个旅行家，穿梭于各大洲的数据中心。\n<!--more-->\n### 速度是关键\n最初它是准备安放在旧金山DigitalOcean数据中心进行托管的，结果Do的速度实在不能令人满意，从大陆访问过去丢包率竟然高达40%，无奈之下只好搬家。\n\n在经过多方对比后，选择了业内知名的服务商亚马逊，以及它开在AWS的新加坡数据中心。作为一个亚洲机房，从大陆访问过去的速度明显加快了不少，并且连接非常的稳定不丢包。不成想，在一顿常规的操作后，我还是发现了一个致命的问题，导致最终AWS新加坡只是Purel.in旅途中的一个驿站。\n\n在对AWS的服务器进行一系列操作后，它的IOPS读写限制会降低到非常离谱的地步，这就像是开车从北京的三环堵到五环。毫不夸张的讲，有时只是单单打开一个动态页面，也能造成CPU负载100%进而网站失去响应，在那之前我只是在服务器后台做了一些常规操作而已。各种调试无果之后就把它放在那里干脆不管了，结果十几分钟后它竟然自己恢复正常，经过研究我发现了AWS用的是IOPS积分制，意味着一段时间内你的读写操作不能太频繁，否则就因扣分而被限制，这对于目前运营的动态网站来说是简直是致命的。怎么办，只有继续寻找合适的服务商，可是还有比亚马逊更棒的吗？\n### 吸引力法则\n大概是吸引力法则起了作用，就在我一筹莫展的时候，通过Telegram的讨论组了解到甲骨文的Oracle Cloud，于是几经辗转，终于来到韩国首尔的甲骨文数据中心。它的连接速度简直可以用美妙来形容，比起亚马逊在新加坡的机房还要棒的多。你大可读完这篇文章后在Purel.in里随便逛一逛，相信你一定能体验到它惊人的速度，这甚至超越了国内大部分的服务商。在服务器的负载方面至今未发现CPU超负荷现象，这让我终于松了一口气，因为这意味着环境部署亦告一段落，接下来就是网站平台的功能设计与优化了。\n### Next？\n这应该是下一篇文章的内容了，尽管今天已经实现了完成在线课程后，会生成一张你专属的PDF证书来提供下载和打印，并且解决了它在服务器导出PDF时的中文乱码问题。\n\n说到这里，我还真的很期待Purel.in未来的样子，想到更多的人会因此而受益，就会满心欢喜。或许这也算是一种妄念吧...（笑～）","slug":"from-san-francisco-to-singapore-we-finally-arrived-in-seoul","published":1,"updated":"2020-02-15T08:30:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zfpkcb0003loc69gahexcd","content":"<p><img src=\"/images/2020/02/seoul.jpg\" alt=\"\"><br>这几日的Purel.in就像是一个旅行家，穿梭于各大洲的数据中心。</p>\n<span id=\"more\"></span>\n<h3 id=\"速度是关键\"><a href=\"#速度是关键\" class=\"headerlink\" title=\"速度是关键\"></a>速度是关键</h3><p>最初它是准备安放在旧金山DigitalOcean数据中心进行托管的，结果Do的速度实在不能令人满意，从大陆访问过去丢包率竟然高达40%，无奈之下只好搬家。</p>\n<p>在经过多方对比后，选择了业内知名的服务商亚马逊，以及它开在AWS的新加坡数据中心。作为一个亚洲机房，从大陆访问过去的速度明显加快了不少，并且连接非常的稳定不丢包。不成想，在一顿常规的操作后，我还是发现了一个致命的问题，导致最终AWS新加坡只是Purel.in旅途中的一个驿站。</p>\n<p>在对AWS的服务器进行一系列操作后，它的IOPS读写限制会降低到非常离谱的地步，这就像是开车从北京的三环堵到五环。毫不夸张的讲，有时只是单单打开一个动态页面，也能造成CPU负载100%进而网站失去响应，在那之前我只是在服务器后台做了一些常规操作而已。各种调试无果之后就把它放在那里干脆不管了，结果十几分钟后它竟然自己恢复正常，经过研究我发现了AWS用的是IOPS积分制，意味着一段时间内你的读写操作不能太频繁，否则就因扣分而被限制，这对于目前运营的动态网站来说是简直是致命的。怎么办，只有继续寻找合适的服务商，可是还有比亚马逊更棒的吗？</p>\n<h3 id=\"吸引力法则\"><a href=\"#吸引力法则\" class=\"headerlink\" title=\"吸引力法则\"></a>吸引力法则</h3><p>大概是吸引力法则起了作用，就在我一筹莫展的时候，通过Telegram的讨论组了解到甲骨文的Oracle Cloud，于是几经辗转，终于来到韩国首尔的甲骨文数据中心。它的连接速度简直可以用美妙来形容，比起亚马逊在新加坡的机房还要棒的多。你大可读完这篇文章后在Purel.in里随便逛一逛，相信你一定能体验到它惊人的速度，这甚至超越了国内大部分的服务商。在服务器的负载方面至今未发现CPU超负荷现象，这让我终于松了一口气，因为这意味着环境部署亦告一段落，接下来就是网站平台的功能设计与优化了。</p>\n<h3 id=\"Next？\"><a href=\"#Next？\" class=\"headerlink\" title=\"Next？\"></a>Next？</h3><p>这应该是下一篇文章的内容了，尽管今天已经实现了完成在线课程后，会生成一张你专属的PDF证书来提供下载和打印，并且解决了它在服务器导出PDF时的中文乱码问题。</p>\n<p>说到这里，我还真的很期待Purel.in未来的样子，想到更多的人会因此而受益，就会满心欢喜。或许这也算是一种妄念吧…（笑～）</p>\n","site":{"data":{"menu":[{"name":"文章","icon":"fas fa-newspaper","rows":[{"name":"分类","icon":"fas fa-folder-open","url":"categories/"},{"name":"标签","icon":"fas fa-tags","url":"tags/"},{"name":"归档","icon":"fas fa-archive","url":"archives/"}]},{"name":"邻星","icon":"fas fa-link","url":"friends/"},{"name":"关于","icon":"fas fa-info-circle","url":"about/"},{"name":"留言板","icon":"fas fa-comment-dots","url":"bbs/"},{"name":"实验室","icon":"fas fa-flask","rows":[{"name":"Pi","icon":"fab fa-raspberry-pi","url":"https://pi.purel.in"},{"name":"Cloud","icon":"fab fa-cloudversify","url":"https://cloud.purel.in/"}]}]}},"excerpt":"<p><img src=\"/images/2020/02/seoul.jpg\" alt=\"\"><br>这几日的Purel.in就像是一个旅行家，穿梭于各大洲的数据中心。</p>","more":"<h3 id=\"速度是关键\"><a href=\"#速度是关键\" class=\"headerlink\" title=\"速度是关键\"></a>速度是关键</h3><p>最初它是准备安放在旧金山DigitalOcean数据中心进行托管的，结果Do的速度实在不能令人满意，从大陆访问过去丢包率竟然高达40%，无奈之下只好搬家。</p>\n<p>在经过多方对比后，选择了业内知名的服务商亚马逊，以及它开在AWS的新加坡数据中心。作为一个亚洲机房，从大陆访问过去的速度明显加快了不少，并且连接非常的稳定不丢包。不成想，在一顿常规的操作后，我还是发现了一个致命的问题，导致最终AWS新加坡只是Purel.in旅途中的一个驿站。</p>\n<p>在对AWS的服务器进行一系列操作后，它的IOPS读写限制会降低到非常离谱的地步，这就像是开车从北京的三环堵到五环。毫不夸张的讲，有时只是单单打开一个动态页面，也能造成CPU负载100%进而网站失去响应，在那之前我只是在服务器后台做了一些常规操作而已。各种调试无果之后就把它放在那里干脆不管了，结果十几分钟后它竟然自己恢复正常，经过研究我发现了AWS用的是IOPS积分制，意味着一段时间内你的读写操作不能太频繁，否则就因扣分而被限制，这对于目前运营的动态网站来说是简直是致命的。怎么办，只有继续寻找合适的服务商，可是还有比亚马逊更棒的吗？</p>\n<h3 id=\"吸引力法则\"><a href=\"#吸引力法则\" class=\"headerlink\" title=\"吸引力法则\"></a>吸引力法则</h3><p>大概是吸引力法则起了作用，就在我一筹莫展的时候，通过Telegram的讨论组了解到甲骨文的Oracle Cloud，于是几经辗转，终于来到韩国首尔的甲骨文数据中心。它的连接速度简直可以用美妙来形容，比起亚马逊在新加坡的机房还要棒的多。你大可读完这篇文章后在Purel.in里随便逛一逛，相信你一定能体验到它惊人的速度，这甚至超越了国内大部分的服务商。在服务器的负载方面至今未发现CPU超负荷现象，这让我终于松了一口气，因为这意味着环境部署亦告一段落，接下来就是网站平台的功能设计与优化了。</p>\n<h3 id=\"Next？\"><a href=\"#Next？\" class=\"headerlink\" title=\"Next？\"></a>Next？</h3><p>这应该是下一篇文章的内容了，尽管今天已经实现了完成在线课程后，会生成一张你专属的PDF证书来提供下载和打印，并且解决了它在服务器导出PDF时的中文乱码问题。</p>\n<p>说到这里，我还真的很期待Purel.in未来的样子，想到更多的人会因此而受益，就会满心欢喜。或许这也算是一种妄念吧…（笑～）</p>"},{"title":"卓越领导者的七项修炼","type":"post","date":"2020-03-04T05:11:15.000Z","_content":"![](/images/2020/03/psychedelic-treatments-consciousness-disorder-news-oct-2019.jpg)\n>越是在特殊时期，那些人性中的优点和缺点就越是容易被放大。\n有些人焦虑和混乱，另一些人则更清晰自己。\n——Jacob Xu\n<!--more-->\n\n这就像是一把双刃剑，有些人会陷入混乱、焦虑和担忧，无论是对工作还是对家庭，然而另一些人却够透过特殊时期更清晰的了解自己。就在去年，职场中的人们还在讨论如何应对VUCA时代「不确定、易变、模糊和复杂」带来的挑战，然而今年伊始，突如其来的新冠疫情就让我们切实体验到了来自新时代的挑战，这对每一位领导者自身的能力和智慧都是一场重要的考验。\n\n众所周知，那些我们平时不愿拿出来分享的内容具有特别的价值，这就像是每个人生命中的宝石，你不会轻易拿出来与人分享，你会小心翼翼的将宝石藏在保险柜里。但是你知道，宝石的光芒不应该就这样被遮蔽，它在识货的人们手里闪闪发光充满着价值。而那些内部越少杂质的宝石它本身的价值也就越高，七项修炼为你提供去除内在杂质的方法，让你的人生从此闪闪发光。\n\n这七项修炼分别是**「真诚、正念、交换、更新、分享、即兴、行动」**，我会对我的这篇文章不定期更新，欢迎你随时回来加入讨论，和我一起交流你的看法，或者单纯的分享给你认为对他有帮助的人。\n\n### 1.真诚\n你心中的焦虑不安正被特殊时期外部环境带来的刺激无限放大，你在消除自身的焦虑之前不能帮助别人，你必须先说服自己，作为一个卓越的领导者，你完全有能力通过提升自身的觉察力来管理情绪能量，并且通过对能量的管理去激发身边的人，帮助人们在特殊时期做到最好的能量转换。\n\n非常奇怪的是，在Covid-19肆虐全球的特殊时期，我们被各种教你如何面对疫情的课程轰炸，不乏一些机构似乎出于好心甚至打着公益的名义，帮助人们获得特殊时期生存的能力，这不禁让人联想过去由人类造成的无数个大大小小的灾难，特别是在战争年代，我想那些无数的特殊时期中不会有人教你该怎么生存，这是所有生物与生俱来的基础本能。这和我们后面要提到的分享并非一回事，因为它们要实现的意图完全不同，一种是利己，一种是利他。所以请不要败坏公益这个词，请以纯粹的方式开展你的商业行为。\n\n真诚是作为一个领导者最重要的品格，它是获得信任的基础。这个世界最美妙的事情就是与他人建立连接，然而一个好的连接的基础就是信任。实际上我们从各种教训中学习如何对他人真诚，但很少去觉察如何对自己真诚。一个对他人真诚却对自己撒谎的人，无法进入领导者最佳状态去解锁内在的智慧。所以一个卓越的领袖首先要学会的就是“不对真我撒谎”，这有助于管理我们的能量不被两个自我的内耗而浪费，一个合一的自我能够产生强大的能量并影响周围的环境。\n\n### 2.正念\n正念即正向的念头，我们生活在无意识中，它管理着人们90%的行为。你的能量会追随自己的念头进而产生一系列的行为，所以念头就是能量。如果你追随一个负面的念头，那么你会产生负能量。如果你追随一个正向的念头，那么你会产生正能量。关键是你正被自己的头脑领导着，而没有学习如何控制自己的头脑。\n\n这个世界不乏聪明的人，但是缺少真正具有大智慧的人，因为我们的念头总是无时无刻在控制着我们。换句话说，我们认为的自己知识自己的头脑，这是一种非常狭隘的自我认知。头脑就像我们的手、脚、嘴巴…是帮助我们在这个世界中更好的生存下去的工具，没有人会认为我的手就是我本身，但我们却一直默许自己的头脑就是自我本身，这很奇怪。这些奇奇怪怪的认知所产生的念头绝非正念，所以每一个领导者要学习的关键一课就是如何控制自己的的头脑，让它产生更大的效能，而不是给自己造成各种各样由偏见和狭隘产生的内耗。\n\n在商业或职场中的正念更容易被理解，尽管离我想表达的纯粹正念有点距离。这有点像在头脑中安装了一个杀毒软件，通过觉察来随时监控那些糟糕的、阻碍你达成更高绩效的念头。一旦发现它们在头脑中产生，就运行一键删除程序。\n\n>不忘初心，方得始终。\n——《华严经》\n\n虽然人们每天会产生各种各样的行为，大部分是在无意识状态下做出的反应，一些著作中也管这些无意识叫做习惯，必须承认的是有些习惯能帮助你成功，有些则会送你去地狱。我们必须通过提升觉察去接管这些无意识行为，理解这些行为背后的正向意图，这将使我们的注意力围绕真实意图产生正向且积极的能量，这也是管理人生中预期结果的关键因素。\n\n### 3.交换\n十年前的游戏没有教程只有攻略，而在那个时候你需要付费才能阅读这些内容，现如今无论是游戏还是培训，全部以免费的形式开展，而当你发现自己真的想要从中获得些什么，自己要付出的比想象的更多，这个世界永远符合能量守恒原则。\n\n我身边有很多很多朋友想要健身、想要身材变得迷人，但是没有人真正的付出努力，他们大多数认为只要花钱办张健身卡或者请最好的健身教练就能够达成目标，而最终退费的理由又总是惊人的一致。如果你做不到真诚，即不对自己的真我撒谎，那么你就无法学会和这个世界做最好的交换。所有伟大的商人都是这方面的专家，而这或许是阻止你获得更大财富的瓶颈。\n\n武志红在他的**「巨婴国」**一书中提出“巨婴”的概念，很多人尽管实际年龄很大，但内在却像一个永远长不大的巨婴，处处需要被人迁就和包容。如果环境不能满足自己的要求，那么巨婴就会用自己的方式爆发。这种一味索取的处事方式从根本限制了这群人能力的发展。\n\n懂得交换意味着真正的成熟，它使我们的人生在各个方面更加平衡。请尽早激活你内在的商人，去和这个世界做最好的交换。\n\n### 4.更新\n人们在自己认知范围内做出最好的选择，因为我们无法感知到自己认知范围之外的事物。人和人之间的差距总是在被彼此不同的认知边界拉开，而这些档口在于你如何利用自己的闲暇时光。平时不读书的借口总是我没有时间，你会发现这部分人即便在特殊时期有了大把的时间也不会读书。他们知道读书很重要，但是并不紧急，因为明天之后还有明天，当下总有更重要的事情。\n\n这里就涉及到“时间”这个概念，爱因斯坦在他的广义相对论中只提出了时空的概念而非时间，他认为时间和空间是捆绑在一起的，但是我们为了生活和商业活动的便利创造了时间的概念。想要理解时间就必须知道什么是重要的，那些真正对你有价值的事情就是重要的事情，它会占满你的全部时间，并令你沉浸其中，在这个过程中人们会完全忘记时间的存在。\n\n其实这个时期正是人生中最难得的休闲时光，你有大把大把的整块时间可以用来学习和成长。但在那之前，你必须意识到通过学习和阅读不断更新自己的价值所在。\n\n我的一个朋友说疫情改变了人们的学习方式，中小学开始利用互联网在线教学，家长们可以在家辅导孩子学习。我说No，疫情并没有改变人们的学习方式，而是改变了人们的教育方式。自从人类有了互联网和搜索引擎，我们最有效的学习方式就是Google我想要的答案。“学习”是一个主动的行为，它从来都是主动发生，没有被学习一说，但是你可以被教育。\n\n我的鱼缸中养了很多的观赏虾，它们每过一段时间就会脱壳，这意味着它们在不断的成长，理论上如果一只虾客户无限的脱壳，那么意味着它可以永生。然而我总是能从鱼缸中发现一些死去的虾，它们的死因只有一个，那就是由于身体虚弱而无法从壳中脱离，被自己的壳活活憋死。我们中国人有很多类似的成语用来形容这些行为，比如作茧自缚、破茧成蝶、涅槃重生等…动物界有很多相关的行为值得我们借鉴，在蝴蝶翱翔天空之前必须要经历痛苦的蜕变过程，而这个过程正是自我更新。\n\n所有的涅槃都需要打破过去旧的思维模式，这意味着拥抱崭新的未来，成为真正的自己。我们所有的痛苦都来自于无法成为真实的自己。人们或许会说你变了很多，事实上你只是变得更像自己。\n\n### 5.分享\n>世界上所有不快乐的人，都因为他们只想自己获得快乐。\n——寂天法师\n\n这关于Oneness合一，或者叫它一体性，当你认为自己是独立于这个世界的单独个体，那么就相当于拥抱痛苦的根源，佛教普遍认为“我”的概念是痛苦的根源，它让人们产生分别心，由此造成的分别、分离、区别会让人十分痛苦。然而随着互联网的兴起人们发现彼此之间的距离越来越近了，似乎一定程度上消除了人与人之间的距离和隔阂，人们不再那么重视你的打扮、容貌、着装，因为在互联网中这些都是完全不重要的信息，如果你问正和你聊天的一个网友穿着什么牌子的衣服，对方一定会认为你有毛病。\n\n>在互联网上，没人知道你是一条狗\nOn the Internet, nobody knows you're a dog.\n——1993.7.5《纽约客》彼得·施泰纳\n\n随着全球人类意识层级的不断提升，人们会逐渐接纳并理解全球一体化、合一、一即一切这样的概念。如果一个人认为世界是一面镜子，自己看到的一切都和自己没有任何的分别与不同，那么根本不需要你教他如何去尊重以及如何去爱。\n\n6.即兴\nYes, and…不是简单的口诀，而是由内而外的接纳、允许和包容。接纳一切的存在、允许一切的存在、包容一切的存在。\n\n从神经语言科学的角度来说，如果某些外在的事物令你痛苦，一定是你的内在滤镜出了问题。情绪就是能量，正向的能量可以帮助你，负面的能量可以摧毁你。情绪一直是影响人们产生绩效的最大阻碍，你一定听说过这样的话“不要在情绪中做任何决定”。情绪也会令你无法从容面对生活中各种各样的挑战，比如登台演讲之前的紧张，面对疫情时对于未来的焦虑和担忧。如果拿走这些情绪，那么一个人完全可以活出即兴的智慧。从好的一面看，我们可以在特殊时期去处理这些有问题的滤镜，让自己的内在更加健康。\n\n一个温文尔雅的人也会被一些不经意的琐事触发情绪而暴跳如雷，一个处在负面情绪中的人会完全被情绪掌控。每一个情绪的背后都有一个早年关于自我价值的故事，这些故事不断的积攒在我们的记忆中，就像埋下的地雷，爆炸不知道在什么时候会被触发。这些听上去很恐怖，但相信我，没有人希望自己真实的经历这些情绪。\n\n过去的故事造成执念，对未来的期待产生欲望，这些令我们无法活在当下。一个人若背负着沉重的负担去生活或工作，这会非常辛苦。尽管很痛苦，但是痛苦能够带来成长和改变，如果你不能像蝴蝶一样蜕壳就不能展翅翱翔。\n\n即兴是一种脱离头脑和逻辑的智慧。当你的头脑想要说不的时候，请先试着接纳，这也是一种不再将你和世界分开的智慧，可以理解为一种合一的觉知，Oneness。\n\n### 7.行动\n>Just do it.\n——NIKE\n\n「知行合一」是由王阳明提出的哲学，很多人会讲知行合一很重要，但是其实将知行合一的人也未必可以做到。如果你相信进化论你会知道，人类通过几百万年的进化终于有了头脑——一台超级生物计算机，但我们却不能够百分百的开发和使用它，因为从出生起也从来没有一个说明书教你如何驾驭自己的头脑。不幸的是我们总是被头脑使唤，很多时候我们陷入逻辑思考无法自拔。一个又一个思绪浮现在脑海中挥之不去，有些关于过去而有些是关于不确定的未来。这些让我们无法活在当下，然而我们确认为头脑和思绪就是我们本身。\n\n>世界上最遥远的距离就是从知道到做到的距离。\n——佚名\n\n在这个世界上没有人仅仅通过读一本教人如何骑车的书来学会骑自行车的，Just do it，或许没有什么比直接体验带来的成长更直接。当然，一旦开始行动，就代表你已经具备了足够的勇气，以应对可能发生的各种结果。\n\n在行为层面产生的结果意味着从想象到现实的转变，可以确定那些能够做到的人百分之百在自己头脑中掌握了相关的要领，如果仍然做不到意味着大脑会启动主动学习来修复那些阻碍我们达成结果的盲区。\n\n### 8.结语\n>成为领袖之前你要专注“自我实现的个人成长”，\n成为领袖之后你要专注“超越自我的利他爱人”。\n——杰克·韦尔奇\n\n这个过程并没有你想象中那么难，幸运的是我开发了相关的课程来帮助你完成这些修炼，它会使你的人生从此充满丰盛、乐趣和智慧。","source":"_posts/2020-03-04-seven-practices-of-great-leaders.md","raw":"---\ntitle: 卓越领导者的七项修炼\ntype: post\ndate: 2020-03-04T13:11:15+00:00\ncategories: [学习]\ntags: [领导力,Leadership,修炼,合一,疫情,学习]\n---\n![](/images/2020/03/psychedelic-treatments-consciousness-disorder-news-oct-2019.jpg)\n>越是在特殊时期，那些人性中的优点和缺点就越是容易被放大。\n有些人焦虑和混乱，另一些人则更清晰自己。\n——Jacob Xu\n<!--more-->\n\n这就像是一把双刃剑，有些人会陷入混乱、焦虑和担忧，无论是对工作还是对家庭，然而另一些人却够透过特殊时期更清晰的了解自己。就在去年，职场中的人们还在讨论如何应对VUCA时代「不确定、易变、模糊和复杂」带来的挑战，然而今年伊始，突如其来的新冠疫情就让我们切实体验到了来自新时代的挑战，这对每一位领导者自身的能力和智慧都是一场重要的考验。\n\n众所周知，那些我们平时不愿拿出来分享的内容具有特别的价值，这就像是每个人生命中的宝石，你不会轻易拿出来与人分享，你会小心翼翼的将宝石藏在保险柜里。但是你知道，宝石的光芒不应该就这样被遮蔽，它在识货的人们手里闪闪发光充满着价值。而那些内部越少杂质的宝石它本身的价值也就越高，七项修炼为你提供去除内在杂质的方法，让你的人生从此闪闪发光。\n\n这七项修炼分别是**「真诚、正念、交换、更新、分享、即兴、行动」**，我会对我的这篇文章不定期更新，欢迎你随时回来加入讨论，和我一起交流你的看法，或者单纯的分享给你认为对他有帮助的人。\n\n### 1.真诚\n你心中的焦虑不安正被特殊时期外部环境带来的刺激无限放大，你在消除自身的焦虑之前不能帮助别人，你必须先说服自己，作为一个卓越的领导者，你完全有能力通过提升自身的觉察力来管理情绪能量，并且通过对能量的管理去激发身边的人，帮助人们在特殊时期做到最好的能量转换。\n\n非常奇怪的是，在Covid-19肆虐全球的特殊时期，我们被各种教你如何面对疫情的课程轰炸，不乏一些机构似乎出于好心甚至打着公益的名义，帮助人们获得特殊时期生存的能力，这不禁让人联想过去由人类造成的无数个大大小小的灾难，特别是在战争年代，我想那些无数的特殊时期中不会有人教你该怎么生存，这是所有生物与生俱来的基础本能。这和我们后面要提到的分享并非一回事，因为它们要实现的意图完全不同，一种是利己，一种是利他。所以请不要败坏公益这个词，请以纯粹的方式开展你的商业行为。\n\n真诚是作为一个领导者最重要的品格，它是获得信任的基础。这个世界最美妙的事情就是与他人建立连接，然而一个好的连接的基础就是信任。实际上我们从各种教训中学习如何对他人真诚，但很少去觉察如何对自己真诚。一个对他人真诚却对自己撒谎的人，无法进入领导者最佳状态去解锁内在的智慧。所以一个卓越的领袖首先要学会的就是“不对真我撒谎”，这有助于管理我们的能量不被两个自我的内耗而浪费，一个合一的自我能够产生强大的能量并影响周围的环境。\n\n### 2.正念\n正念即正向的念头，我们生活在无意识中，它管理着人们90%的行为。你的能量会追随自己的念头进而产生一系列的行为，所以念头就是能量。如果你追随一个负面的念头，那么你会产生负能量。如果你追随一个正向的念头，那么你会产生正能量。关键是你正被自己的头脑领导着，而没有学习如何控制自己的头脑。\n\n这个世界不乏聪明的人，但是缺少真正具有大智慧的人，因为我们的念头总是无时无刻在控制着我们。换句话说，我们认为的自己知识自己的头脑，这是一种非常狭隘的自我认知。头脑就像我们的手、脚、嘴巴…是帮助我们在这个世界中更好的生存下去的工具，没有人会认为我的手就是我本身，但我们却一直默许自己的头脑就是自我本身，这很奇怪。这些奇奇怪怪的认知所产生的念头绝非正念，所以每一个领导者要学习的关键一课就是如何控制自己的的头脑，让它产生更大的效能，而不是给自己造成各种各样由偏见和狭隘产生的内耗。\n\n在商业或职场中的正念更容易被理解，尽管离我想表达的纯粹正念有点距离。这有点像在头脑中安装了一个杀毒软件，通过觉察来随时监控那些糟糕的、阻碍你达成更高绩效的念头。一旦发现它们在头脑中产生，就运行一键删除程序。\n\n>不忘初心，方得始终。\n——《华严经》\n\n虽然人们每天会产生各种各样的行为，大部分是在无意识状态下做出的反应，一些著作中也管这些无意识叫做习惯，必须承认的是有些习惯能帮助你成功，有些则会送你去地狱。我们必须通过提升觉察去接管这些无意识行为，理解这些行为背后的正向意图，这将使我们的注意力围绕真实意图产生正向且积极的能量，这也是管理人生中预期结果的关键因素。\n\n### 3.交换\n十年前的游戏没有教程只有攻略，而在那个时候你需要付费才能阅读这些内容，现如今无论是游戏还是培训，全部以免费的形式开展，而当你发现自己真的想要从中获得些什么，自己要付出的比想象的更多，这个世界永远符合能量守恒原则。\n\n我身边有很多很多朋友想要健身、想要身材变得迷人，但是没有人真正的付出努力，他们大多数认为只要花钱办张健身卡或者请最好的健身教练就能够达成目标，而最终退费的理由又总是惊人的一致。如果你做不到真诚，即不对自己的真我撒谎，那么你就无法学会和这个世界做最好的交换。所有伟大的商人都是这方面的专家，而这或许是阻止你获得更大财富的瓶颈。\n\n武志红在他的**「巨婴国」**一书中提出“巨婴”的概念，很多人尽管实际年龄很大，但内在却像一个永远长不大的巨婴，处处需要被人迁就和包容。如果环境不能满足自己的要求，那么巨婴就会用自己的方式爆发。这种一味索取的处事方式从根本限制了这群人能力的发展。\n\n懂得交换意味着真正的成熟，它使我们的人生在各个方面更加平衡。请尽早激活你内在的商人，去和这个世界做最好的交换。\n\n### 4.更新\n人们在自己认知范围内做出最好的选择，因为我们无法感知到自己认知范围之外的事物。人和人之间的差距总是在被彼此不同的认知边界拉开，而这些档口在于你如何利用自己的闲暇时光。平时不读书的借口总是我没有时间，你会发现这部分人即便在特殊时期有了大把的时间也不会读书。他们知道读书很重要，但是并不紧急，因为明天之后还有明天，当下总有更重要的事情。\n\n这里就涉及到“时间”这个概念，爱因斯坦在他的广义相对论中只提出了时空的概念而非时间，他认为时间和空间是捆绑在一起的，但是我们为了生活和商业活动的便利创造了时间的概念。想要理解时间就必须知道什么是重要的，那些真正对你有价值的事情就是重要的事情，它会占满你的全部时间，并令你沉浸其中，在这个过程中人们会完全忘记时间的存在。\n\n其实这个时期正是人生中最难得的休闲时光，你有大把大把的整块时间可以用来学习和成长。但在那之前，你必须意识到通过学习和阅读不断更新自己的价值所在。\n\n我的一个朋友说疫情改变了人们的学习方式，中小学开始利用互联网在线教学，家长们可以在家辅导孩子学习。我说No，疫情并没有改变人们的学习方式，而是改变了人们的教育方式。自从人类有了互联网和搜索引擎，我们最有效的学习方式就是Google我想要的答案。“学习”是一个主动的行为，它从来都是主动发生，没有被学习一说，但是你可以被教育。\n\n我的鱼缸中养了很多的观赏虾，它们每过一段时间就会脱壳，这意味着它们在不断的成长，理论上如果一只虾客户无限的脱壳，那么意味着它可以永生。然而我总是能从鱼缸中发现一些死去的虾，它们的死因只有一个，那就是由于身体虚弱而无法从壳中脱离，被自己的壳活活憋死。我们中国人有很多类似的成语用来形容这些行为，比如作茧自缚、破茧成蝶、涅槃重生等…动物界有很多相关的行为值得我们借鉴，在蝴蝶翱翔天空之前必须要经历痛苦的蜕变过程，而这个过程正是自我更新。\n\n所有的涅槃都需要打破过去旧的思维模式，这意味着拥抱崭新的未来，成为真正的自己。我们所有的痛苦都来自于无法成为真实的自己。人们或许会说你变了很多，事实上你只是变得更像自己。\n\n### 5.分享\n>世界上所有不快乐的人，都因为他们只想自己获得快乐。\n——寂天法师\n\n这关于Oneness合一，或者叫它一体性，当你认为自己是独立于这个世界的单独个体，那么就相当于拥抱痛苦的根源，佛教普遍认为“我”的概念是痛苦的根源，它让人们产生分别心，由此造成的分别、分离、区别会让人十分痛苦。然而随着互联网的兴起人们发现彼此之间的距离越来越近了，似乎一定程度上消除了人与人之间的距离和隔阂，人们不再那么重视你的打扮、容貌、着装，因为在互联网中这些都是完全不重要的信息，如果你问正和你聊天的一个网友穿着什么牌子的衣服，对方一定会认为你有毛病。\n\n>在互联网上，没人知道你是一条狗\nOn the Internet, nobody knows you're a dog.\n——1993.7.5《纽约客》彼得·施泰纳\n\n随着全球人类意识层级的不断提升，人们会逐渐接纳并理解全球一体化、合一、一即一切这样的概念。如果一个人认为世界是一面镜子，自己看到的一切都和自己没有任何的分别与不同，那么根本不需要你教他如何去尊重以及如何去爱。\n\n6.即兴\nYes, and…不是简单的口诀，而是由内而外的接纳、允许和包容。接纳一切的存在、允许一切的存在、包容一切的存在。\n\n从神经语言科学的角度来说，如果某些外在的事物令你痛苦，一定是你的内在滤镜出了问题。情绪就是能量，正向的能量可以帮助你，负面的能量可以摧毁你。情绪一直是影响人们产生绩效的最大阻碍，你一定听说过这样的话“不要在情绪中做任何决定”。情绪也会令你无法从容面对生活中各种各样的挑战，比如登台演讲之前的紧张，面对疫情时对于未来的焦虑和担忧。如果拿走这些情绪，那么一个人完全可以活出即兴的智慧。从好的一面看，我们可以在特殊时期去处理这些有问题的滤镜，让自己的内在更加健康。\n\n一个温文尔雅的人也会被一些不经意的琐事触发情绪而暴跳如雷，一个处在负面情绪中的人会完全被情绪掌控。每一个情绪的背后都有一个早年关于自我价值的故事，这些故事不断的积攒在我们的记忆中，就像埋下的地雷，爆炸不知道在什么时候会被触发。这些听上去很恐怖，但相信我，没有人希望自己真实的经历这些情绪。\n\n过去的故事造成执念，对未来的期待产生欲望，这些令我们无法活在当下。一个人若背负着沉重的负担去生活或工作，这会非常辛苦。尽管很痛苦，但是痛苦能够带来成长和改变，如果你不能像蝴蝶一样蜕壳就不能展翅翱翔。\n\n即兴是一种脱离头脑和逻辑的智慧。当你的头脑想要说不的时候，请先试着接纳，这也是一种不再将你和世界分开的智慧，可以理解为一种合一的觉知，Oneness。\n\n### 7.行动\n>Just do it.\n——NIKE\n\n「知行合一」是由王阳明提出的哲学，很多人会讲知行合一很重要，但是其实将知行合一的人也未必可以做到。如果你相信进化论你会知道，人类通过几百万年的进化终于有了头脑——一台超级生物计算机，但我们却不能够百分百的开发和使用它，因为从出生起也从来没有一个说明书教你如何驾驭自己的头脑。不幸的是我们总是被头脑使唤，很多时候我们陷入逻辑思考无法自拔。一个又一个思绪浮现在脑海中挥之不去，有些关于过去而有些是关于不确定的未来。这些让我们无法活在当下，然而我们确认为头脑和思绪就是我们本身。\n\n>世界上最遥远的距离就是从知道到做到的距离。\n——佚名\n\n在这个世界上没有人仅仅通过读一本教人如何骑车的书来学会骑自行车的，Just do it，或许没有什么比直接体验带来的成长更直接。当然，一旦开始行动，就代表你已经具备了足够的勇气，以应对可能发生的各种结果。\n\n在行为层面产生的结果意味着从想象到现实的转变，可以确定那些能够做到的人百分之百在自己头脑中掌握了相关的要领，如果仍然做不到意味着大脑会启动主动学习来修复那些阻碍我们达成结果的盲区。\n\n### 8.结语\n>成为领袖之前你要专注“自我实现的个人成长”，\n成为领袖之后你要专注“超越自我的利他爱人”。\n——杰克·韦尔奇\n\n这个过程并没有你想象中那么难，幸运的是我开发了相关的课程来帮助你完成这些修炼，它会使你的人生从此充满丰盛、乐趣和智慧。","slug":"seven-practices-of-great-leaders","published":1,"updated":"2020-03-04T05:11:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zfpkcg0007loc6ba7gdrfd","content":"<p><img src=\"/images/2020/03/psychedelic-treatments-consciousness-disorder-news-oct-2019.jpg\" alt=\"\"></p>\n<blockquote>\n<p>越是在特殊时期，那些人性中的优点和缺点就越是容易被放大。<br>有些人焦虑和混乱，另一些人则更清晰自己。<br>——Jacob Xu</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p>这就像是一把双刃剑，有些人会陷入混乱、焦虑和担忧，无论是对工作还是对家庭，然而另一些人却够透过特殊时期更清晰的了解自己。就在去年，职场中的人们还在讨论如何应对VUCA时代「不确定、易变、模糊和复杂」带来的挑战，然而今年伊始，突如其来的新冠疫情就让我们切实体验到了来自新时代的挑战，这对每一位领导者自身的能力和智慧都是一场重要的考验。</p>\n<p>众所周知，那些我们平时不愿拿出来分享的内容具有特别的价值，这就像是每个人生命中的宝石，你不会轻易拿出来与人分享，你会小心翼翼的将宝石藏在保险柜里。但是你知道，宝石的光芒不应该就这样被遮蔽，它在识货的人们手里闪闪发光充满着价值。而那些内部越少杂质的宝石它本身的价值也就越高，七项修炼为你提供去除内在杂质的方法，让你的人生从此闪闪发光。</p>\n<p>这七项修炼分别是<strong>「真诚、正念、交换、更新、分享、即兴、行动」</strong>，我会对我的这篇文章不定期更新，欢迎你随时回来加入讨论，和我一起交流你的看法，或者单纯的分享给你认为对他有帮助的人。</p>\n<h3 id=\"1-真诚\"><a href=\"#1-真诚\" class=\"headerlink\" title=\"1.真诚\"></a>1.真诚</h3><p>你心中的焦虑不安正被特殊时期外部环境带来的刺激无限放大，你在消除自身的焦虑之前不能帮助别人，你必须先说服自己，作为一个卓越的领导者，你完全有能力通过提升自身的觉察力来管理情绪能量，并且通过对能量的管理去激发身边的人，帮助人们在特殊时期做到最好的能量转换。</p>\n<p>非常奇怪的是，在Covid-19肆虐全球的特殊时期，我们被各种教你如何面对疫情的课程轰炸，不乏一些机构似乎出于好心甚至打着公益的名义，帮助人们获得特殊时期生存的能力，这不禁让人联想过去由人类造成的无数个大大小小的灾难，特别是在战争年代，我想那些无数的特殊时期中不会有人教你该怎么生存，这是所有生物与生俱来的基础本能。这和我们后面要提到的分享并非一回事，因为它们要实现的意图完全不同，一种是利己，一种是利他。所以请不要败坏公益这个词，请以纯粹的方式开展你的商业行为。</p>\n<p>真诚是作为一个领导者最重要的品格，它是获得信任的基础。这个世界最美妙的事情就是与他人建立连接，然而一个好的连接的基础就是信任。实际上我们从各种教训中学习如何对他人真诚，但很少去觉察如何对自己真诚。一个对他人真诚却对自己撒谎的人，无法进入领导者最佳状态去解锁内在的智慧。所以一个卓越的领袖首先要学会的就是“不对真我撒谎”，这有助于管理我们的能量不被两个自我的内耗而浪费，一个合一的自我能够产生强大的能量并影响周围的环境。</p>\n<h3 id=\"2-正念\"><a href=\"#2-正念\" class=\"headerlink\" title=\"2.正念\"></a>2.正念</h3><p>正念即正向的念头，我们生活在无意识中，它管理着人们90%的行为。你的能量会追随自己的念头进而产生一系列的行为，所以念头就是能量。如果你追随一个负面的念头，那么你会产生负能量。如果你追随一个正向的念头，那么你会产生正能量。关键是你正被自己的头脑领导着，而没有学习如何控制自己的头脑。</p>\n<p>这个世界不乏聪明的人，但是缺少真正具有大智慧的人，因为我们的念头总是无时无刻在控制着我们。换句话说，我们认为的自己知识自己的头脑，这是一种非常狭隘的自我认知。头脑就像我们的手、脚、嘴巴…是帮助我们在这个世界中更好的生存下去的工具，没有人会认为我的手就是我本身，但我们却一直默许自己的头脑就是自我本身，这很奇怪。这些奇奇怪怪的认知所产生的念头绝非正念，所以每一个领导者要学习的关键一课就是如何控制自己的的头脑，让它产生更大的效能，而不是给自己造成各种各样由偏见和狭隘产生的内耗。</p>\n<p>在商业或职场中的正念更容易被理解，尽管离我想表达的纯粹正念有点距离。这有点像在头脑中安装了一个杀毒软件，通过觉察来随时监控那些糟糕的、阻碍你达成更高绩效的念头。一旦发现它们在头脑中产生，就运行一键删除程序。</p>\n<blockquote>\n<p>不忘初心，方得始终。<br>——《华严经》</p>\n</blockquote>\n<p>虽然人们每天会产生各种各样的行为，大部分是在无意识状态下做出的反应，一些著作中也管这些无意识叫做习惯，必须承认的是有些习惯能帮助你成功，有些则会送你去地狱。我们必须通过提升觉察去接管这些无意识行为，理解这些行为背后的正向意图，这将使我们的注意力围绕真实意图产生正向且积极的能量，这也是管理人生中预期结果的关键因素。</p>\n<h3 id=\"3-交换\"><a href=\"#3-交换\" class=\"headerlink\" title=\"3.交换\"></a>3.交换</h3><p>十年前的游戏没有教程只有攻略，而在那个时候你需要付费才能阅读这些内容，现如今无论是游戏还是培训，全部以免费的形式开展，而当你发现自己真的想要从中获得些什么，自己要付出的比想象的更多，这个世界永远符合能量守恒原则。</p>\n<p>我身边有很多很多朋友想要健身、想要身材变得迷人，但是没有人真正的付出努力，他们大多数认为只要花钱办张健身卡或者请最好的健身教练就能够达成目标，而最终退费的理由又总是惊人的一致。如果你做不到真诚，即不对自己的真我撒谎，那么你就无法学会和这个世界做最好的交换。所有伟大的商人都是这方面的专家，而这或许是阻止你获得更大财富的瓶颈。</p>\n<p>武志红在他的<strong>「巨婴国」</strong>一书中提出“巨婴”的概念，很多人尽管实际年龄很大，但内在却像一个永远长不大的巨婴，处处需要被人迁就和包容。如果环境不能满足自己的要求，那么巨婴就会用自己的方式爆发。这种一味索取的处事方式从根本限制了这群人能力的发展。</p>\n<p>懂得交换意味着真正的成熟，它使我们的人生在各个方面更加平衡。请尽早激活你内在的商人，去和这个世界做最好的交换。</p>\n<h3 id=\"4-更新\"><a href=\"#4-更新\" class=\"headerlink\" title=\"4.更新\"></a>4.更新</h3><p>人们在自己认知范围内做出最好的选择，因为我们无法感知到自己认知范围之外的事物。人和人之间的差距总是在被彼此不同的认知边界拉开，而这些档口在于你如何利用自己的闲暇时光。平时不读书的借口总是我没有时间，你会发现这部分人即便在特殊时期有了大把的时间也不会读书。他们知道读书很重要，但是并不紧急，因为明天之后还有明天，当下总有更重要的事情。</p>\n<p>这里就涉及到“时间”这个概念，爱因斯坦在他的广义相对论中只提出了时空的概念而非时间，他认为时间和空间是捆绑在一起的，但是我们为了生活和商业活动的便利创造了时间的概念。想要理解时间就必须知道什么是重要的，那些真正对你有价值的事情就是重要的事情，它会占满你的全部时间，并令你沉浸其中，在这个过程中人们会完全忘记时间的存在。</p>\n<p>其实这个时期正是人生中最难得的休闲时光，你有大把大把的整块时间可以用来学习和成长。但在那之前，你必须意识到通过学习和阅读不断更新自己的价值所在。</p>\n<p>我的一个朋友说疫情改变了人们的学习方式，中小学开始利用互联网在线教学，家长们可以在家辅导孩子学习。我说No，疫情并没有改变人们的学习方式，而是改变了人们的教育方式。自从人类有了互联网和搜索引擎，我们最有效的学习方式就是Google我想要的答案。“学习”是一个主动的行为，它从来都是主动发生，没有被学习一说，但是你可以被教育。</p>\n<p>我的鱼缸中养了很多的观赏虾，它们每过一段时间就会脱壳，这意味着它们在不断的成长，理论上如果一只虾客户无限的脱壳，那么意味着它可以永生。然而我总是能从鱼缸中发现一些死去的虾，它们的死因只有一个，那就是由于身体虚弱而无法从壳中脱离，被自己的壳活活憋死。我们中国人有很多类似的成语用来形容这些行为，比如作茧自缚、破茧成蝶、涅槃重生等…动物界有很多相关的行为值得我们借鉴，在蝴蝶翱翔天空之前必须要经历痛苦的蜕变过程，而这个过程正是自我更新。</p>\n<p>所有的涅槃都需要打破过去旧的思维模式，这意味着拥抱崭新的未来，成为真正的自己。我们所有的痛苦都来自于无法成为真实的自己。人们或许会说你变了很多，事实上你只是变得更像自己。</p>\n<h3 id=\"5-分享\"><a href=\"#5-分享\" class=\"headerlink\" title=\"5.分享\"></a>5.分享</h3><blockquote>\n<p>世界上所有不快乐的人，都因为他们只想自己获得快乐。<br>——寂天法师</p>\n</blockquote>\n<p>这关于Oneness合一，或者叫它一体性，当你认为自己是独立于这个世界的单独个体，那么就相当于拥抱痛苦的根源，佛教普遍认为“我”的概念是痛苦的根源，它让人们产生分别心，由此造成的分别、分离、区别会让人十分痛苦。然而随着互联网的兴起人们发现彼此之间的距离越来越近了，似乎一定程度上消除了人与人之间的距离和隔阂，人们不再那么重视你的打扮、容貌、着装，因为在互联网中这些都是完全不重要的信息，如果你问正和你聊天的一个网友穿着什么牌子的衣服，对方一定会认为你有毛病。</p>\n<blockquote>\n<p>在互联网上，没人知道你是一条狗<br>On the Internet, nobody knows you’re a dog.<br>——1993.7.5《纽约客》彼得·施泰纳</p>\n</blockquote>\n<p>随着全球人类意识层级的不断提升，人们会逐渐接纳并理解全球一体化、合一、一即一切这样的概念。如果一个人认为世界是一面镜子，自己看到的一切都和自己没有任何的分别与不同，那么根本不需要你教他如何去尊重以及如何去爱。</p>\n<p>6.即兴<br>Yes, and…不是简单的口诀，而是由内而外的接纳、允许和包容。接纳一切的存在、允许一切的存在、包容一切的存在。</p>\n<p>从神经语言科学的角度来说，如果某些外在的事物令你痛苦，一定是你的内在滤镜出了问题。情绪就是能量，正向的能量可以帮助你，负面的能量可以摧毁你。情绪一直是影响人们产生绩效的最大阻碍，你一定听说过这样的话“不要在情绪中做任何决定”。情绪也会令你无法从容面对生活中各种各样的挑战，比如登台演讲之前的紧张，面对疫情时对于未来的焦虑和担忧。如果拿走这些情绪，那么一个人完全可以活出即兴的智慧。从好的一面看，我们可以在特殊时期去处理这些有问题的滤镜，让自己的内在更加健康。</p>\n<p>一个温文尔雅的人也会被一些不经意的琐事触发情绪而暴跳如雷，一个处在负面情绪中的人会完全被情绪掌控。每一个情绪的背后都有一个早年关于自我价值的故事，这些故事不断的积攒在我们的记忆中，就像埋下的地雷，爆炸不知道在什么时候会被触发。这些听上去很恐怖，但相信我，没有人希望自己真实的经历这些情绪。</p>\n<p>过去的故事造成执念，对未来的期待产生欲望，这些令我们无法活在当下。一个人若背负着沉重的负担去生活或工作，这会非常辛苦。尽管很痛苦，但是痛苦能够带来成长和改变，如果你不能像蝴蝶一样蜕壳就不能展翅翱翔。</p>\n<p>即兴是一种脱离头脑和逻辑的智慧。当你的头脑想要说不的时候，请先试着接纳，这也是一种不再将你和世界分开的智慧，可以理解为一种合一的觉知，Oneness。</p>\n<h3 id=\"7-行动\"><a href=\"#7-行动\" class=\"headerlink\" title=\"7.行动\"></a>7.行动</h3><blockquote>\n<p>Just do it.<br>——NIKE</p>\n</blockquote>\n<p>「知行合一」是由王阳明提出的哲学，很多人会讲知行合一很重要，但是其实将知行合一的人也未必可以做到。如果你相信进化论你会知道，人类通过几百万年的进化终于有了头脑——一台超级生物计算机，但我们却不能够百分百的开发和使用它，因为从出生起也从来没有一个说明书教你如何驾驭自己的头脑。不幸的是我们总是被头脑使唤，很多时候我们陷入逻辑思考无法自拔。一个又一个思绪浮现在脑海中挥之不去，有些关于过去而有些是关于不确定的未来。这些让我们无法活在当下，然而我们确认为头脑和思绪就是我们本身。</p>\n<blockquote>\n<p>世界上最遥远的距离就是从知道到做到的距离。<br>——佚名</p>\n</blockquote>\n<p>在这个世界上没有人仅仅通过读一本教人如何骑车的书来学会骑自行车的，Just do it，或许没有什么比直接体验带来的成长更直接。当然，一旦开始行动，就代表你已经具备了足够的勇气，以应对可能发生的各种结果。</p>\n<p>在行为层面产生的结果意味着从想象到现实的转变，可以确定那些能够做到的人百分之百在自己头脑中掌握了相关的要领，如果仍然做不到意味着大脑会启动主动学习来修复那些阻碍我们达成结果的盲区。</p>\n<h3 id=\"8-结语\"><a href=\"#8-结语\" class=\"headerlink\" title=\"8.结语\"></a>8.结语</h3><blockquote>\n<p>成为领袖之前你要专注“自我实现的个人成长”，<br>成为领袖之后你要专注“超越自我的利他爱人”。<br>——杰克·韦尔奇</p>\n</blockquote>\n<p>这个过程并没有你想象中那么难，幸运的是我开发了相关的课程来帮助你完成这些修炼，它会使你的人生从此充满丰盛、乐趣和智慧。</p>\n","site":{"data":{"menu":[{"name":"文章","icon":"fas fa-newspaper","rows":[{"name":"分类","icon":"fas fa-folder-open","url":"categories/"},{"name":"标签","icon":"fas fa-tags","url":"tags/"},{"name":"归档","icon":"fas fa-archive","url":"archives/"}]},{"name":"邻星","icon":"fas fa-link","url":"friends/"},{"name":"关于","icon":"fas fa-info-circle","url":"about/"},{"name":"留言板","icon":"fas fa-comment-dots","url":"bbs/"},{"name":"实验室","icon":"fas fa-flask","rows":[{"name":"Pi","icon":"fab fa-raspberry-pi","url":"https://pi.purel.in"},{"name":"Cloud","icon":"fab fa-cloudversify","url":"https://cloud.purel.in/"}]}]}},"excerpt":"<p><img src=\"/images/2020/03/psychedelic-treatments-consciousness-disorder-news-oct-2019.jpg\" alt=\"\"></p>\n<blockquote>\n<p>越是在特殊时期，那些人性中的优点和缺点就越是容易被放大。<br>有些人焦虑和混乱，另一些人则更清晰自己。<br>——Jacob Xu</p>\n</blockquote>","more":"<p>这就像是一把双刃剑，有些人会陷入混乱、焦虑和担忧，无论是对工作还是对家庭，然而另一些人却够透过特殊时期更清晰的了解自己。就在去年，职场中的人们还在讨论如何应对VUCA时代「不确定、易变、模糊和复杂」带来的挑战，然而今年伊始，突如其来的新冠疫情就让我们切实体验到了来自新时代的挑战，这对每一位领导者自身的能力和智慧都是一场重要的考验。</p>\n<p>众所周知，那些我们平时不愿拿出来分享的内容具有特别的价值，这就像是每个人生命中的宝石，你不会轻易拿出来与人分享，你会小心翼翼的将宝石藏在保险柜里。但是你知道，宝石的光芒不应该就这样被遮蔽，它在识货的人们手里闪闪发光充满着价值。而那些内部越少杂质的宝石它本身的价值也就越高，七项修炼为你提供去除内在杂质的方法，让你的人生从此闪闪发光。</p>\n<p>这七项修炼分别是<strong>「真诚、正念、交换、更新、分享、即兴、行动」</strong>，我会对我的这篇文章不定期更新，欢迎你随时回来加入讨论，和我一起交流你的看法，或者单纯的分享给你认为对他有帮助的人。</p>\n<h3 id=\"1-真诚\"><a href=\"#1-真诚\" class=\"headerlink\" title=\"1.真诚\"></a>1.真诚</h3><p>你心中的焦虑不安正被特殊时期外部环境带来的刺激无限放大，你在消除自身的焦虑之前不能帮助别人，你必须先说服自己，作为一个卓越的领导者，你完全有能力通过提升自身的觉察力来管理情绪能量，并且通过对能量的管理去激发身边的人，帮助人们在特殊时期做到最好的能量转换。</p>\n<p>非常奇怪的是，在Covid-19肆虐全球的特殊时期，我们被各种教你如何面对疫情的课程轰炸，不乏一些机构似乎出于好心甚至打着公益的名义，帮助人们获得特殊时期生存的能力，这不禁让人联想过去由人类造成的无数个大大小小的灾难，特别是在战争年代，我想那些无数的特殊时期中不会有人教你该怎么生存，这是所有生物与生俱来的基础本能。这和我们后面要提到的分享并非一回事，因为它们要实现的意图完全不同，一种是利己，一种是利他。所以请不要败坏公益这个词，请以纯粹的方式开展你的商业行为。</p>\n<p>真诚是作为一个领导者最重要的品格，它是获得信任的基础。这个世界最美妙的事情就是与他人建立连接，然而一个好的连接的基础就是信任。实际上我们从各种教训中学习如何对他人真诚，但很少去觉察如何对自己真诚。一个对他人真诚却对自己撒谎的人，无法进入领导者最佳状态去解锁内在的智慧。所以一个卓越的领袖首先要学会的就是“不对真我撒谎”，这有助于管理我们的能量不被两个自我的内耗而浪费，一个合一的自我能够产生强大的能量并影响周围的环境。</p>\n<h3 id=\"2-正念\"><a href=\"#2-正念\" class=\"headerlink\" title=\"2.正念\"></a>2.正念</h3><p>正念即正向的念头，我们生活在无意识中，它管理着人们90%的行为。你的能量会追随自己的念头进而产生一系列的行为，所以念头就是能量。如果你追随一个负面的念头，那么你会产生负能量。如果你追随一个正向的念头，那么你会产生正能量。关键是你正被自己的头脑领导着，而没有学习如何控制自己的头脑。</p>\n<p>这个世界不乏聪明的人，但是缺少真正具有大智慧的人，因为我们的念头总是无时无刻在控制着我们。换句话说，我们认为的自己知识自己的头脑，这是一种非常狭隘的自我认知。头脑就像我们的手、脚、嘴巴…是帮助我们在这个世界中更好的生存下去的工具，没有人会认为我的手就是我本身，但我们却一直默许自己的头脑就是自我本身，这很奇怪。这些奇奇怪怪的认知所产生的念头绝非正念，所以每一个领导者要学习的关键一课就是如何控制自己的的头脑，让它产生更大的效能，而不是给自己造成各种各样由偏见和狭隘产生的内耗。</p>\n<p>在商业或职场中的正念更容易被理解，尽管离我想表达的纯粹正念有点距离。这有点像在头脑中安装了一个杀毒软件，通过觉察来随时监控那些糟糕的、阻碍你达成更高绩效的念头。一旦发现它们在头脑中产生，就运行一键删除程序。</p>\n<blockquote>\n<p>不忘初心，方得始终。<br>——《华严经》</p>\n</blockquote>\n<p>虽然人们每天会产生各种各样的行为，大部分是在无意识状态下做出的反应，一些著作中也管这些无意识叫做习惯，必须承认的是有些习惯能帮助你成功，有些则会送你去地狱。我们必须通过提升觉察去接管这些无意识行为，理解这些行为背后的正向意图，这将使我们的注意力围绕真实意图产生正向且积极的能量，这也是管理人生中预期结果的关键因素。</p>\n<h3 id=\"3-交换\"><a href=\"#3-交换\" class=\"headerlink\" title=\"3.交换\"></a>3.交换</h3><p>十年前的游戏没有教程只有攻略，而在那个时候你需要付费才能阅读这些内容，现如今无论是游戏还是培训，全部以免费的形式开展，而当你发现自己真的想要从中获得些什么，自己要付出的比想象的更多，这个世界永远符合能量守恒原则。</p>\n<p>我身边有很多很多朋友想要健身、想要身材变得迷人，但是没有人真正的付出努力，他们大多数认为只要花钱办张健身卡或者请最好的健身教练就能够达成目标，而最终退费的理由又总是惊人的一致。如果你做不到真诚，即不对自己的真我撒谎，那么你就无法学会和这个世界做最好的交换。所有伟大的商人都是这方面的专家，而这或许是阻止你获得更大财富的瓶颈。</p>\n<p>武志红在他的<strong>「巨婴国」</strong>一书中提出“巨婴”的概念，很多人尽管实际年龄很大，但内在却像一个永远长不大的巨婴，处处需要被人迁就和包容。如果环境不能满足自己的要求，那么巨婴就会用自己的方式爆发。这种一味索取的处事方式从根本限制了这群人能力的发展。</p>\n<p>懂得交换意味着真正的成熟，它使我们的人生在各个方面更加平衡。请尽早激活你内在的商人，去和这个世界做最好的交换。</p>\n<h3 id=\"4-更新\"><a href=\"#4-更新\" class=\"headerlink\" title=\"4.更新\"></a>4.更新</h3><p>人们在自己认知范围内做出最好的选择，因为我们无法感知到自己认知范围之外的事物。人和人之间的差距总是在被彼此不同的认知边界拉开，而这些档口在于你如何利用自己的闲暇时光。平时不读书的借口总是我没有时间，你会发现这部分人即便在特殊时期有了大把的时间也不会读书。他们知道读书很重要，但是并不紧急，因为明天之后还有明天，当下总有更重要的事情。</p>\n<p>这里就涉及到“时间”这个概念，爱因斯坦在他的广义相对论中只提出了时空的概念而非时间，他认为时间和空间是捆绑在一起的，但是我们为了生活和商业活动的便利创造了时间的概念。想要理解时间就必须知道什么是重要的，那些真正对你有价值的事情就是重要的事情，它会占满你的全部时间，并令你沉浸其中，在这个过程中人们会完全忘记时间的存在。</p>\n<p>其实这个时期正是人生中最难得的休闲时光，你有大把大把的整块时间可以用来学习和成长。但在那之前，你必须意识到通过学习和阅读不断更新自己的价值所在。</p>\n<p>我的一个朋友说疫情改变了人们的学习方式，中小学开始利用互联网在线教学，家长们可以在家辅导孩子学习。我说No，疫情并没有改变人们的学习方式，而是改变了人们的教育方式。自从人类有了互联网和搜索引擎，我们最有效的学习方式就是Google我想要的答案。“学习”是一个主动的行为，它从来都是主动发生，没有被学习一说，但是你可以被教育。</p>\n<p>我的鱼缸中养了很多的观赏虾，它们每过一段时间就会脱壳，这意味着它们在不断的成长，理论上如果一只虾客户无限的脱壳，那么意味着它可以永生。然而我总是能从鱼缸中发现一些死去的虾，它们的死因只有一个，那就是由于身体虚弱而无法从壳中脱离，被自己的壳活活憋死。我们中国人有很多类似的成语用来形容这些行为，比如作茧自缚、破茧成蝶、涅槃重生等…动物界有很多相关的行为值得我们借鉴，在蝴蝶翱翔天空之前必须要经历痛苦的蜕变过程，而这个过程正是自我更新。</p>\n<p>所有的涅槃都需要打破过去旧的思维模式，这意味着拥抱崭新的未来，成为真正的自己。我们所有的痛苦都来自于无法成为真实的自己。人们或许会说你变了很多，事实上你只是变得更像自己。</p>\n<h3 id=\"5-分享\"><a href=\"#5-分享\" class=\"headerlink\" title=\"5.分享\"></a>5.分享</h3><blockquote>\n<p>世界上所有不快乐的人，都因为他们只想自己获得快乐。<br>——寂天法师</p>\n</blockquote>\n<p>这关于Oneness合一，或者叫它一体性，当你认为自己是独立于这个世界的单独个体，那么就相当于拥抱痛苦的根源，佛教普遍认为“我”的概念是痛苦的根源，它让人们产生分别心，由此造成的分别、分离、区别会让人十分痛苦。然而随着互联网的兴起人们发现彼此之间的距离越来越近了，似乎一定程度上消除了人与人之间的距离和隔阂，人们不再那么重视你的打扮、容貌、着装，因为在互联网中这些都是完全不重要的信息，如果你问正和你聊天的一个网友穿着什么牌子的衣服，对方一定会认为你有毛病。</p>\n<blockquote>\n<p>在互联网上，没人知道你是一条狗<br>On the Internet, nobody knows you’re a dog.<br>——1993.7.5《纽约客》彼得·施泰纳</p>\n</blockquote>\n<p>随着全球人类意识层级的不断提升，人们会逐渐接纳并理解全球一体化、合一、一即一切这样的概念。如果一个人认为世界是一面镜子，自己看到的一切都和自己没有任何的分别与不同，那么根本不需要你教他如何去尊重以及如何去爱。</p>\n<p>6.即兴<br>Yes, and…不是简单的口诀，而是由内而外的接纳、允许和包容。接纳一切的存在、允许一切的存在、包容一切的存在。</p>\n<p>从神经语言科学的角度来说，如果某些外在的事物令你痛苦，一定是你的内在滤镜出了问题。情绪就是能量，正向的能量可以帮助你，负面的能量可以摧毁你。情绪一直是影响人们产生绩效的最大阻碍，你一定听说过这样的话“不要在情绪中做任何决定”。情绪也会令你无法从容面对生活中各种各样的挑战，比如登台演讲之前的紧张，面对疫情时对于未来的焦虑和担忧。如果拿走这些情绪，那么一个人完全可以活出即兴的智慧。从好的一面看，我们可以在特殊时期去处理这些有问题的滤镜，让自己的内在更加健康。</p>\n<p>一个温文尔雅的人也会被一些不经意的琐事触发情绪而暴跳如雷，一个处在负面情绪中的人会完全被情绪掌控。每一个情绪的背后都有一个早年关于自我价值的故事，这些故事不断的积攒在我们的记忆中，就像埋下的地雷，爆炸不知道在什么时候会被触发。这些听上去很恐怖，但相信我，没有人希望自己真实的经历这些情绪。</p>\n<p>过去的故事造成执念，对未来的期待产生欲望，这些令我们无法活在当下。一个人若背负着沉重的负担去生活或工作，这会非常辛苦。尽管很痛苦，但是痛苦能够带来成长和改变，如果你不能像蝴蝶一样蜕壳就不能展翅翱翔。</p>\n<p>即兴是一种脱离头脑和逻辑的智慧。当你的头脑想要说不的时候，请先试着接纳，这也是一种不再将你和世界分开的智慧，可以理解为一种合一的觉知，Oneness。</p>\n<h3 id=\"7-行动\"><a href=\"#7-行动\" class=\"headerlink\" title=\"7.行动\"></a>7.行动</h3><blockquote>\n<p>Just do it.<br>——NIKE</p>\n</blockquote>\n<p>「知行合一」是由王阳明提出的哲学，很多人会讲知行合一很重要，但是其实将知行合一的人也未必可以做到。如果你相信进化论你会知道，人类通过几百万年的进化终于有了头脑——一台超级生物计算机，但我们却不能够百分百的开发和使用它，因为从出生起也从来没有一个说明书教你如何驾驭自己的头脑。不幸的是我们总是被头脑使唤，很多时候我们陷入逻辑思考无法自拔。一个又一个思绪浮现在脑海中挥之不去，有些关于过去而有些是关于不确定的未来。这些让我们无法活在当下，然而我们确认为头脑和思绪就是我们本身。</p>\n<blockquote>\n<p>世界上最遥远的距离就是从知道到做到的距离。<br>——佚名</p>\n</blockquote>\n<p>在这个世界上没有人仅仅通过读一本教人如何骑车的书来学会骑自行车的，Just do it，或许没有什么比直接体验带来的成长更直接。当然，一旦开始行动，就代表你已经具备了足够的勇气，以应对可能发生的各种结果。</p>\n<p>在行为层面产生的结果意味着从想象到现实的转变，可以确定那些能够做到的人百分之百在自己头脑中掌握了相关的要领，如果仍然做不到意味着大脑会启动主动学习来修复那些阻碍我们达成结果的盲区。</p>\n<h3 id=\"8-结语\"><a href=\"#8-结语\" class=\"headerlink\" title=\"8.结语\"></a>8.结语</h3><blockquote>\n<p>成为领袖之前你要专注“自我实现的个人成长”，<br>成为领袖之后你要专注“超越自我的利他爱人”。<br>——杰克·韦尔奇</p>\n</blockquote>\n<p>这个过程并没有你想象中那么难，幸运的是我开发了相关的课程来帮助你完成这些修炼，它会使你的人生从此充满丰盛、乐趣和智慧。</p>"},{"title":"树莓派：装在口袋里的量子云实验室（硬件篇）","type":"post","date":"2020-03-16T23:47:24.000Z","_content":"![](/images/2020/03/IMG_2372-2.JPG)\n纯粹为了好玩，我花费一周时间用树莓派的板子搭建了一台微型多功能服务器，虽然只有信用卡大小，但是也能科学观看Netflix。<!--more-->通过部署Nginx+Php7.3+Mysql与[上个月放在韩国的Linux公网服务器](https://purel.in/from-san-francisco-to-singapore-we-finally-arrived-in-seoul.html)实现了frp内网穿透，你可以从 https://pi.purel.in/ 来访问这台微型计算机的状态面版，它现在就放在我家的客厅。从某种程度上你可以理解为这两台相隔异国的服务器，穿透网络实现了量子纠缠。\n\n不妨畅想一下未来这台Pi可以做什么，比如成为私有云盘实现资料的存储与分享，或是部署网站并通过公网域名实现访问，它会成为这个全新的物联网世界中一朵无处不在的云，这朵云就是徐老师的实验室，它就在我家客厅或者我的口袋里。我说了我会写一篇超详细的部署日记，现在你看到我实现了我的承诺，鉴于篇幅较长，我会把它暂时分为硬件篇和软件篇两个部分，未来随着磨合与熟悉，或许会有拓展的玩法分享。\n\n我一直在想这样一件事，鉴于网络服务器的成本和存储空间限制，以及家用带宽的不断提升，我是否可以实现网络服务器的本地化部署？即通过域名 http://xxx.xxx 访问到的是本地的服务器，而非异地的IDC数据中心，这将大大提升服务器的操控、管理、以及安全性。部署在远端的服务器只需要做一个跳板或者镜像，那么我可以花费最低的成本购买足够的流量和带宽，而不用担心它的CPU性能和I/O限制。所以不论是从效率提升还是成本控制来看，我都需要想办法实现这个设想。\n\n### 主机\n\n目前我已经有了部署在韩国甲骨文机房的VM实例，那么接下来我需要一台低功耗且长期开机联网的本地服务器。上一周的某日我正在电报上面闲云野鹤，通过Dig发现了这块神奇的板子“Raspberry Pi”（树莓派）。虽然我的需求本身排除了对性能和功耗要求极高的图形化界面系统，因为我并不是用它来上网冲浪、看视频、打游戏，我只是需要它默默的做一台Server，但是这块小板子的硬件参数还是给了我惊喜。\n\n![](/images/2020/03/pi.png)Raspberry Pi 4 B 具备1.5Ghz运行的64位四核处理器，最高支持以60fps速度刷新的4K分辨率的双显示屏（下巴跌到地板上），高达4GB RAM（可根据型号选择1GB、2GB、4GB，多多益善所以我选择的是4GB版本），2.4/5.0 Ghz 双频无线LAN（它还可以用无线发射端成为一台软路由），蓝牙5.0/BLE，千兆以太网，USB3.0（这个接口很重要，意味着它完全可以挂载移动硬盘实现超大存储，比如成为私有云盘或家庭多媒体中心），和PoE功能。\n\n其实树莓派最大的卖点是物联网，也就是说通过编程它的GPIO 40-PIN针脚可以实现更多可能性，比如国外大神们就通过它打造了很多有趣好玩的机器人或者模拟器。最近女儿正饶有兴致的学习编程，这快板子未来可以帮到她。\n\n### 屏幕\n\n![](/images/2020/03/pi3.52.jpg)树莓派3.5寸LCD触摸显示屏\n\n尽管我为它搭配的3.5寸触摸屏幕使它一眼上去很酷，但实际上却用处不大，我未来可能会用一块1寸左右只显示本机IP地址的OLED屏幕代替。因为通过这几天的使用发现，我基本不会去看这块屏幕，一旦通过电视或显示器的连接完成了初次的联网设置，我就可以通过Macbook、iPad Pro、iPhone Pro Max的 VNC（远程桌面）或SSH（远程终端）连接和管理它。如果可以重来一次，我一定不会选则给树莓派配一块LCD屏幕，所以这块屏幕的存在纯粹是为了好看和炫酷……\n\n### 外设\n\n实际上一旦作为服务器开始运行，除了电源外并不需要任何外设，只要有网络就可以连接和管理它。但是一开始还是需要鼠标、键盘、显示器或电视来设置它。基于研究和好奇的精神我也尝试过无头安装，就是离开所有外设让它开机自动连接WIFI从而实现部署，但是发现这样更费劲，除非环境有限，否则不推荐小白尝试。先学会走路在学跑步在任何地方都适用。\n\n![](/images/2020/03/IMG_2377.jpg)Lofree蓝牙无线键盘 & 希捷移动硬盘1T我翻出来一只HP小鼠标和一只吃灰已久的Lofree蓝牙无线键盘，它也可以通过USB连接线来使用。另外1T的希捷移动硬盘同样摆脱了吃灰的命，我准备在后面用它作为Nextcloud私有云盘使用。移动硬盘吃灰的最大原因就是网络带宽的提升，这让人们大多数的数据存储通过云盘就能够实现，所以一块不能联网只能够通过拔插进行存储操作的移动硬盘越来越不受这个时代的待见。\n\n因为Pi的到来，这些老物件突然间焕发了光彩，尽管人们说电子产品买新不买旧，但随着自己年龄的增长，我对这些老物件的爱也是越来越多。\n\n### 散热\n\n![](/images/2020/03/pi4shan.png)树莓派4散热风扇和风扇支架\n\n散热非常重要，原本树莓派的板子是自带金属散热片的，可以贴在CPU和内存上，但是我担心加上屏幕和外壳后散热堪忧，于是又装了一个固定在主板上的散热风扇。即便是这样，开机温度也达到了57度，连续播放1080p的视频会提示主板过热。所以如过把它当作桌面工作站使用的话，真的不如使用Macbook或者PC更合适，话又说回来，如果加强硬件散热的话，比如加大风扇和散热芯片，它真的可以全面替代桌面电脑。\n\n### 总结\n\n下面这张照片就是它目前的样子。虽然很折腾，但确实太好玩了，特别在疫情肆虐的特殊时期，这个小东西让我的生活变得十分丰沛。享受整个过程中会忘记时间的流逝，这种体验下来反而收获更多，Just do it。\n\n![](/images/2020/03/IMG_2372-2.jpg)树莓派4B 徐老师的量子云实验室硬件篇大概就是这样子了，接下来是软件篇，因为我是Google、Youtube、Netflix重度使用者，我打造的Pi云也需要能够流畅使用它们，毕竟这个世界上知识搜索方面没有什么可以超过Google的。另外，如果让自己长期置身BAT环境，那么等同于失去和世界的连接。所以软件篇的篇幅会很长，而且涉及大量的计算机术语，假如你不是真的打算像我一样部署一个自己的Pi云的话，真的就不用追了:D。反之，你若崇尚探索的乐趣，那么接下来的干货一定会令你受益。","source":"_posts/2020-03-17-raspberry-pi-quantum-cloud-lab-in-your-pocket-hardware.md","raw":"---\ntitle: 树莓派：装在口袋里的量子云实验室（硬件篇）\ntype: post\ndate: 2020-03-17T07:47:24+00:00\ncategories: \n           - 树梅派\ntags:\n           - 树梅派\n           - 3.5inch\n           - LCD\n           - Lofree\n           - Pi\n           - 服务器\n---\n![](/images/2020/03/IMG_2372-2.JPG)\n纯粹为了好玩，我花费一周时间用树莓派的板子搭建了一台微型多功能服务器，虽然只有信用卡大小，但是也能科学观看Netflix。<!--more-->通过部署Nginx+Php7.3+Mysql与[上个月放在韩国的Linux公网服务器](https://purel.in/from-san-francisco-to-singapore-we-finally-arrived-in-seoul.html)实现了frp内网穿透，你可以从 https://pi.purel.in/ 来访问这台微型计算机的状态面版，它现在就放在我家的客厅。从某种程度上你可以理解为这两台相隔异国的服务器，穿透网络实现了量子纠缠。\n\n不妨畅想一下未来这台Pi可以做什么，比如成为私有云盘实现资料的存储与分享，或是部署网站并通过公网域名实现访问，它会成为这个全新的物联网世界中一朵无处不在的云，这朵云就是徐老师的实验室，它就在我家客厅或者我的口袋里。我说了我会写一篇超详细的部署日记，现在你看到我实现了我的承诺，鉴于篇幅较长，我会把它暂时分为硬件篇和软件篇两个部分，未来随着磨合与熟悉，或许会有拓展的玩法分享。\n\n我一直在想这样一件事，鉴于网络服务器的成本和存储空间限制，以及家用带宽的不断提升，我是否可以实现网络服务器的本地化部署？即通过域名 http://xxx.xxx 访问到的是本地的服务器，而非异地的IDC数据中心，这将大大提升服务器的操控、管理、以及安全性。部署在远端的服务器只需要做一个跳板或者镜像，那么我可以花费最低的成本购买足够的流量和带宽，而不用担心它的CPU性能和I/O限制。所以不论是从效率提升还是成本控制来看，我都需要想办法实现这个设想。\n\n### 主机\n\n目前我已经有了部署在韩国甲骨文机房的VM实例，那么接下来我需要一台低功耗且长期开机联网的本地服务器。上一周的某日我正在电报上面闲云野鹤，通过Dig发现了这块神奇的板子“Raspberry Pi”（树莓派）。虽然我的需求本身排除了对性能和功耗要求极高的图形化界面系统，因为我并不是用它来上网冲浪、看视频、打游戏，我只是需要它默默的做一台Server，但是这块小板子的硬件参数还是给了我惊喜。\n\n![](/images/2020/03/pi.png)Raspberry Pi 4 B 具备1.5Ghz运行的64位四核处理器，最高支持以60fps速度刷新的4K分辨率的双显示屏（下巴跌到地板上），高达4GB RAM（可根据型号选择1GB、2GB、4GB，多多益善所以我选择的是4GB版本），2.4/5.0 Ghz 双频无线LAN（它还可以用无线发射端成为一台软路由），蓝牙5.0/BLE，千兆以太网，USB3.0（这个接口很重要，意味着它完全可以挂载移动硬盘实现超大存储，比如成为私有云盘或家庭多媒体中心），和PoE功能。\n\n其实树莓派最大的卖点是物联网，也就是说通过编程它的GPIO 40-PIN针脚可以实现更多可能性，比如国外大神们就通过它打造了很多有趣好玩的机器人或者模拟器。最近女儿正饶有兴致的学习编程，这快板子未来可以帮到她。\n\n### 屏幕\n\n![](/images/2020/03/pi3.52.jpg)树莓派3.5寸LCD触摸显示屏\n\n尽管我为它搭配的3.5寸触摸屏幕使它一眼上去很酷，但实际上却用处不大，我未来可能会用一块1寸左右只显示本机IP地址的OLED屏幕代替。因为通过这几天的使用发现，我基本不会去看这块屏幕，一旦通过电视或显示器的连接完成了初次的联网设置，我就可以通过Macbook、iPad Pro、iPhone Pro Max的 VNC（远程桌面）或SSH（远程终端）连接和管理它。如果可以重来一次，我一定不会选则给树莓派配一块LCD屏幕，所以这块屏幕的存在纯粹是为了好看和炫酷……\n\n### 外设\n\n实际上一旦作为服务器开始运行，除了电源外并不需要任何外设，只要有网络就可以连接和管理它。但是一开始还是需要鼠标、键盘、显示器或电视来设置它。基于研究和好奇的精神我也尝试过无头安装，就是离开所有外设让它开机自动连接WIFI从而实现部署，但是发现这样更费劲，除非环境有限，否则不推荐小白尝试。先学会走路在学跑步在任何地方都适用。\n\n![](/images/2020/03/IMG_2377.jpg)Lofree蓝牙无线键盘 & 希捷移动硬盘1T我翻出来一只HP小鼠标和一只吃灰已久的Lofree蓝牙无线键盘，它也可以通过USB连接线来使用。另外1T的希捷移动硬盘同样摆脱了吃灰的命，我准备在后面用它作为Nextcloud私有云盘使用。移动硬盘吃灰的最大原因就是网络带宽的提升，这让人们大多数的数据存储通过云盘就能够实现，所以一块不能联网只能够通过拔插进行存储操作的移动硬盘越来越不受这个时代的待见。\n\n因为Pi的到来，这些老物件突然间焕发了光彩，尽管人们说电子产品买新不买旧，但随着自己年龄的增长，我对这些老物件的爱也是越来越多。\n\n### 散热\n\n![](/images/2020/03/pi4shan.png)树莓派4散热风扇和风扇支架\n\n散热非常重要，原本树莓派的板子是自带金属散热片的，可以贴在CPU和内存上，但是我担心加上屏幕和外壳后散热堪忧，于是又装了一个固定在主板上的散热风扇。即便是这样，开机温度也达到了57度，连续播放1080p的视频会提示主板过热。所以如过把它当作桌面工作站使用的话，真的不如使用Macbook或者PC更合适，话又说回来，如果加强硬件散热的话，比如加大风扇和散热芯片，它真的可以全面替代桌面电脑。\n\n### 总结\n\n下面这张照片就是它目前的样子。虽然很折腾，但确实太好玩了，特别在疫情肆虐的特殊时期，这个小东西让我的生活变得十分丰沛。享受整个过程中会忘记时间的流逝，这种体验下来反而收获更多，Just do it。\n\n![](/images/2020/03/IMG_2372-2.jpg)树莓派4B 徐老师的量子云实验室硬件篇大概就是这样子了，接下来是软件篇，因为我是Google、Youtube、Netflix重度使用者，我打造的Pi云也需要能够流畅使用它们，毕竟这个世界上知识搜索方面没有什么可以超过Google的。另外，如果让自己长期置身BAT环境，那么等同于失去和世界的连接。所以软件篇的篇幅会很长，而且涉及大量的计算机术语，假如你不是真的打算像我一样部署一个自己的Pi云的话，真的就不用追了:D。反之，你若崇尚探索的乐趣，那么接下来的干货一定会令你受益。","slug":"raspberry-pi-quantum-cloud-lab-in-your-pocket-hardware","published":1,"updated":"2020-03-16T23:47:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zfpkch0009loc69mjcc7eb","content":"<p><img src=\"/images/2020/03/IMG_2372-2.JPG\" alt=\"\"><br>纯粹为了好玩，我花费一周时间用树莓派的板子搭建了一台微型多功能服务器，虽然只有信用卡大小，但是也能科学观看Netflix。<span id=\"more\"></span>通过部署Nginx+Php7.3+Mysql与<a href=\"https://purel.in/from-san-francisco-to-singapore-we-finally-arrived-in-seoul.html\">上个月放在韩国的Linux公网服务器</a>实现了frp内网穿透，你可以从 <a href=\"https://pi.purel.in/\">https://pi.purel.in/</a> 来访问这台微型计算机的状态面版，它现在就放在我家的客厅。从某种程度上你可以理解为这两台相隔异国的服务器，穿透网络实现了量子纠缠。</p>\n<p>不妨畅想一下未来这台Pi可以做什么，比如成为私有云盘实现资料的存储与分享，或是部署网站并通过公网域名实现访问，它会成为这个全新的物联网世界中一朵无处不在的云，这朵云就是徐老师的实验室，它就在我家客厅或者我的口袋里。我说了我会写一篇超详细的部署日记，现在你看到我实现了我的承诺，鉴于篇幅较长，我会把它暂时分为硬件篇和软件篇两个部分，未来随着磨合与熟悉，或许会有拓展的玩法分享。</p>\n<p>我一直在想这样一件事，鉴于网络服务器的成本和存储空间限制，以及家用带宽的不断提升，我是否可以实现网络服务器的本地化部署？即通过域名 <a href=\"http://xxx.xxx\">http://xxx.xxx</a> 访问到的是本地的服务器，而非异地的IDC数据中心，这将大大提升服务器的操控、管理、以及安全性。部署在远端的服务器只需要做一个跳板或者镜像，那么我可以花费最低的成本购买足够的流量和带宽，而不用担心它的CPU性能和I/O限制。所以不论是从效率提升还是成本控制来看，我都需要想办法实现这个设想。</p>\n<h3 id=\"主机\"><a href=\"#主机\" class=\"headerlink\" title=\"主机\"></a>主机</h3><p>目前我已经有了部署在韩国甲骨文机房的VM实例，那么接下来我需要一台低功耗且长期开机联网的本地服务器。上一周的某日我正在电报上面闲云野鹤，通过Dig发现了这块神奇的板子“Raspberry Pi”（树莓派）。虽然我的需求本身排除了对性能和功耗要求极高的图形化界面系统，因为我并不是用它来上网冲浪、看视频、打游戏，我只是需要它默默的做一台Server，但是这块小板子的硬件参数还是给了我惊喜。</p>\n<p><img src=\"/images/2020/03/pi.png\" alt=\"\">Raspberry Pi 4 B 具备1.5Ghz运行的64位四核处理器，最高支持以60fps速度刷新的4K分辨率的双显示屏（下巴跌到地板上），高达4GB RAM（可根据型号选择1GB、2GB、4GB，多多益善所以我选择的是4GB版本），2.4/5.0 Ghz 双频无线LAN（它还可以用无线发射端成为一台软路由），蓝牙5.0/BLE，千兆以太网，USB3.0（这个接口很重要，意味着它完全可以挂载移动硬盘实现超大存储，比如成为私有云盘或家庭多媒体中心），和PoE功能。</p>\n<p>其实树莓派最大的卖点是物联网，也就是说通过编程它的GPIO 40-PIN针脚可以实现更多可能性，比如国外大神们就通过它打造了很多有趣好玩的机器人或者模拟器。最近女儿正饶有兴致的学习编程，这快板子未来可以帮到她。</p>\n<h3 id=\"屏幕\"><a href=\"#屏幕\" class=\"headerlink\" title=\"屏幕\"></a>屏幕</h3><p><img src=\"/images/2020/03/pi3.52.jpg\" alt=\"\">树莓派3.5寸LCD触摸显示屏</p>\n<p>尽管我为它搭配的3.5寸触摸屏幕使它一眼上去很酷，但实际上却用处不大，我未来可能会用一块1寸左右只显示本机IP地址的OLED屏幕代替。因为通过这几天的使用发现，我基本不会去看这块屏幕，一旦通过电视或显示器的连接完成了初次的联网设置，我就可以通过Macbook、iPad Pro、iPhone Pro Max的 VNC（远程桌面）或SSH（远程终端）连接和管理它。如果可以重来一次，我一定不会选则给树莓派配一块LCD屏幕，所以这块屏幕的存在纯粹是为了好看和炫酷……</p>\n<h3 id=\"外设\"><a href=\"#外设\" class=\"headerlink\" title=\"外设\"></a>外设</h3><p>实际上一旦作为服务器开始运行，除了电源外并不需要任何外设，只要有网络就可以连接和管理它。但是一开始还是需要鼠标、键盘、显示器或电视来设置它。基于研究和好奇的精神我也尝试过无头安装，就是离开所有外设让它开机自动连接WIFI从而实现部署，但是发现这样更费劲，除非环境有限，否则不推荐小白尝试。先学会走路在学跑步在任何地方都适用。</p>\n<p><img src=\"/images/2020/03/IMG_2377.jpg\" alt=\"\">Lofree蓝牙无线键盘 &amp; 希捷移动硬盘1T我翻出来一只HP小鼠标和一只吃灰已久的Lofree蓝牙无线键盘，它也可以通过USB连接线来使用。另外1T的希捷移动硬盘同样摆脱了吃灰的命，我准备在后面用它作为Nextcloud私有云盘使用。移动硬盘吃灰的最大原因就是网络带宽的提升，这让人们大多数的数据存储通过云盘就能够实现，所以一块不能联网只能够通过拔插进行存储操作的移动硬盘越来越不受这个时代的待见。</p>\n<p>因为Pi的到来，这些老物件突然间焕发了光彩，尽管人们说电子产品买新不买旧，但随着自己年龄的增长，我对这些老物件的爱也是越来越多。</p>\n<h3 id=\"散热\"><a href=\"#散热\" class=\"headerlink\" title=\"散热\"></a>散热</h3><p><img src=\"/images/2020/03/pi4shan.png\" alt=\"\">树莓派4散热风扇和风扇支架</p>\n<p>散热非常重要，原本树莓派的板子是自带金属散热片的，可以贴在CPU和内存上，但是我担心加上屏幕和外壳后散热堪忧，于是又装了一个固定在主板上的散热风扇。即便是这样，开机温度也达到了57度，连续播放1080p的视频会提示主板过热。所以如过把它当作桌面工作站使用的话，真的不如使用Macbook或者PC更合适，话又说回来，如果加强硬件散热的话，比如加大风扇和散热芯片，它真的可以全面替代桌面电脑。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>下面这张照片就是它目前的样子。虽然很折腾，但确实太好玩了，特别在疫情肆虐的特殊时期，这个小东西让我的生活变得十分丰沛。享受整个过程中会忘记时间的流逝，这种体验下来反而收获更多，Just do it。</p>\n<p><img src=\"/images/2020/03/IMG_2372-2.jpg\" alt=\"\">树莓派4B 徐老师的量子云实验室硬件篇大概就是这样子了，接下来是软件篇，因为我是Google、Youtube、Netflix重度使用者，我打造的Pi云也需要能够流畅使用它们，毕竟这个世界上知识搜索方面没有什么可以超过Google的。另外，如果让自己长期置身BAT环境，那么等同于失去和世界的连接。所以软件篇的篇幅会很长，而且涉及大量的计算机术语，假如你不是真的打算像我一样部署一个自己的Pi云的话，真的就不用追了:D。反之，你若崇尚探索的乐趣，那么接下来的干货一定会令你受益。</p>\n","site":{"data":{"menu":[{"name":"文章","icon":"fas fa-newspaper","rows":[{"name":"分类","icon":"fas fa-folder-open","url":"categories/"},{"name":"标签","icon":"fas fa-tags","url":"tags/"},{"name":"归档","icon":"fas fa-archive","url":"archives/"}]},{"name":"邻星","icon":"fas fa-link","url":"friends/"},{"name":"关于","icon":"fas fa-info-circle","url":"about/"},{"name":"留言板","icon":"fas fa-comment-dots","url":"bbs/"},{"name":"实验室","icon":"fas fa-flask","rows":[{"name":"Pi","icon":"fab fa-raspberry-pi","url":"https://pi.purel.in"},{"name":"Cloud","icon":"fab fa-cloudversify","url":"https://cloud.purel.in/"}]}]}},"excerpt":"<p><img src=\"/images/2020/03/IMG_2372-2.JPG\" alt=\"\"><br>纯粹为了好玩，我花费一周时间用树莓派的板子搭建了一台微型多功能服务器，虽然只有信用卡大小，但是也能科学观看Netflix。","more":"通过部署Nginx+Php7.3+Mysql与<a href=\"https://purel.in/from-san-francisco-to-singapore-we-finally-arrived-in-seoul.html\">上个月放在韩国的Linux公网服务器</a>实现了frp内网穿透，你可以从 <a href=\"https://pi.purel.in/\">https://pi.purel.in/</a> 来访问这台微型计算机的状态面版，它现在就放在我家的客厅。从某种程度上你可以理解为这两台相隔异国的服务器，穿透网络实现了量子纠缠。</p>\n<p>不妨畅想一下未来这台Pi可以做什么，比如成为私有云盘实现资料的存储与分享，或是部署网站并通过公网域名实现访问，它会成为这个全新的物联网世界中一朵无处不在的云，这朵云就是徐老师的实验室，它就在我家客厅或者我的口袋里。我说了我会写一篇超详细的部署日记，现在你看到我实现了我的承诺，鉴于篇幅较长，我会把它暂时分为硬件篇和软件篇两个部分，未来随着磨合与熟悉，或许会有拓展的玩法分享。</p>\n<p>我一直在想这样一件事，鉴于网络服务器的成本和存储空间限制，以及家用带宽的不断提升，我是否可以实现网络服务器的本地化部署？即通过域名 <a href=\"http://xxx.xxx\">http://xxx.xxx</a> 访问到的是本地的服务器，而非异地的IDC数据中心，这将大大提升服务器的操控、管理、以及安全性。部署在远端的服务器只需要做一个跳板或者镜像，那么我可以花费最低的成本购买足够的流量和带宽，而不用担心它的CPU性能和I/O限制。所以不论是从效率提升还是成本控制来看，我都需要想办法实现这个设想。</p>\n<h3 id=\"主机\"><a href=\"#主机\" class=\"headerlink\" title=\"主机\"></a>主机</h3><p>目前我已经有了部署在韩国甲骨文机房的VM实例，那么接下来我需要一台低功耗且长期开机联网的本地服务器。上一周的某日我正在电报上面闲云野鹤，通过Dig发现了这块神奇的板子“Raspberry Pi”（树莓派）。虽然我的需求本身排除了对性能和功耗要求极高的图形化界面系统，因为我并不是用它来上网冲浪、看视频、打游戏，我只是需要它默默的做一台Server，但是这块小板子的硬件参数还是给了我惊喜。</p>\n<p><img src=\"/images/2020/03/pi.png\" alt=\"\">Raspberry Pi 4 B 具备1.5Ghz运行的64位四核处理器，最高支持以60fps速度刷新的4K分辨率的双显示屏（下巴跌到地板上），高达4GB RAM（可根据型号选择1GB、2GB、4GB，多多益善所以我选择的是4GB版本），2.4/5.0 Ghz 双频无线LAN（它还可以用无线发射端成为一台软路由），蓝牙5.0/BLE，千兆以太网，USB3.0（这个接口很重要，意味着它完全可以挂载移动硬盘实现超大存储，比如成为私有云盘或家庭多媒体中心），和PoE功能。</p>\n<p>其实树莓派最大的卖点是物联网，也就是说通过编程它的GPIO 40-PIN针脚可以实现更多可能性，比如国外大神们就通过它打造了很多有趣好玩的机器人或者模拟器。最近女儿正饶有兴致的学习编程，这快板子未来可以帮到她。</p>\n<h3 id=\"屏幕\"><a href=\"#屏幕\" class=\"headerlink\" title=\"屏幕\"></a>屏幕</h3><p><img src=\"/images/2020/03/pi3.52.jpg\" alt=\"\">树莓派3.5寸LCD触摸显示屏</p>\n<p>尽管我为它搭配的3.5寸触摸屏幕使它一眼上去很酷，但实际上却用处不大，我未来可能会用一块1寸左右只显示本机IP地址的OLED屏幕代替。因为通过这几天的使用发现，我基本不会去看这块屏幕，一旦通过电视或显示器的连接完成了初次的联网设置，我就可以通过Macbook、iPad Pro、iPhone Pro Max的 VNC（远程桌面）或SSH（远程终端）连接和管理它。如果可以重来一次，我一定不会选则给树莓派配一块LCD屏幕，所以这块屏幕的存在纯粹是为了好看和炫酷……</p>\n<h3 id=\"外设\"><a href=\"#外设\" class=\"headerlink\" title=\"外设\"></a>外设</h3><p>实际上一旦作为服务器开始运行，除了电源外并不需要任何外设，只要有网络就可以连接和管理它。但是一开始还是需要鼠标、键盘、显示器或电视来设置它。基于研究和好奇的精神我也尝试过无头安装，就是离开所有外设让它开机自动连接WIFI从而实现部署，但是发现这样更费劲，除非环境有限，否则不推荐小白尝试。先学会走路在学跑步在任何地方都适用。</p>\n<p><img src=\"/images/2020/03/IMG_2377.jpg\" alt=\"\">Lofree蓝牙无线键盘 &amp; 希捷移动硬盘1T我翻出来一只HP小鼠标和一只吃灰已久的Lofree蓝牙无线键盘，它也可以通过USB连接线来使用。另外1T的希捷移动硬盘同样摆脱了吃灰的命，我准备在后面用它作为Nextcloud私有云盘使用。移动硬盘吃灰的最大原因就是网络带宽的提升，这让人们大多数的数据存储通过云盘就能够实现，所以一块不能联网只能够通过拔插进行存储操作的移动硬盘越来越不受这个时代的待见。</p>\n<p>因为Pi的到来，这些老物件突然间焕发了光彩，尽管人们说电子产品买新不买旧，但随着自己年龄的增长，我对这些老物件的爱也是越来越多。</p>\n<h3 id=\"散热\"><a href=\"#散热\" class=\"headerlink\" title=\"散热\"></a>散热</h3><p><img src=\"/images/2020/03/pi4shan.png\" alt=\"\">树莓派4散热风扇和风扇支架</p>\n<p>散热非常重要，原本树莓派的板子是自带金属散热片的，可以贴在CPU和内存上，但是我担心加上屏幕和外壳后散热堪忧，于是又装了一个固定在主板上的散热风扇。即便是这样，开机温度也达到了57度，连续播放1080p的视频会提示主板过热。所以如过把它当作桌面工作站使用的话，真的不如使用Macbook或者PC更合适，话又说回来，如果加强硬件散热的话，比如加大风扇和散热芯片，它真的可以全面替代桌面电脑。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>下面这张照片就是它目前的样子。虽然很折腾，但确实太好玩了，特别在疫情肆虐的特殊时期，这个小东西让我的生活变得十分丰沛。享受整个过程中会忘记时间的流逝，这种体验下来反而收获更多，Just do it。</p>\n<p><img src=\"/images/2020/03/IMG_2372-2.jpg\" alt=\"\">树莓派4B 徐老师的量子云实验室硬件篇大概就是这样子了，接下来是软件篇，因为我是Google、Youtube、Netflix重度使用者，我打造的Pi云也需要能够流畅使用它们，毕竟这个世界上知识搜索方面没有什么可以超过Google的。另外，如果让自己长期置身BAT环境，那么等同于失去和世界的连接。所以软件篇的篇幅会很长，而且涉及大量的计算机术语，假如你不是真的打算像我一样部署一个自己的Pi云的话，真的就不用追了:D。反之，你若崇尚探索的乐趣，那么接下来的干货一定会令你受益。</p>"},{"title":"树莓派：装在口袋里的量子云实验室（软件篇）","type":"post","date":"2020-03-19T00:11:56.000Z","_content":"![alt text](/images/2020/03/IMG_2391-scaled.jpg \"Title\")\n小的时候父母工作很忙，经常把我一个人留在家里，那个时候的杀手锏就是玩具。因为我可以一直玩一整天，完全沉浸其中忘记时间。\n<!--more-->\n### 前言\n\n那时候父母工作很忙经常把我一个人留在家里，但我一点也不觉得孤独，因为我有各式各样的玩具陪伴。每次父母出差回家都会给我带新的玩具，所以我跟其他小朋友最大的不同就是我总期待父母出差，因为这意味着我又会有新的玩具了。玩具总能令我发散思维并启发探索精神，似乎通过它们可以打开生命和宇宙的无限可能。\n\nRaspberry Pi 帮我找回了这种感觉，作为开发板它小小的身躯并不能跟各个商售的电脑比拼性能，但是却从物联网领域给了我们更多的想象空间，这正是这个世界未来的趋势。\n\n抛开华丽的图形界面拥抱Linux指令，让自己融入一种全新的语言环境，这种语言环境甚至会改变大脑的思维方式。当你越了解了计算机语言就越会发现除了吃喝拉撒睡以外，人和计算机并没有什么本质的区别，当然计算机还摆脱了妄想、分别和执念……\n\n## 1.启动\n\n最终我还是把3.5寸触摸屏摘掉了，因为是在没什么用，并且会导致整台机器发热量很大，摘掉屏幕后清爽了很多，这是Pi本该有的样子～\n\n首先让我们从配置WIFI开始，SD卡根目录下新建一个名为`wpa_supplicant.conf`的文件：\n`sudo nano /Volumes/boot/wpa_supplicant.conf`\n#### 写入WIFI配置\n```\ncountry=CN #如果非CN国家代码可能导致5G-Wifi不能被识别\nctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nupdate_config=1\nnetwork={\nssid=<YOUR-NETWORK-NAME>\npsk=<YOUR-NETWORK-PASSWORD>\n}\n```\n\n#### 开启SSH\n只需在SD卡根目录下新建一个名为ssh的空文件：\n`nano /Volumes/boot/ssh`\n在Macbookl登录树莓派的ssh时遇到了密钥冲突，\n输入`ssh-keygen -R 192.168.1.121`清空之前该IP地址储存在本机的密钥。\n\n第一次用`pi`登录后默认密码为`raspberry`，应使用`sudo raspi-config`通过树莓派管理工具修改密码、主机名等信息，或是直接使用`passwd`修改密码。我是直接开启了root权限`sudo passwd root`然后切换为root用户`su root`。\n\n#### 允许ROOT权限远程登录\n`sudo nano /etc/ssh/sshd_config`\n找到 `PermitRootLogin without-password` 前面加`#`注释掉，在下面添加`PermitRootLogin yes` 然后通过 `service ssh restart` 重启ssh服务生效。\n\n## 2.环境部署\n\n无论是人还是机器，只有部署在合适的环境才能够发挥最大的生产力。\n\n#### 最适合树莓派的系统\n\n唯一让我纠结的是Raspbian这个64位的cpu却跑着32位系统，意味着Pi的性能大打折扣，于是开始探索在Pi上装64位Ubuntu的可能性，目前官方只给出了Server版，但这就意味着我必须手动安装图形桌面，事实证明官方的Raspbian就是最合适的，树莓派的工程师在论坛给出了切换kernel到64 bit内核的临时方案用于测试，不过这又牵扯到在终端使用`rpi-update`命令来更新系统环境。输入`uname -a`会得到以下信息：\n```\nLinux pi 4.19.108-v7l+ #1298 SMP Fri Mar 6 18:09:54 GMT 2020 armv7l GNU/Linux\n```\n通过`rpi-update`更新后在/boot/config.txt中加入`arm_64bit=1`可以切换内核到64版本，再开机时输入`uname -a` 得到`aarch64`。这个方法可以临时装一下64位的程序，不过我安装最新版本的宝塔面板仍人提示不支持32位版本而失败……\n\n这一周对于私有云的部署让我重新找到小时候的感觉，光是切换到不同的系统去体验Linux就花费了两天时间，最终还是确定用Raspbian原版系统。绕了一大圈回到原点的过程确实是必要的，它会让我知道什么是重要的，什么是需要的，以及各个系统的优势劣势。\n\n#### 部署LNMP网站环境\n\n环境安装的是Nginx+Mysql+Php7.3，从安装到运行都没出现任何问题，LNMP适合我对网站部署的全部需求。这是一套非常成熟的环境，推荐使用OneInStack一键部署lnmp环境指令。打开[OneInStack官方网站](https://oneinstack.com/auto/)自定义自己的一键部署指令非常方便。\n\n## 3.部署量子云实验室\n\n#### Nextcloud部署\n\nNextcloud的安装没什么好记录的，之前在韩国服务器使用自动官方的安装文件setup-nextcloud.php顺利一键搞定，但由于网络原因在树莓派这样行不通，于是下载了最新版本解压安装的，依然比较顺利，除了要注意nextcloud所在目录的用户和用户组权限问题，在参阅了ngnix.conf文件后确认了ngnix的默认用户和用户组是`www-data`，于是修改了在root下创建的nextcloud目录权限后可以完美运行。\n\n使用过程中偶尔会出现502 Bad Gateway的错误提示，只有重启才能修复，于是想干脆升级到php7.4试试看。但是当升级之后发现nextcloud提示Internet Server 500错误无法打开，直觉告诉我将config.php文件修改为config1.php会得到真正信息，果然再刷新页面提示未安装php dom模块，于是敲入` sudo apt-get install php-xml`解决～\n\n关于nextcloud后台**安全与设置警告**检测出来的一些问题，逐一Google即可解决，比如`在数据表 oc_calendarobjects_props 中无法找到索引 calendarobject_calid_index。`\n通过SSH输入下面代码解决。\n```\nsudo -u www-data php occ db:add-missing-indices\n```\n其他的警告处理起来也是同理。关于nginx、php-fpm以及mysql的配置文件方面需要多多参考官方建议进行配置。\n\n#### 挂载移动硬盘\n\n挂载外接硬盘出现了一个小插曲，确实应该记录下来。\n为了打造私有云盘，我需要更大的存储空间，于是利用之前一直吃灰的1T移动硬盘作为外部挂载。\n通过`fdisk -l` 指令检查发现我的1T硬盘挂在/dev/sda2的位置，于是通过如下指令进行重新挂载。\n```\nmkdir /media/lab #在media目录下创建lab目录\numount /dev/sda2 #卸载移动硬盘\nmount /dev/sda2 /media/lab #重新挂载到刚刚创建的lab目录\n```\n现在它挂载到了`/media/lab`，这样便可以在nextcloud中作为外部存储添加使用了。\n\n#### 格式化移动硬盘到Ext4\n\n先查看UUID`sudo blkid` 然后格式化为Linux的格式\n```\nsudo mkfs.ext4 /dev/sda\n```\nlinux下的格式普遍为`ext2`、`ext3`和`ext4`，并且版本高的可以向下兼容，这里我选择`ext4`，\n之前也考虑用Windows的Fat或者MacOS的NTFS，但是发现在Pi下面接Nextcloud无法顺利使用，\n好在Ext4在其他系统中也都有很好的识别办法，比如通过下载相应的软件实现。\n\n![](/images/2020/03/7552A5D8.jpeg \"blood & etc/fstab\")\n\n为了让它开机自动挂载，而不是挂载到某个用户文件夹下，需要修改`/etc/fstab`文件，\n但是由于误把PARTUUID当作UUID使用，而且设置了开机自检造成无法开机，这就是拿别人代码不检查就用所付出的代价。\n于是拔出SD卡插入我的Macbook在/cmdlIne.txt中最后一行加入`“ S”`，再次重启顺利进入维护模式。\n```\ndwc_otg.lpm_enable=0 console=serial0,115200 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait S\n```\n回到熟悉的命令行重新`sudo nano /etc/fstab`加入了正确的指令是这样子的，中间的空格可以随意增减但是必须要有。\n```\nUUID=c690611e-42cc-471d-bbab-f718c8961014 /media/disk ext4 defaults 0 0\n```\n这里备注一下,后面两个0第一个代表dump即不备份。第二个代表fsck检查的顺序0表示不检查，跳过开机检查避免不必要的麻烦。\n\n## 4.科学上网\n\n互联网将人们的学习能力提升了N级，我们与知识之间最近的距离就是Google一下。在国内完全没有可替代的环境，作为Google、Youtube、Netflix的重度使用患者，让自己的派科学上网是非常必要的，这是与世界连接的第一步，就像是学习英文可以帮助我们更好的理解这个世界是一样的道理。\n\n#### 树莓派部署酸酸乳\n\n首先确认一下自己自己安装了Git。\n```\nsudo apt-get install git #ubuntu\nsudo yum install git #CentOS\n```\n然后在具有写权限的目录执行如下命令获取到ssr脚本仓库\n`git clone http://git.mrwang.pw/Reed/Linux_ssr_script.git`\n进入刚刚克隆的仓库目录并赋予ssr脚本执行权限\n`cd Linux_ssr_script && chmod +x ./ssr`\n然后将脚本放入可执行脚本的目录，这样就完成了脚本的安装\n`sudo mv ./ssr /usr/local/sbin/`\n使用时只需要输入`ssr`就会看到支持的命令列表。输入`ssr config`开始配置ssr。\n我使用的是韩国服务器，不差钱的朋友也可以根据自己需求购置云VPS部署酸酸乳服务端。\n\n#### 部署ProxyChains代理指定程序\n\nProxyChains是一个使用方便的代理工具，它只会代理指定的程序。\n下载：\n`git clone https://github.com/rofl0r/proxychains-ng`\n安装：\n```\ncd proxychains-ng/\n./configure --prefix=/usr --sysconfdir=/etc\nmake\nsudo make install\nsudo make install-config\n```\n配置：\n将`/etc/proxychains.conf`最后一行修改为酸酸乳端口：`socks5 127.0.0.1 1080`，测试`wget`，返回网页源码：`proxychains4 wget -qO- https://www.google.com`\n\n#### http代理\n\n有些程序并不像`curl`那样能够直接支持socks5代理，有时，按照情况需要配置http代理。\n安装`privoxy`，开启全局http代理，其默认代理地址为`http://127.0.0.1:8118`：\n\n```\nsudo apt-get install privoxy\nsudo -s\necho 'forward-socks5 / 127.0.0.1:1080 .' >>/etc/privoxy/config\nsystemctl status privoxy.service #查看代理状态\nsystemctl enable privoxy.service #开机自动启动\nsystemctl start privoxy.service #开启http代理`\nsystemctl restart privoxy.service #重启http代理\n```\n测试http代理：`wget -qO- -e use_proxy=yes -e http_proxy=127.0.0.1:8118 http://google.com`\n我一般是配合sudo apt指令使用，特别是rpi-update，通过http代理可以很好的实现更新加速。\n```\nsudo http_proxy=http://127.0.0.1:8118 apt-get update\nsudo http_proxy=http://127.0.0.1:8118 apt-get upgrade\nsudo http_proxy=http://127.0.0.1:8118 apt-get dist-upgrade\nsudo http_proxy=http://127.0.0.1:8118 rpi-update\n```\n\n## 5.FRP内网穿透\n\n如果有一对带电粒子相互间量子纠缠，一个在地球而另一个被发射到月球，这两个粒子因量子纠缠效应会完全同步。FRP就是这样一个工具，它帮助我们实现通过互联网直接访问本地主机的网站或资源。安装与配置直接采用[官方指南](https://github.com/fatedier/frp/blob/master/README_zh.md)，非常明晰。\n```\nhttps://github.com/fatedier/frp/blob/master/README_zh.md\n```\n\n#### 开机自动启动FRP\n\n`sudo nano /lib/systemd/system/frps.service `\n填入以下代码并Ctrl+O保存，Ctrl+X退出\n\n```\n[Unit]\nDescription=frapc service\nAfter=network.target syslog.target\nWants=network.target\n[Service]\nType=simple\nExecStart=/your/path/frpc -c /your/path/frpc.ini\n[Install]\nWantedBy=multi-user.target\n```\n\n然后就启动frpc，输入`sudo systemctl start frpc`\n再打开自启动，输入`sudo systemctl enable frpc`\n\n如果要重启应用，可以这样，`sudo systemctl restart frpc`\n如果要停止应用，可以输入，`sudo systemctl stop frpc`\n如果要查看应用的日志，可以输入，`sudo systemctl status frpc`\n这里是以本地树莓派frpc做例子，远程服务器的frps同理。\n\n先写这么多，后面想到什么在慢慢补充……\n如果你对树莓派感兴趣，[可以阅读我的上一篇文章，关于它的硬件部署。](https://purel.in/raspberry-pi-quantum-cloud-lab-in-your-pocket-hardware/)","source":"_posts/2020-03-19-raspberry-pi-quantum-cloud-lab-in-your-pocket-software.md","raw":"---\ntitle: 树莓派：装在口袋里的量子云实验室（软件篇）\ntype: post\ndate: 2020-03-19T08:11:56+00:00\ncategories: \n           - 树梅派\ntags:\n           - 树梅派\n           - Frp\n           - 内网穿透\n           - WIFI\n           - SSH\n           - root\n           - SSR\n---\n![alt text](/images/2020/03/IMG_2391-scaled.jpg \"Title\")\n小的时候父母工作很忙，经常把我一个人留在家里，那个时候的杀手锏就是玩具。因为我可以一直玩一整天，完全沉浸其中忘记时间。\n<!--more-->\n### 前言\n\n那时候父母工作很忙经常把我一个人留在家里，但我一点也不觉得孤独，因为我有各式各样的玩具陪伴。每次父母出差回家都会给我带新的玩具，所以我跟其他小朋友最大的不同就是我总期待父母出差，因为这意味着我又会有新的玩具了。玩具总能令我发散思维并启发探索精神，似乎通过它们可以打开生命和宇宙的无限可能。\n\nRaspberry Pi 帮我找回了这种感觉，作为开发板它小小的身躯并不能跟各个商售的电脑比拼性能，但是却从物联网领域给了我们更多的想象空间，这正是这个世界未来的趋势。\n\n抛开华丽的图形界面拥抱Linux指令，让自己融入一种全新的语言环境，这种语言环境甚至会改变大脑的思维方式。当你越了解了计算机语言就越会发现除了吃喝拉撒睡以外，人和计算机并没有什么本质的区别，当然计算机还摆脱了妄想、分别和执念……\n\n## 1.启动\n\n最终我还是把3.5寸触摸屏摘掉了，因为是在没什么用，并且会导致整台机器发热量很大，摘掉屏幕后清爽了很多，这是Pi本该有的样子～\n\n首先让我们从配置WIFI开始，SD卡根目录下新建一个名为`wpa_supplicant.conf`的文件：\n`sudo nano /Volumes/boot/wpa_supplicant.conf`\n#### 写入WIFI配置\n```\ncountry=CN #如果非CN国家代码可能导致5G-Wifi不能被识别\nctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nupdate_config=1\nnetwork={\nssid=<YOUR-NETWORK-NAME>\npsk=<YOUR-NETWORK-PASSWORD>\n}\n```\n\n#### 开启SSH\n只需在SD卡根目录下新建一个名为ssh的空文件：\n`nano /Volumes/boot/ssh`\n在Macbookl登录树莓派的ssh时遇到了密钥冲突，\n输入`ssh-keygen -R 192.168.1.121`清空之前该IP地址储存在本机的密钥。\n\n第一次用`pi`登录后默认密码为`raspberry`，应使用`sudo raspi-config`通过树莓派管理工具修改密码、主机名等信息，或是直接使用`passwd`修改密码。我是直接开启了root权限`sudo passwd root`然后切换为root用户`su root`。\n\n#### 允许ROOT权限远程登录\n`sudo nano /etc/ssh/sshd_config`\n找到 `PermitRootLogin without-password` 前面加`#`注释掉，在下面添加`PermitRootLogin yes` 然后通过 `service ssh restart` 重启ssh服务生效。\n\n## 2.环境部署\n\n无论是人还是机器，只有部署在合适的环境才能够发挥最大的生产力。\n\n#### 最适合树莓派的系统\n\n唯一让我纠结的是Raspbian这个64位的cpu却跑着32位系统，意味着Pi的性能大打折扣，于是开始探索在Pi上装64位Ubuntu的可能性，目前官方只给出了Server版，但这就意味着我必须手动安装图形桌面，事实证明官方的Raspbian就是最合适的，树莓派的工程师在论坛给出了切换kernel到64 bit内核的临时方案用于测试，不过这又牵扯到在终端使用`rpi-update`命令来更新系统环境。输入`uname -a`会得到以下信息：\n```\nLinux pi 4.19.108-v7l+ #1298 SMP Fri Mar 6 18:09:54 GMT 2020 armv7l GNU/Linux\n```\n通过`rpi-update`更新后在/boot/config.txt中加入`arm_64bit=1`可以切换内核到64版本，再开机时输入`uname -a` 得到`aarch64`。这个方法可以临时装一下64位的程序，不过我安装最新版本的宝塔面板仍人提示不支持32位版本而失败……\n\n这一周对于私有云的部署让我重新找到小时候的感觉，光是切换到不同的系统去体验Linux就花费了两天时间，最终还是确定用Raspbian原版系统。绕了一大圈回到原点的过程确实是必要的，它会让我知道什么是重要的，什么是需要的，以及各个系统的优势劣势。\n\n#### 部署LNMP网站环境\n\n环境安装的是Nginx+Mysql+Php7.3，从安装到运行都没出现任何问题，LNMP适合我对网站部署的全部需求。这是一套非常成熟的环境，推荐使用OneInStack一键部署lnmp环境指令。打开[OneInStack官方网站](https://oneinstack.com/auto/)自定义自己的一键部署指令非常方便。\n\n## 3.部署量子云实验室\n\n#### Nextcloud部署\n\nNextcloud的安装没什么好记录的，之前在韩国服务器使用自动官方的安装文件setup-nextcloud.php顺利一键搞定，但由于网络原因在树莓派这样行不通，于是下载了最新版本解压安装的，依然比较顺利，除了要注意nextcloud所在目录的用户和用户组权限问题，在参阅了ngnix.conf文件后确认了ngnix的默认用户和用户组是`www-data`，于是修改了在root下创建的nextcloud目录权限后可以完美运行。\n\n使用过程中偶尔会出现502 Bad Gateway的错误提示，只有重启才能修复，于是想干脆升级到php7.4试试看。但是当升级之后发现nextcloud提示Internet Server 500错误无法打开，直觉告诉我将config.php文件修改为config1.php会得到真正信息，果然再刷新页面提示未安装php dom模块，于是敲入` sudo apt-get install php-xml`解决～\n\n关于nextcloud后台**安全与设置警告**检测出来的一些问题，逐一Google即可解决，比如`在数据表 oc_calendarobjects_props 中无法找到索引 calendarobject_calid_index。`\n通过SSH输入下面代码解决。\n```\nsudo -u www-data php occ db:add-missing-indices\n```\n其他的警告处理起来也是同理。关于nginx、php-fpm以及mysql的配置文件方面需要多多参考官方建议进行配置。\n\n#### 挂载移动硬盘\n\n挂载外接硬盘出现了一个小插曲，确实应该记录下来。\n为了打造私有云盘，我需要更大的存储空间，于是利用之前一直吃灰的1T移动硬盘作为外部挂载。\n通过`fdisk -l` 指令检查发现我的1T硬盘挂在/dev/sda2的位置，于是通过如下指令进行重新挂载。\n```\nmkdir /media/lab #在media目录下创建lab目录\numount /dev/sda2 #卸载移动硬盘\nmount /dev/sda2 /media/lab #重新挂载到刚刚创建的lab目录\n```\n现在它挂载到了`/media/lab`，这样便可以在nextcloud中作为外部存储添加使用了。\n\n#### 格式化移动硬盘到Ext4\n\n先查看UUID`sudo blkid` 然后格式化为Linux的格式\n```\nsudo mkfs.ext4 /dev/sda\n```\nlinux下的格式普遍为`ext2`、`ext3`和`ext4`，并且版本高的可以向下兼容，这里我选择`ext4`，\n之前也考虑用Windows的Fat或者MacOS的NTFS，但是发现在Pi下面接Nextcloud无法顺利使用，\n好在Ext4在其他系统中也都有很好的识别办法，比如通过下载相应的软件实现。\n\n![](/images/2020/03/7552A5D8.jpeg \"blood & etc/fstab\")\n\n为了让它开机自动挂载，而不是挂载到某个用户文件夹下，需要修改`/etc/fstab`文件，\n但是由于误把PARTUUID当作UUID使用，而且设置了开机自检造成无法开机，这就是拿别人代码不检查就用所付出的代价。\n于是拔出SD卡插入我的Macbook在/cmdlIne.txt中最后一行加入`“ S”`，再次重启顺利进入维护模式。\n```\ndwc_otg.lpm_enable=0 console=serial0,115200 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait S\n```\n回到熟悉的命令行重新`sudo nano /etc/fstab`加入了正确的指令是这样子的，中间的空格可以随意增减但是必须要有。\n```\nUUID=c690611e-42cc-471d-bbab-f718c8961014 /media/disk ext4 defaults 0 0\n```\n这里备注一下,后面两个0第一个代表dump即不备份。第二个代表fsck检查的顺序0表示不检查，跳过开机检查避免不必要的麻烦。\n\n## 4.科学上网\n\n互联网将人们的学习能力提升了N级，我们与知识之间最近的距离就是Google一下。在国内完全没有可替代的环境，作为Google、Youtube、Netflix的重度使用患者，让自己的派科学上网是非常必要的，这是与世界连接的第一步，就像是学习英文可以帮助我们更好的理解这个世界是一样的道理。\n\n#### 树莓派部署酸酸乳\n\n首先确认一下自己自己安装了Git。\n```\nsudo apt-get install git #ubuntu\nsudo yum install git #CentOS\n```\n然后在具有写权限的目录执行如下命令获取到ssr脚本仓库\n`git clone http://git.mrwang.pw/Reed/Linux_ssr_script.git`\n进入刚刚克隆的仓库目录并赋予ssr脚本执行权限\n`cd Linux_ssr_script && chmod +x ./ssr`\n然后将脚本放入可执行脚本的目录，这样就完成了脚本的安装\n`sudo mv ./ssr /usr/local/sbin/`\n使用时只需要输入`ssr`就会看到支持的命令列表。输入`ssr config`开始配置ssr。\n我使用的是韩国服务器，不差钱的朋友也可以根据自己需求购置云VPS部署酸酸乳服务端。\n\n#### 部署ProxyChains代理指定程序\n\nProxyChains是一个使用方便的代理工具，它只会代理指定的程序。\n下载：\n`git clone https://github.com/rofl0r/proxychains-ng`\n安装：\n```\ncd proxychains-ng/\n./configure --prefix=/usr --sysconfdir=/etc\nmake\nsudo make install\nsudo make install-config\n```\n配置：\n将`/etc/proxychains.conf`最后一行修改为酸酸乳端口：`socks5 127.0.0.1 1080`，测试`wget`，返回网页源码：`proxychains4 wget -qO- https://www.google.com`\n\n#### http代理\n\n有些程序并不像`curl`那样能够直接支持socks5代理，有时，按照情况需要配置http代理。\n安装`privoxy`，开启全局http代理，其默认代理地址为`http://127.0.0.1:8118`：\n\n```\nsudo apt-get install privoxy\nsudo -s\necho 'forward-socks5 / 127.0.0.1:1080 .' >>/etc/privoxy/config\nsystemctl status privoxy.service #查看代理状态\nsystemctl enable privoxy.service #开机自动启动\nsystemctl start privoxy.service #开启http代理`\nsystemctl restart privoxy.service #重启http代理\n```\n测试http代理：`wget -qO- -e use_proxy=yes -e http_proxy=127.0.0.1:8118 http://google.com`\n我一般是配合sudo apt指令使用，特别是rpi-update，通过http代理可以很好的实现更新加速。\n```\nsudo http_proxy=http://127.0.0.1:8118 apt-get update\nsudo http_proxy=http://127.0.0.1:8118 apt-get upgrade\nsudo http_proxy=http://127.0.0.1:8118 apt-get dist-upgrade\nsudo http_proxy=http://127.0.0.1:8118 rpi-update\n```\n\n## 5.FRP内网穿透\n\n如果有一对带电粒子相互间量子纠缠，一个在地球而另一个被发射到月球，这两个粒子因量子纠缠效应会完全同步。FRP就是这样一个工具，它帮助我们实现通过互联网直接访问本地主机的网站或资源。安装与配置直接采用[官方指南](https://github.com/fatedier/frp/blob/master/README_zh.md)，非常明晰。\n```\nhttps://github.com/fatedier/frp/blob/master/README_zh.md\n```\n\n#### 开机自动启动FRP\n\n`sudo nano /lib/systemd/system/frps.service `\n填入以下代码并Ctrl+O保存，Ctrl+X退出\n\n```\n[Unit]\nDescription=frapc service\nAfter=network.target syslog.target\nWants=network.target\n[Service]\nType=simple\nExecStart=/your/path/frpc -c /your/path/frpc.ini\n[Install]\nWantedBy=multi-user.target\n```\n\n然后就启动frpc，输入`sudo systemctl start frpc`\n再打开自启动，输入`sudo systemctl enable frpc`\n\n如果要重启应用，可以这样，`sudo systemctl restart frpc`\n如果要停止应用，可以输入，`sudo systemctl stop frpc`\n如果要查看应用的日志，可以输入，`sudo systemctl status frpc`\n这里是以本地树莓派frpc做例子，远程服务器的frps同理。\n\n先写这么多，后面想到什么在慢慢补充……\n如果你对树莓派感兴趣，[可以阅读我的上一篇文章，关于它的硬件部署。](https://purel.in/raspberry-pi-quantum-cloud-lab-in-your-pocket-hardware/)","slug":"raspberry-pi-quantum-cloud-lab-in-your-pocket-software","published":1,"updated":"2020-03-19T00:11:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zfpkci000bloc66bt69tfx","content":"<p><img src=\"/images/2020/03/IMG_2391-scaled.jpg\" alt=\"alt text\" title=\"Title\"><br>小的时候父母工作很忙，经常把我一个人留在家里，那个时候的杀手锏就是玩具。因为我可以一直玩一整天，完全沉浸其中忘记时间。</p>\n<span id=\"more\"></span>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>那时候父母工作很忙经常把我一个人留在家里，但我一点也不觉得孤独，因为我有各式各样的玩具陪伴。每次父母出差回家都会给我带新的玩具，所以我跟其他小朋友最大的不同就是我总期待父母出差，因为这意味着我又会有新的玩具了。玩具总能令我发散思维并启发探索精神，似乎通过它们可以打开生命和宇宙的无限可能。</p>\n<p>Raspberry Pi 帮我找回了这种感觉，作为开发板它小小的身躯并不能跟各个商售的电脑比拼性能，但是却从物联网领域给了我们更多的想象空间，这正是这个世界未来的趋势。</p>\n<p>抛开华丽的图形界面拥抱Linux指令，让自己融入一种全新的语言环境，这种语言环境甚至会改变大脑的思维方式。当你越了解了计算机语言就越会发现除了吃喝拉撒睡以外，人和计算机并没有什么本质的区别，当然计算机还摆脱了妄想、分别和执念……</p>\n<h2 id=\"1-启动\"><a href=\"#1-启动\" class=\"headerlink\" title=\"1.启动\"></a>1.启动</h2><p>最终我还是把3.5寸触摸屏摘掉了，因为是在没什么用，并且会导致整台机器发热量很大，摘掉屏幕后清爽了很多，这是Pi本该有的样子～</p>\n<p>首先让我们从配置WIFI开始，SD卡根目录下新建一个名为<code>wpa_supplicant.conf</code>的文件：<br><code>sudo nano /Volumes/boot/wpa_supplicant.conf</code></p>\n<h4 id=\"写入WIFI配置\"><a href=\"#写入WIFI配置\" class=\"headerlink\" title=\"写入WIFI配置\"></a>写入WIFI配置</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">country=CN #如果非CN国家代码可能导致5G-Wifi不能被识别</span><br><span class=\"line\">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class=\"line\">update_config=1</span><br><span class=\"line\">network=&#123;</span><br><span class=\"line\">ssid=&lt;YOUR-NETWORK-NAME&gt;</span><br><span class=\"line\">psk=&lt;YOUR-NETWORK-PASSWORD&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"开启SSH\"><a href=\"#开启SSH\" class=\"headerlink\" title=\"开启SSH\"></a>开启SSH</h4><p>只需在SD卡根目录下新建一个名为ssh的空文件：<br><code>nano /Volumes/boot/ssh</code><br>在Macbookl登录树莓派的ssh时遇到了密钥冲突，<br>输入<code>ssh-keygen -R 192.168.1.121</code>清空之前该IP地址储存在本机的密钥。</p>\n<p>第一次用<code>pi</code>登录后默认密码为<code>raspberry</code>，应使用<code>sudo raspi-config</code>通过树莓派管理工具修改密码、主机名等信息，或是直接使用<code>passwd</code>修改密码。我是直接开启了root权限<code>sudo passwd root</code>然后切换为root用户<code>su root</code>。</p>\n<h4 id=\"允许ROOT权限远程登录\"><a href=\"#允许ROOT权限远程登录\" class=\"headerlink\" title=\"允许ROOT权限远程登录\"></a>允许ROOT权限远程登录</h4><p><code>sudo nano /etc/ssh/sshd_config</code><br>找到 <code>PermitRootLogin without-password</code> 前面加<code>#</code>注释掉，在下面添加<code>PermitRootLogin yes</code> 然后通过 <code>service ssh restart</code> 重启ssh服务生效。</p>\n<h2 id=\"2-环境部署\"><a href=\"#2-环境部署\" class=\"headerlink\" title=\"2.环境部署\"></a>2.环境部署</h2><p>无论是人还是机器，只有部署在合适的环境才能够发挥最大的生产力。</p>\n<h4 id=\"最适合树莓派的系统\"><a href=\"#最适合树莓派的系统\" class=\"headerlink\" title=\"最适合树莓派的系统\"></a>最适合树莓派的系统</h4><p>唯一让我纠结的是Raspbian这个64位的cpu却跑着32位系统，意味着Pi的性能大打折扣，于是开始探索在Pi上装64位Ubuntu的可能性，目前官方只给出了Server版，但这就意味着我必须手动安装图形桌面，事实证明官方的Raspbian就是最合适的，树莓派的工程师在论坛给出了切换kernel到64 bit内核的临时方案用于测试，不过这又牵扯到在终端使用<code>rpi-update</code>命令来更新系统环境。输入<code>uname -a</code>会得到以下信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Linux pi 4.19.108-v7l+ #1298 SMP Fri Mar 6 18:09:54 GMT 2020 armv7l GNU/Linux</span><br></pre></td></tr></table></figure>\n<p>通过<code>rpi-update</code>更新后在/boot/config.txt中加入<code>arm_64bit=1</code>可以切换内核到64版本，再开机时输入<code>uname -a</code> 得到<code>aarch64</code>。这个方法可以临时装一下64位的程序，不过我安装最新版本的宝塔面板仍人提示不支持32位版本而失败……</p>\n<p>这一周对于私有云的部署让我重新找到小时候的感觉，光是切换到不同的系统去体验Linux就花费了两天时间，最终还是确定用Raspbian原版系统。绕了一大圈回到原点的过程确实是必要的，它会让我知道什么是重要的，什么是需要的，以及各个系统的优势劣势。</p>\n<h4 id=\"部署LNMP网站环境\"><a href=\"#部署LNMP网站环境\" class=\"headerlink\" title=\"部署LNMP网站环境\"></a>部署LNMP网站环境</h4><p>环境安装的是Nginx+Mysql+Php7.3，从安装到运行都没出现任何问题，LNMP适合我对网站部署的全部需求。这是一套非常成熟的环境，推荐使用OneInStack一键部署lnmp环境指令。打开<a href=\"https://oneinstack.com/auto/\">OneInStack官方网站</a>自定义自己的一键部署指令非常方便。</p>\n<h2 id=\"3-部署量子云实验室\"><a href=\"#3-部署量子云实验室\" class=\"headerlink\" title=\"3.部署量子云实验室\"></a>3.部署量子云实验室</h2><h4 id=\"Nextcloud部署\"><a href=\"#Nextcloud部署\" class=\"headerlink\" title=\"Nextcloud部署\"></a>Nextcloud部署</h4><p>Nextcloud的安装没什么好记录的，之前在韩国服务器使用自动官方的安装文件setup-nextcloud.php顺利一键搞定，但由于网络原因在树莓派这样行不通，于是下载了最新版本解压安装的，依然比较顺利，除了要注意nextcloud所在目录的用户和用户组权限问题，在参阅了ngnix.conf文件后确认了ngnix的默认用户和用户组是<code>www-data</code>，于是修改了在root下创建的nextcloud目录权限后可以完美运行。</p>\n<p>使用过程中偶尔会出现502 Bad Gateway的错误提示，只有重启才能修复，于是想干脆升级到php7.4试试看。但是当升级之后发现nextcloud提示Internet Server 500错误无法打开，直觉告诉我将config.php文件修改为config1.php会得到真正信息，果然再刷新页面提示未安装php dom模块，于是敲入<code>sudo apt-get install php-xml</code>解决～</p>\n<p>关于nextcloud后台<strong>安全与设置警告</strong>检测出来的一些问题，逐一Google即可解决，比如<code>在数据表 oc_calendarobjects_props 中无法找到索引 calendarobject_calid_index。</code><br>通过SSH输入下面代码解决。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo -u www-data php occ db:add-missing-indices</span><br></pre></td></tr></table></figure>\n<p>其他的警告处理起来也是同理。关于nginx、php-fpm以及mysql的配置文件方面需要多多参考官方建议进行配置。</p>\n<h4 id=\"挂载移动硬盘\"><a href=\"#挂载移动硬盘\" class=\"headerlink\" title=\"挂载移动硬盘\"></a>挂载移动硬盘</h4><p>挂载外接硬盘出现了一个小插曲，确实应该记录下来。<br>为了打造私有云盘，我需要更大的存储空间，于是利用之前一直吃灰的1T移动硬盘作为外部挂载。<br>通过<code>fdisk -l</code> 指令检查发现我的1T硬盘挂在/dev/sda2的位置，于是通过如下指令进行重新挂载。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /media/lab #在media目录下创建lab目录</span><br><span class=\"line\">umount /dev/sda2 #卸载移动硬盘</span><br><span class=\"line\">mount /dev/sda2 /media/lab #重新挂载到刚刚创建的lab目录</span><br></pre></td></tr></table></figure>\n<p>现在它挂载到了<code>/media/lab</code>，这样便可以在nextcloud中作为外部存储添加使用了。</p>\n<h4 id=\"格式化移动硬盘到Ext4\"><a href=\"#格式化移动硬盘到Ext4\" class=\"headerlink\" title=\"格式化移动硬盘到Ext4\"></a>格式化移动硬盘到Ext4</h4><p>先查看UUID<code>sudo blkid</code> 然后格式化为Linux的格式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkfs.ext4 /dev/sda</span><br></pre></td></tr></table></figure>\n<p>linux下的格式普遍为<code>ext2</code>、<code>ext3</code>和<code>ext4</code>，并且版本高的可以向下兼容，这里我选择<code>ext4</code>，<br>之前也考虑用Windows的Fat或者MacOS的NTFS，但是发现在Pi下面接Nextcloud无法顺利使用，<br>好在Ext4在其他系统中也都有很好的识别办法，比如通过下载相应的软件实现。</p>\n<p><img src=\"/images/2020/03/7552A5D8.jpeg\" alt=\"\" title=\"blood &amp; etc/fstab\"></p>\n<p>为了让它开机自动挂载，而不是挂载到某个用户文件夹下，需要修改<code>/etc/fstab</code>文件，<br>但是由于误把PARTUUID当作UUID使用，而且设置了开机自检造成无法开机，这就是拿别人代码不检查就用所付出的代价。<br>于是拔出SD卡插入我的Macbook在/cmdlIne.txt中最后一行加入<code>“ S”</code>，再次重启顺利进入维护模式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dwc_otg.lpm_enable=0 console=serial0,115200 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait S</span><br></pre></td></tr></table></figure>\n<p>回到熟悉的命令行重新<code>sudo nano /etc/fstab</code>加入了正确的指令是这样子的，中间的空格可以随意增减但是必须要有。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UUID=c690611e-42cc-471d-bbab-f718c8961014 /media/disk ext4 defaults 0 0</span><br></pre></td></tr></table></figure>\n<p>这里备注一下,后面两个0第一个代表dump即不备份。第二个代表fsck检查的顺序0表示不检查，跳过开机检查避免不必要的麻烦。</p>\n<h2 id=\"4-科学上网\"><a href=\"#4-科学上网\" class=\"headerlink\" title=\"4.科学上网\"></a>4.科学上网</h2><p>互联网将人们的学习能力提升了N级，我们与知识之间最近的距离就是Google一下。在国内完全没有可替代的环境，作为Google、Youtube、Netflix的重度使用患者，让自己的派科学上网是非常必要的，这是与世界连接的第一步，就像是学习英文可以帮助我们更好的理解这个世界是一样的道理。</p>\n<h4 id=\"树莓派部署酸酸乳\"><a href=\"#树莓派部署酸酸乳\" class=\"headerlink\" title=\"树莓派部署酸酸乳\"></a>树莓派部署酸酸乳</h4><p>首先确认一下自己自己安装了Git。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git #ubuntu</span><br><span class=\"line\">sudo yum install git #CentOS</span><br></pre></td></tr></table></figure>\n<p>然后在具有写权限的目录执行如下命令获取到ssr脚本仓库<br><code>git clone http://git.mrwang.pw/Reed/Linux_ssr_script.git</code><br>进入刚刚克隆的仓库目录并赋予ssr脚本执行权限<br><code>cd Linux_ssr_script &amp;&amp; chmod +x ./ssr</code><br>然后将脚本放入可执行脚本的目录，这样就完成了脚本的安装<br><code>sudo mv ./ssr /usr/local/sbin/</code><br>使用时只需要输入<code>ssr</code>就会看到支持的命令列表。输入<code>ssr config</code>开始配置ssr。<br>我使用的是韩国服务器，不差钱的朋友也可以根据自己需求购置云VPS部署酸酸乳服务端。</p>\n<h4 id=\"部署ProxyChains代理指定程序\"><a href=\"#部署ProxyChains代理指定程序\" class=\"headerlink\" title=\"部署ProxyChains代理指定程序\"></a>部署ProxyChains代理指定程序</h4><p>ProxyChains是一个使用方便的代理工具，它只会代理指定的程序。<br>下载：<br><code>git clone https://github.com/rofl0r/proxychains-ng</code><br>安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd proxychains-ng/</span><br><span class=\"line\">./configure --prefix=/usr --sysconfdir=/etc</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br><span class=\"line\">sudo make install-config</span><br></pre></td></tr></table></figure>\n<p>配置：<br>将<code>/etc/proxychains.conf</code>最后一行修改为酸酸乳端口：<code>socks5 127.0.0.1 1080</code>，测试<code>wget</code>，返回网页源码：<code>proxychains4 wget -qO- https://www.google.com</code></p>\n<h4 id=\"http代理\"><a href=\"#http代理\" class=\"headerlink\" title=\"http代理\"></a>http代理</h4><p>有些程序并不像<code>curl</code>那样能够直接支持socks5代理，有时，按照情况需要配置http代理。<br>安装<code>privoxy</code>，开启全局http代理，其默认代理地址为<code>http://127.0.0.1:8118</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install privoxy</span><br><span class=\"line\">sudo -s</span><br><span class=\"line\">echo &#x27;forward-socks5 / 127.0.0.1:1080 .&#x27; &gt;&gt;/etc/privoxy/config</span><br><span class=\"line\">systemctl status privoxy.service #查看代理状态</span><br><span class=\"line\">systemctl enable privoxy.service #开机自动启动</span><br><span class=\"line\">systemctl start privoxy.service #开启http代理`</span><br><span class=\"line\">systemctl restart privoxy.service #重启http代理</span><br></pre></td></tr></table></figure>\n<p>测试http代理：<code>wget -qO- -e use_proxy=yes -e http_proxy=127.0.0.1:8118 http://google.com</code><br>我一般是配合sudo apt指令使用，特别是rpi-update，通过http代理可以很好的实现更新加速。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo http_proxy=http://127.0.0.1:8118 apt-get update</span><br><span class=\"line\">sudo http_proxy=http://127.0.0.1:8118 apt-get upgrade</span><br><span class=\"line\">sudo http_proxy=http://127.0.0.1:8118 apt-get dist-upgrade</span><br><span class=\"line\">sudo http_proxy=http://127.0.0.1:8118 rpi-update</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-FRP内网穿透\"><a href=\"#5-FRP内网穿透\" class=\"headerlink\" title=\"5.FRP内网穿透\"></a>5.FRP内网穿透</h2><p>如果有一对带电粒子相互间量子纠缠，一个在地球而另一个被发射到月球，这两个粒子因量子纠缠效应会完全同步。FRP就是这样一个工具，它帮助我们实现通过互联网直接访问本地主机的网站或资源。安装与配置直接采用<a href=\"https://github.com/fatedier/frp/blob/master/README_zh.md\">官方指南</a>，非常明晰。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/fatedier/frp/blob/master/README_zh.md</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"开机自动启动FRP\"><a href=\"#开机自动启动FRP\" class=\"headerlink\" title=\"开机自动启动FRP\"></a>开机自动启动FRP</h4><p><code>sudo nano /lib/systemd/system/frps.service</code><br>填入以下代码并Ctrl+O保存，Ctrl+X退出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=frapc service</span><br><span class=\"line\">After=network.target syslog.target</span><br><span class=\"line\">Wants=network.target</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">ExecStart=/your/path/frpc -c /your/path/frpc.ini</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>然后就启动frpc，输入<code>sudo systemctl start frpc</code><br>再打开自启动，输入<code>sudo systemctl enable frpc</code></p>\n<p>如果要重启应用，可以这样，<code>sudo systemctl restart frpc</code><br>如果要停止应用，可以输入，<code>sudo systemctl stop frpc</code><br>如果要查看应用的日志，可以输入，<code>sudo systemctl status frpc</code><br>这里是以本地树莓派frpc做例子，远程服务器的frps同理。</p>\n<p>先写这么多，后面想到什么在慢慢补充……<br>如果你对树莓派感兴趣，<a href=\"https://purel.in/raspberry-pi-quantum-cloud-lab-in-your-pocket-hardware/\">可以阅读我的上一篇文章，关于它的硬件部署。</a></p>\n","site":{"data":{"menu":[{"name":"文章","icon":"fas fa-newspaper","rows":[{"name":"分类","icon":"fas fa-folder-open","url":"categories/"},{"name":"标签","icon":"fas fa-tags","url":"tags/"},{"name":"归档","icon":"fas fa-archive","url":"archives/"}]},{"name":"邻星","icon":"fas fa-link","url":"friends/"},{"name":"关于","icon":"fas fa-info-circle","url":"about/"},{"name":"留言板","icon":"fas fa-comment-dots","url":"bbs/"},{"name":"实验室","icon":"fas fa-flask","rows":[{"name":"Pi","icon":"fab fa-raspberry-pi","url":"https://pi.purel.in"},{"name":"Cloud","icon":"fab fa-cloudversify","url":"https://cloud.purel.in/"}]}]}},"excerpt":"<p><img src=\"/images/2020/03/IMG_2391-scaled.jpg\" alt=\"alt text\" title=\"Title\"><br>小的时候父母工作很忙，经常把我一个人留在家里，那个时候的杀手锏就是玩具。因为我可以一直玩一整天，完全沉浸其中忘记时间。</p>","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>那时候父母工作很忙经常把我一个人留在家里，但我一点也不觉得孤独，因为我有各式各样的玩具陪伴。每次父母出差回家都会给我带新的玩具，所以我跟其他小朋友最大的不同就是我总期待父母出差，因为这意味着我又会有新的玩具了。玩具总能令我发散思维并启发探索精神，似乎通过它们可以打开生命和宇宙的无限可能。</p>\n<p>Raspberry Pi 帮我找回了这种感觉，作为开发板它小小的身躯并不能跟各个商售的电脑比拼性能，但是却从物联网领域给了我们更多的想象空间，这正是这个世界未来的趋势。</p>\n<p>抛开华丽的图形界面拥抱Linux指令，让自己融入一种全新的语言环境，这种语言环境甚至会改变大脑的思维方式。当你越了解了计算机语言就越会发现除了吃喝拉撒睡以外，人和计算机并没有什么本质的区别，当然计算机还摆脱了妄想、分别和执念……</p>\n<h2 id=\"1-启动\"><a href=\"#1-启动\" class=\"headerlink\" title=\"1.启动\"></a>1.启动</h2><p>最终我还是把3.5寸触摸屏摘掉了，因为是在没什么用，并且会导致整台机器发热量很大，摘掉屏幕后清爽了很多，这是Pi本该有的样子～</p>\n<p>首先让我们从配置WIFI开始，SD卡根目录下新建一个名为<code>wpa_supplicant.conf</code>的文件：<br><code>sudo nano /Volumes/boot/wpa_supplicant.conf</code></p>\n<h4 id=\"写入WIFI配置\"><a href=\"#写入WIFI配置\" class=\"headerlink\" title=\"写入WIFI配置\"></a>写入WIFI配置</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">country=CN #如果非CN国家代码可能导致5G-Wifi不能被识别</span><br><span class=\"line\">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class=\"line\">update_config=1</span><br><span class=\"line\">network=&#123;</span><br><span class=\"line\">ssid=&lt;YOUR-NETWORK-NAME&gt;</span><br><span class=\"line\">psk=&lt;YOUR-NETWORK-PASSWORD&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"开启SSH\"><a href=\"#开启SSH\" class=\"headerlink\" title=\"开启SSH\"></a>开启SSH</h4><p>只需在SD卡根目录下新建一个名为ssh的空文件：<br><code>nano /Volumes/boot/ssh</code><br>在Macbookl登录树莓派的ssh时遇到了密钥冲突，<br>输入<code>ssh-keygen -R 192.168.1.121</code>清空之前该IP地址储存在本机的密钥。</p>\n<p>第一次用<code>pi</code>登录后默认密码为<code>raspberry</code>，应使用<code>sudo raspi-config</code>通过树莓派管理工具修改密码、主机名等信息，或是直接使用<code>passwd</code>修改密码。我是直接开启了root权限<code>sudo passwd root</code>然后切换为root用户<code>su root</code>。</p>\n<h4 id=\"允许ROOT权限远程登录\"><a href=\"#允许ROOT权限远程登录\" class=\"headerlink\" title=\"允许ROOT权限远程登录\"></a>允许ROOT权限远程登录</h4><p><code>sudo nano /etc/ssh/sshd_config</code><br>找到 <code>PermitRootLogin without-password</code> 前面加<code>#</code>注释掉，在下面添加<code>PermitRootLogin yes</code> 然后通过 <code>service ssh restart</code> 重启ssh服务生效。</p>\n<h2 id=\"2-环境部署\"><a href=\"#2-环境部署\" class=\"headerlink\" title=\"2.环境部署\"></a>2.环境部署</h2><p>无论是人还是机器，只有部署在合适的环境才能够发挥最大的生产力。</p>\n<h4 id=\"最适合树莓派的系统\"><a href=\"#最适合树莓派的系统\" class=\"headerlink\" title=\"最适合树莓派的系统\"></a>最适合树莓派的系统</h4><p>唯一让我纠结的是Raspbian这个64位的cpu却跑着32位系统，意味着Pi的性能大打折扣，于是开始探索在Pi上装64位Ubuntu的可能性，目前官方只给出了Server版，但这就意味着我必须手动安装图形桌面，事实证明官方的Raspbian就是最合适的，树莓派的工程师在论坛给出了切换kernel到64 bit内核的临时方案用于测试，不过这又牵扯到在终端使用<code>rpi-update</code>命令来更新系统环境。输入<code>uname -a</code>会得到以下信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Linux pi 4.19.108-v7l+ #1298 SMP Fri Mar 6 18:09:54 GMT 2020 armv7l GNU/Linux</span><br></pre></td></tr></table></figure>\n<p>通过<code>rpi-update</code>更新后在/boot/config.txt中加入<code>arm_64bit=1</code>可以切换内核到64版本，再开机时输入<code>uname -a</code> 得到<code>aarch64</code>。这个方法可以临时装一下64位的程序，不过我安装最新版本的宝塔面板仍人提示不支持32位版本而失败……</p>\n<p>这一周对于私有云的部署让我重新找到小时候的感觉，光是切换到不同的系统去体验Linux就花费了两天时间，最终还是确定用Raspbian原版系统。绕了一大圈回到原点的过程确实是必要的，它会让我知道什么是重要的，什么是需要的，以及各个系统的优势劣势。</p>\n<h4 id=\"部署LNMP网站环境\"><a href=\"#部署LNMP网站环境\" class=\"headerlink\" title=\"部署LNMP网站环境\"></a>部署LNMP网站环境</h4><p>环境安装的是Nginx+Mysql+Php7.3，从安装到运行都没出现任何问题，LNMP适合我对网站部署的全部需求。这是一套非常成熟的环境，推荐使用OneInStack一键部署lnmp环境指令。打开<a href=\"https://oneinstack.com/auto/\">OneInStack官方网站</a>自定义自己的一键部署指令非常方便。</p>\n<h2 id=\"3-部署量子云实验室\"><a href=\"#3-部署量子云实验室\" class=\"headerlink\" title=\"3.部署量子云实验室\"></a>3.部署量子云实验室</h2><h4 id=\"Nextcloud部署\"><a href=\"#Nextcloud部署\" class=\"headerlink\" title=\"Nextcloud部署\"></a>Nextcloud部署</h4><p>Nextcloud的安装没什么好记录的，之前在韩国服务器使用自动官方的安装文件setup-nextcloud.php顺利一键搞定，但由于网络原因在树莓派这样行不通，于是下载了最新版本解压安装的，依然比较顺利，除了要注意nextcloud所在目录的用户和用户组权限问题，在参阅了ngnix.conf文件后确认了ngnix的默认用户和用户组是<code>www-data</code>，于是修改了在root下创建的nextcloud目录权限后可以完美运行。</p>\n<p>使用过程中偶尔会出现502 Bad Gateway的错误提示，只有重启才能修复，于是想干脆升级到php7.4试试看。但是当升级之后发现nextcloud提示Internet Server 500错误无法打开，直觉告诉我将config.php文件修改为config1.php会得到真正信息，果然再刷新页面提示未安装php dom模块，于是敲入<code>sudo apt-get install php-xml</code>解决～</p>\n<p>关于nextcloud后台<strong>安全与设置警告</strong>检测出来的一些问题，逐一Google即可解决，比如<code>在数据表 oc_calendarobjects_props 中无法找到索引 calendarobject_calid_index。</code><br>通过SSH输入下面代码解决。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo -u www-data php occ db:add-missing-indices</span><br></pre></td></tr></table></figure>\n<p>其他的警告处理起来也是同理。关于nginx、php-fpm以及mysql的配置文件方面需要多多参考官方建议进行配置。</p>\n<h4 id=\"挂载移动硬盘\"><a href=\"#挂载移动硬盘\" class=\"headerlink\" title=\"挂载移动硬盘\"></a>挂载移动硬盘</h4><p>挂载外接硬盘出现了一个小插曲，确实应该记录下来。<br>为了打造私有云盘，我需要更大的存储空间，于是利用之前一直吃灰的1T移动硬盘作为外部挂载。<br>通过<code>fdisk -l</code> 指令检查发现我的1T硬盘挂在/dev/sda2的位置，于是通过如下指令进行重新挂载。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /media/lab #在media目录下创建lab目录</span><br><span class=\"line\">umount /dev/sda2 #卸载移动硬盘</span><br><span class=\"line\">mount /dev/sda2 /media/lab #重新挂载到刚刚创建的lab目录</span><br></pre></td></tr></table></figure>\n<p>现在它挂载到了<code>/media/lab</code>，这样便可以在nextcloud中作为外部存储添加使用了。</p>\n<h4 id=\"格式化移动硬盘到Ext4\"><a href=\"#格式化移动硬盘到Ext4\" class=\"headerlink\" title=\"格式化移动硬盘到Ext4\"></a>格式化移动硬盘到Ext4</h4><p>先查看UUID<code>sudo blkid</code> 然后格式化为Linux的格式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkfs.ext4 /dev/sda</span><br></pre></td></tr></table></figure>\n<p>linux下的格式普遍为<code>ext2</code>、<code>ext3</code>和<code>ext4</code>，并且版本高的可以向下兼容，这里我选择<code>ext4</code>，<br>之前也考虑用Windows的Fat或者MacOS的NTFS，但是发现在Pi下面接Nextcloud无法顺利使用，<br>好在Ext4在其他系统中也都有很好的识别办法，比如通过下载相应的软件实现。</p>\n<p><img src=\"/images/2020/03/7552A5D8.jpeg\" alt=\"\" title=\"blood &amp; etc/fstab\"></p>\n<p>为了让它开机自动挂载，而不是挂载到某个用户文件夹下，需要修改<code>/etc/fstab</code>文件，<br>但是由于误把PARTUUID当作UUID使用，而且设置了开机自检造成无法开机，这就是拿别人代码不检查就用所付出的代价。<br>于是拔出SD卡插入我的Macbook在/cmdlIne.txt中最后一行加入<code>“ S”</code>，再次重启顺利进入维护模式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dwc_otg.lpm_enable=0 console=serial0,115200 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait S</span><br></pre></td></tr></table></figure>\n<p>回到熟悉的命令行重新<code>sudo nano /etc/fstab</code>加入了正确的指令是这样子的，中间的空格可以随意增减但是必须要有。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UUID=c690611e-42cc-471d-bbab-f718c8961014 /media/disk ext4 defaults 0 0</span><br></pre></td></tr></table></figure>\n<p>这里备注一下,后面两个0第一个代表dump即不备份。第二个代表fsck检查的顺序0表示不检查，跳过开机检查避免不必要的麻烦。</p>\n<h2 id=\"4-科学上网\"><a href=\"#4-科学上网\" class=\"headerlink\" title=\"4.科学上网\"></a>4.科学上网</h2><p>互联网将人们的学习能力提升了N级，我们与知识之间最近的距离就是Google一下。在国内完全没有可替代的环境，作为Google、Youtube、Netflix的重度使用患者，让自己的派科学上网是非常必要的，这是与世界连接的第一步，就像是学习英文可以帮助我们更好的理解这个世界是一样的道理。</p>\n<h4 id=\"树莓派部署酸酸乳\"><a href=\"#树莓派部署酸酸乳\" class=\"headerlink\" title=\"树莓派部署酸酸乳\"></a>树莓派部署酸酸乳</h4><p>首先确认一下自己自己安装了Git。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git #ubuntu</span><br><span class=\"line\">sudo yum install git #CentOS</span><br></pre></td></tr></table></figure>\n<p>然后在具有写权限的目录执行如下命令获取到ssr脚本仓库<br><code>git clone http://git.mrwang.pw/Reed/Linux_ssr_script.git</code><br>进入刚刚克隆的仓库目录并赋予ssr脚本执行权限<br><code>cd Linux_ssr_script &amp;&amp; chmod +x ./ssr</code><br>然后将脚本放入可执行脚本的目录，这样就完成了脚本的安装<br><code>sudo mv ./ssr /usr/local/sbin/</code><br>使用时只需要输入<code>ssr</code>就会看到支持的命令列表。输入<code>ssr config</code>开始配置ssr。<br>我使用的是韩国服务器，不差钱的朋友也可以根据自己需求购置云VPS部署酸酸乳服务端。</p>\n<h4 id=\"部署ProxyChains代理指定程序\"><a href=\"#部署ProxyChains代理指定程序\" class=\"headerlink\" title=\"部署ProxyChains代理指定程序\"></a>部署ProxyChains代理指定程序</h4><p>ProxyChains是一个使用方便的代理工具，它只会代理指定的程序。<br>下载：<br><code>git clone https://github.com/rofl0r/proxychains-ng</code><br>安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd proxychains-ng/</span><br><span class=\"line\">./configure --prefix=/usr --sysconfdir=/etc</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br><span class=\"line\">sudo make install-config</span><br></pre></td></tr></table></figure>\n<p>配置：<br>将<code>/etc/proxychains.conf</code>最后一行修改为酸酸乳端口：<code>socks5 127.0.0.1 1080</code>，测试<code>wget</code>，返回网页源码：<code>proxychains4 wget -qO- https://www.google.com</code></p>\n<h4 id=\"http代理\"><a href=\"#http代理\" class=\"headerlink\" title=\"http代理\"></a>http代理</h4><p>有些程序并不像<code>curl</code>那样能够直接支持socks5代理，有时，按照情况需要配置http代理。<br>安装<code>privoxy</code>，开启全局http代理，其默认代理地址为<code>http://127.0.0.1:8118</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install privoxy</span><br><span class=\"line\">sudo -s</span><br><span class=\"line\">echo &#x27;forward-socks5 / 127.0.0.1:1080 .&#x27; &gt;&gt;/etc/privoxy/config</span><br><span class=\"line\">systemctl status privoxy.service #查看代理状态</span><br><span class=\"line\">systemctl enable privoxy.service #开机自动启动</span><br><span class=\"line\">systemctl start privoxy.service #开启http代理`</span><br><span class=\"line\">systemctl restart privoxy.service #重启http代理</span><br></pre></td></tr></table></figure>\n<p>测试http代理：<code>wget -qO- -e use_proxy=yes -e http_proxy=127.0.0.1:8118 http://google.com</code><br>我一般是配合sudo apt指令使用，特别是rpi-update，通过http代理可以很好的实现更新加速。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo http_proxy=http://127.0.0.1:8118 apt-get update</span><br><span class=\"line\">sudo http_proxy=http://127.0.0.1:8118 apt-get upgrade</span><br><span class=\"line\">sudo http_proxy=http://127.0.0.1:8118 apt-get dist-upgrade</span><br><span class=\"line\">sudo http_proxy=http://127.0.0.1:8118 rpi-update</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-FRP内网穿透\"><a href=\"#5-FRP内网穿透\" class=\"headerlink\" title=\"5.FRP内网穿透\"></a>5.FRP内网穿透</h2><p>如果有一对带电粒子相互间量子纠缠，一个在地球而另一个被发射到月球，这两个粒子因量子纠缠效应会完全同步。FRP就是这样一个工具，它帮助我们实现通过互联网直接访问本地主机的网站或资源。安装与配置直接采用<a href=\"https://github.com/fatedier/frp/blob/master/README_zh.md\">官方指南</a>，非常明晰。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/fatedier/frp/blob/master/README_zh.md</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"开机自动启动FRP\"><a href=\"#开机自动启动FRP\" class=\"headerlink\" title=\"开机自动启动FRP\"></a>开机自动启动FRP</h4><p><code>sudo nano /lib/systemd/system/frps.service</code><br>填入以下代码并Ctrl+O保存，Ctrl+X退出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=frapc service</span><br><span class=\"line\">After=network.target syslog.target</span><br><span class=\"line\">Wants=network.target</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">ExecStart=/your/path/frpc -c /your/path/frpc.ini</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>然后就启动frpc，输入<code>sudo systemctl start frpc</code><br>再打开自启动，输入<code>sudo systemctl enable frpc</code></p>\n<p>如果要重启应用，可以这样，<code>sudo systemctl restart frpc</code><br>如果要停止应用，可以输入，<code>sudo systemctl stop frpc</code><br>如果要查看应用的日志，可以输入，<code>sudo systemctl status frpc</code><br>这里是以本地树莓派frpc做例子，远程服务器的frps同理。</p>\n<p>先写这么多，后面想到什么在慢慢补充……<br>如果你对树莓派感兴趣，<a href=\"https://purel.in/raspberry-pi-quantum-cloud-lab-in-your-pocket-hardware/\">可以阅读我的上一篇文章，关于它的硬件部署。</a></p>"},{"title":"树莓派：安装0.96寸SPI接口SSD1306屏幕","type":"post","date":"2020-04-03T21:48:32.000Z","_content":"![](/images/2020/04/spi-night.jpg)\n当这块小屏幕在夜里散发着光芒，你看到它便能回忆起整个部署的过程……\n<!--more-->\n## 1. 硬件的选配\n\n淘宝搜索ssd1306 spi选一家十块钱左右有眼缘的，为什么选择spi的7针而不是i2c简单的4针呢？因为i2c刷新率只有10fps，而spi高达64-364fps。然后再加1.5元买40根杜邦线，虽然用不了这么多，但是为了以后扩展GPIO接口做备胎，然后apt-get安装Adafruit的1306库，对example代码稍事调整，然后在cmd输入一条python指令成功点亮….\n\n## 2. 连接GPIO排线\n\nls /dev/spidev* #如果目录为空，可能之前安装过spi屏幕占用了接口，正常应该显示 /dev/spidev0.0 /dev/spidev0.1 查看config.txt文件是否有dtoverlay开头的命令，如果有就加#注释掉。还可以通过lsmod #查看是否开启了spi模块。\n\n![](https://purel.in/wp-content/uploads/2020/04/spi.bmp)把模块的引脚接到树莓派的GPIO上， 需要注意这里要分清GPIO引脚号是BCM编号还是实际编号。GND脚和树莓派的GND连接；VCC接到3.3V脚；D0接到树莓派的SCLK脚（第23号脚），即BCM.11脚；D1接到MOSI脚（第19号脚），即BCM.10；RES接到BCM.17脚，即第11号脚；DC接到BCM.22脚，即第15号脚；CS接到CE0脚（第24号脚）。总之，除了RES和DC是可以任意指定GPIO口，其他引脚是必须和树莓派上的指定脚连接的。\n\n## 3. 安装软件\n#### 3.1 安装ssd1306库\n```\nsudo apt-get install git\ngit clone https://github.com/adafruit/Adafruit_Python_SSD1306.git\ncd Adafruit_Python_SSD1306\nsudo python setup.py install\n```\n#### 3.2 创建一个py文件\n\n我希望用这块屏幕显示本机IP地址/CPU内存/磁盘使用情况，用以下代码创建一个文件命名为sys_info.py。\n\n```\nimport time\nimport Adafruit_GPIO.SPI as SPI\nimport Adafruit_SSD1306\nfrom PIL import Image\nfrom PIL import ImageDraw\nfrom PIL import ImageFont\nimport subprocess\n\n# Raspberry Pi pin configuration:\nRST = 17     # 注意这里填BCM标准的针脚号\n# Note the following are only used with SPI:\nDC = 22\nSPI_PORT = 0\nSPI_DEVICE = 0\n\n# 128x64 display with hardware SPI:\ndisp = Adafruit_SSD1306.SSD1306_128_64(rst=RST, dc=DC, spi=SPI.SpiDev(SPI_PORT, SPI_DEVICE, max_speed_hz=8000000))\n\n# Initialize library.\ndisp.begin()\n\n# Clear display.\ndisp.clear()\ndisp.display()\n\n# Create blank image for drawing.\n# Make sure to create image with mode '1' for 1-bit color.\nwidth = disp.width\nheight = disp.height\nimage = Image.new('1', (width, height))\n\n# Get drawing object to draw on image.\ndraw = ImageDraw.Draw(image)\n\n# Draw a black filled box to clear the image.\ndraw.rectangle((0,0,width,height), outline=0, fill=0)\n\n# Draw some shapes.\n# First define some constants to allow easy resizing of shapes.\npadding = -2\ntop = padding\nbottom = height-padding\n# Move left to right keeping track of the current x position for drawing shapes.\nx = 0\n\n\n# Load default font.\nfont = ImageFont.load_default()\n\n# Alternatively load a TTF font.  Make sure the .ttf font file is in the same directory as the python script!\n# Some other nice fonts to try: http://www.dafont.com/bitmap.php\n# font = ImageFont.truetype('Minecraftia.ttf', 8)\n\nwhile True:\n\n    # Draw a black filled box to clear the image.\n    draw.rectangle((0,0,width,height), outline=0, fill=0)\n\n    # Shell scripts for system monitoring from here : https://unix.stackexchange.com/questions/119126/command-to-display-memory-usage-disk-usage-and-cpu-load\n    cmd = hostname -I | cut -d\\' \\' -f1\n    IP = subprocess.check_output(cmd, shell = True )\n    cmd = top -bn1 | grep load | awk '{printf \\CPU: %.2f\\, $(NF-2)}'\n    CPU = subprocess.check_output(cmd, shell = True )\n    cmd = free -m | awk 'NR==2{printf \\Mem: %s/%sMB %.2f%%\\, $3,$2,$3*100/$2 }'\n    MemUsage = subprocess.check_output(cmd, shell = True )\n    cmd = df -h | awk '$NF==\\/\\{printf \\Disk: %d/%dGB %s\\, $3,$2,$5}'\n    Disk = subprocess.check_output(cmd, shell = True )\n    cmd = vcgencmd measure_temp\n    Temp = subprocess.check_output(cmd, shell = True )\n\n  # Return CPU temperature as a character string\n\n    # Write two lines of text.\n\n    draw.text((x, top),       IP:  + str(IP),  font=font, fill=255)\n    draw.text((x, top+9),     str(CPU), font=font, fill=255)\n    draw.text((x, top+18),    str(MemUsage),  font=font, fill=255)\n    draw.text((x, top+27),    str(Disk),  font=font, fill=255)\n    draw.text((60, top+9),    str(Temp), font=font, fill=255)\n\n    # Display image.\n    disp.image(image)\n    disp.display()\n\t# 设置屏幕刷新间隔秒数，与CPU损耗相关\n    time.sleep(5)\n```\n\n通过 `python sys_info.py` 运行它，如果提示却什么模块可以直接安装再执行，比如我这边缺了utmp模块，输入 `apt-get install python-utmp` 来进行安装。\n\n再次运行python sys_info.py成功点亮～\n这里值得注意的是`time.sleep(5)`参数，起初的demo值默认为`.1`，这意味着每0.1秒就刷新一次屏幕，不管我是否注释掉这一行CPU负载都会迅速提升。所以我的建议值是5秒，这足够我们获取到刷新的信息而不烦躁，并且有效降低树莓派的CPU复杂。\n\n![](/images/2020/04/sys_info.jpg \"Processed with VSCO with a8 preset\")\n## 4. 设置开机启动\n\n进入目录 /lib/systemd/system 创建`sys_info.service`文件\n\n```\n[Unit]\nDescription=sys——info service\nAfter=network.target syslog.target\nWants=network.target\n[Service]\nType=simple\n启动服务的命令（此处写你的frps的实际安装目录）\nExecStart=python /root/sys_info.py\n[Install]\nWantedBy=multi-user.target`\n```\n#### 4.1 启动 sys_info\n`sudo systemctl start sys_info`\n#### 4.1 设为开机自启动\n`sudo systemctl enable sys_info`","source":"_posts/2020-04-04-raspberry-pi-install-0-96-inch-spi-interface-ssd1306-screen.md","raw":"---\ntitle: 树莓派：安装0.96寸SPI接口SSD1306屏幕\ntype: post\ndate: 2020-04-04T05:48:32+00:00\ncategories: [树梅派]\ntags: [树梅派,ssd1306,LCD,SPI,Pi,Python,驱动]\n---\n![](/images/2020/04/spi-night.jpg)\n当这块小屏幕在夜里散发着光芒，你看到它便能回忆起整个部署的过程……\n<!--more-->\n## 1. 硬件的选配\n\n淘宝搜索ssd1306 spi选一家十块钱左右有眼缘的，为什么选择spi的7针而不是i2c简单的4针呢？因为i2c刷新率只有10fps，而spi高达64-364fps。然后再加1.5元买40根杜邦线，虽然用不了这么多，但是为了以后扩展GPIO接口做备胎，然后apt-get安装Adafruit的1306库，对example代码稍事调整，然后在cmd输入一条python指令成功点亮….\n\n## 2. 连接GPIO排线\n\nls /dev/spidev* #如果目录为空，可能之前安装过spi屏幕占用了接口，正常应该显示 /dev/spidev0.0 /dev/spidev0.1 查看config.txt文件是否有dtoverlay开头的命令，如果有就加#注释掉。还可以通过lsmod #查看是否开启了spi模块。\n\n![](https://purel.in/wp-content/uploads/2020/04/spi.bmp)把模块的引脚接到树莓派的GPIO上， 需要注意这里要分清GPIO引脚号是BCM编号还是实际编号。GND脚和树莓派的GND连接；VCC接到3.3V脚；D0接到树莓派的SCLK脚（第23号脚），即BCM.11脚；D1接到MOSI脚（第19号脚），即BCM.10；RES接到BCM.17脚，即第11号脚；DC接到BCM.22脚，即第15号脚；CS接到CE0脚（第24号脚）。总之，除了RES和DC是可以任意指定GPIO口，其他引脚是必须和树莓派上的指定脚连接的。\n\n## 3. 安装软件\n#### 3.1 安装ssd1306库\n```\nsudo apt-get install git\ngit clone https://github.com/adafruit/Adafruit_Python_SSD1306.git\ncd Adafruit_Python_SSD1306\nsudo python setup.py install\n```\n#### 3.2 创建一个py文件\n\n我希望用这块屏幕显示本机IP地址/CPU内存/磁盘使用情况，用以下代码创建一个文件命名为sys_info.py。\n\n```\nimport time\nimport Adafruit_GPIO.SPI as SPI\nimport Adafruit_SSD1306\nfrom PIL import Image\nfrom PIL import ImageDraw\nfrom PIL import ImageFont\nimport subprocess\n\n# Raspberry Pi pin configuration:\nRST = 17     # 注意这里填BCM标准的针脚号\n# Note the following are only used with SPI:\nDC = 22\nSPI_PORT = 0\nSPI_DEVICE = 0\n\n# 128x64 display with hardware SPI:\ndisp = Adafruit_SSD1306.SSD1306_128_64(rst=RST, dc=DC, spi=SPI.SpiDev(SPI_PORT, SPI_DEVICE, max_speed_hz=8000000))\n\n# Initialize library.\ndisp.begin()\n\n# Clear display.\ndisp.clear()\ndisp.display()\n\n# Create blank image for drawing.\n# Make sure to create image with mode '1' for 1-bit color.\nwidth = disp.width\nheight = disp.height\nimage = Image.new('1', (width, height))\n\n# Get drawing object to draw on image.\ndraw = ImageDraw.Draw(image)\n\n# Draw a black filled box to clear the image.\ndraw.rectangle((0,0,width,height), outline=0, fill=0)\n\n# Draw some shapes.\n# First define some constants to allow easy resizing of shapes.\npadding = -2\ntop = padding\nbottom = height-padding\n# Move left to right keeping track of the current x position for drawing shapes.\nx = 0\n\n\n# Load default font.\nfont = ImageFont.load_default()\n\n# Alternatively load a TTF font.  Make sure the .ttf font file is in the same directory as the python script!\n# Some other nice fonts to try: http://www.dafont.com/bitmap.php\n# font = ImageFont.truetype('Minecraftia.ttf', 8)\n\nwhile True:\n\n    # Draw a black filled box to clear the image.\n    draw.rectangle((0,0,width,height), outline=0, fill=0)\n\n    # Shell scripts for system monitoring from here : https://unix.stackexchange.com/questions/119126/command-to-display-memory-usage-disk-usage-and-cpu-load\n    cmd = hostname -I | cut -d\\' \\' -f1\n    IP = subprocess.check_output(cmd, shell = True )\n    cmd = top -bn1 | grep load | awk '{printf \\CPU: %.2f\\, $(NF-2)}'\n    CPU = subprocess.check_output(cmd, shell = True )\n    cmd = free -m | awk 'NR==2{printf \\Mem: %s/%sMB %.2f%%\\, $3,$2,$3*100/$2 }'\n    MemUsage = subprocess.check_output(cmd, shell = True )\n    cmd = df -h | awk '$NF==\\/\\{printf \\Disk: %d/%dGB %s\\, $3,$2,$5}'\n    Disk = subprocess.check_output(cmd, shell = True )\n    cmd = vcgencmd measure_temp\n    Temp = subprocess.check_output(cmd, shell = True )\n\n  # Return CPU temperature as a character string\n\n    # Write two lines of text.\n\n    draw.text((x, top),       IP:  + str(IP),  font=font, fill=255)\n    draw.text((x, top+9),     str(CPU), font=font, fill=255)\n    draw.text((x, top+18),    str(MemUsage),  font=font, fill=255)\n    draw.text((x, top+27),    str(Disk),  font=font, fill=255)\n    draw.text((60, top+9),    str(Temp), font=font, fill=255)\n\n    # Display image.\n    disp.image(image)\n    disp.display()\n\t# 设置屏幕刷新间隔秒数，与CPU损耗相关\n    time.sleep(5)\n```\n\n通过 `python sys_info.py` 运行它，如果提示却什么模块可以直接安装再执行，比如我这边缺了utmp模块，输入 `apt-get install python-utmp` 来进行安装。\n\n再次运行python sys_info.py成功点亮～\n这里值得注意的是`time.sleep(5)`参数，起初的demo值默认为`.1`，这意味着每0.1秒就刷新一次屏幕，不管我是否注释掉这一行CPU负载都会迅速提升。所以我的建议值是5秒，这足够我们获取到刷新的信息而不烦躁，并且有效降低树莓派的CPU复杂。\n\n![](/images/2020/04/sys_info.jpg \"Processed with VSCO with a8 preset\")\n## 4. 设置开机启动\n\n进入目录 /lib/systemd/system 创建`sys_info.service`文件\n\n```\n[Unit]\nDescription=sys——info service\nAfter=network.target syslog.target\nWants=network.target\n[Service]\nType=simple\n启动服务的命令（此处写你的frps的实际安装目录）\nExecStart=python /root/sys_info.py\n[Install]\nWantedBy=multi-user.target`\n```\n#### 4.1 启动 sys_info\n`sudo systemctl start sys_info`\n#### 4.1 设为开机自启动\n`sudo systemctl enable sys_info`","slug":"raspberry-pi-install-0-96-inch-spi-interface-ssd1306-screen","published":1,"updated":"2020-04-03T21:48:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zfpkcl000floc62wfeemu0","content":"<p><img src=\"/images/2020/04/spi-night.jpg\" alt=\"\"><br>当这块小屏幕在夜里散发着光芒，你看到它便能回忆起整个部署的过程……</p>\n<span id=\"more\"></span>\n<h2 id=\"1-硬件的选配\"><a href=\"#1-硬件的选配\" class=\"headerlink\" title=\"1. 硬件的选配\"></a>1. 硬件的选配</h2><p>淘宝搜索ssd1306 spi选一家十块钱左右有眼缘的，为什么选择spi的7针而不是i2c简单的4针呢？因为i2c刷新率只有10fps，而spi高达64-364fps。然后再加1.5元买40根杜邦线，虽然用不了这么多，但是为了以后扩展GPIO接口做备胎，然后apt-get安装Adafruit的1306库，对example代码稍事调整，然后在cmd输入一条python指令成功点亮….</p>\n<h2 id=\"2-连接GPIO排线\"><a href=\"#2-连接GPIO排线\" class=\"headerlink\" title=\"2. 连接GPIO排线\"></a>2. 连接GPIO排线</h2><p>ls /dev/spidev* #如果目录为空，可能之前安装过spi屏幕占用了接口，正常应该显示 /dev/spidev0.0 /dev/spidev0.1 查看config.txt文件是否有dtoverlay开头的命令，如果有就加#注释掉。还可以通过lsmod #查看是否开启了spi模块。</p>\n<p><img src=\"https://purel.in/wp-content/uploads/2020/04/spi.bmp\" alt=\"\">把模块的引脚接到树莓派的GPIO上， 需要注意这里要分清GPIO引脚号是BCM编号还是实际编号。GND脚和树莓派的GND连接；VCC接到3.3V脚；D0接到树莓派的SCLK脚（第23号脚），即BCM.11脚；D1接到MOSI脚（第19号脚），即BCM.10；RES接到BCM.17脚，即第11号脚；DC接到BCM.22脚，即第15号脚；CS接到CE0脚（第24号脚）。总之，除了RES和DC是可以任意指定GPIO口，其他引脚是必须和树莓派上的指定脚连接的。</p>\n<h2 id=\"3-安装软件\"><a href=\"#3-安装软件\" class=\"headerlink\" title=\"3. 安装软件\"></a>3. 安装软件</h2><h4 id=\"3-1-安装ssd1306库\"><a href=\"#3-1-安装ssd1306库\" class=\"headerlink\" title=\"3.1 安装ssd1306库\"></a>3.1 安装ssd1306库</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br><span class=\"line\">git clone https://github.com/adafruit/Adafruit_Python_SSD1306.git</span><br><span class=\"line\">cd Adafruit_Python_SSD1306</span><br><span class=\"line\">sudo python setup.py install</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-2-创建一个py文件\"><a href=\"#3-2-创建一个py文件\" class=\"headerlink\" title=\"3.2 创建一个py文件\"></a>3.2 创建一个py文件</h4><p>我希望用这块屏幕显示本机IP地址/CPU内存/磁盘使用情况，用以下代码创建一个文件命名为sys_info.py。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">import Adafruit_GPIO.SPI as SPI</span><br><span class=\"line\">import Adafruit_SSD1306</span><br><span class=\"line\">from PIL import Image</span><br><span class=\"line\">from PIL import ImageDraw</span><br><span class=\"line\">from PIL import ImageFont</span><br><span class=\"line\">import subprocess</span><br><span class=\"line\"></span><br><span class=\"line\"># Raspberry Pi pin configuration:</span><br><span class=\"line\">RST = 17     # 注意这里填BCM标准的针脚号</span><br><span class=\"line\"># Note the following are only used with SPI:</span><br><span class=\"line\">DC = 22</span><br><span class=\"line\">SPI_PORT = 0</span><br><span class=\"line\">SPI_DEVICE = 0</span><br><span class=\"line\"></span><br><span class=\"line\"># 128x64 display with hardware SPI:</span><br><span class=\"line\">disp = Adafruit_SSD1306.SSD1306_128_64(rst=RST, dc=DC, spi=SPI.SpiDev(SPI_PORT, SPI_DEVICE, max_speed_hz=8000000))</span><br><span class=\"line\"></span><br><span class=\"line\"># Initialize library.</span><br><span class=\"line\">disp.begin()</span><br><span class=\"line\"></span><br><span class=\"line\"># Clear display.</span><br><span class=\"line\">disp.clear()</span><br><span class=\"line\">disp.display()</span><br><span class=\"line\"></span><br><span class=\"line\"># Create blank image for drawing.</span><br><span class=\"line\"># Make sure to create image with mode &#x27;1&#x27; for 1-bit color.</span><br><span class=\"line\">width = disp.width</span><br><span class=\"line\">height = disp.height</span><br><span class=\"line\">image = Image.new(&#x27;1&#x27;, (width, height))</span><br><span class=\"line\"></span><br><span class=\"line\"># Get drawing object to draw on image.</span><br><span class=\"line\">draw = ImageDraw.Draw(image)</span><br><span class=\"line\"></span><br><span class=\"line\"># Draw a black filled box to clear the image.</span><br><span class=\"line\">draw.rectangle((0,0,width,height), outline=0, fill=0)</span><br><span class=\"line\"></span><br><span class=\"line\"># Draw some shapes.</span><br><span class=\"line\"># First define some constants to allow easy resizing of shapes.</span><br><span class=\"line\">padding = -2</span><br><span class=\"line\">top = padding</span><br><span class=\"line\">bottom = height-padding</span><br><span class=\"line\"># Move left to right keeping track of the current x position for drawing shapes.</span><br><span class=\"line\">x = 0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># Load default font.</span><br><span class=\"line\">font = ImageFont.load_default()</span><br><span class=\"line\"></span><br><span class=\"line\"># Alternatively load a TTF font.  Make sure the .ttf font file is in the same directory as the python script!</span><br><span class=\"line\"># Some other nice fonts to try: http://www.dafont.com/bitmap.php</span><br><span class=\"line\"># font = ImageFont.truetype(&#x27;Minecraftia.ttf&#x27;, 8)</span><br><span class=\"line\"></span><br><span class=\"line\">while True:</span><br><span class=\"line\"></span><br><span class=\"line\">    # Draw a black filled box to clear the image.</span><br><span class=\"line\">    draw.rectangle((0,0,width,height), outline=0, fill=0)</span><br><span class=\"line\"></span><br><span class=\"line\">    # Shell scripts for system monitoring from here : https://unix.stackexchange.com/questions/119126/command-to-display-memory-usage-disk-usage-and-cpu-load</span><br><span class=\"line\">    cmd = hostname -I | cut -d\\&#x27; \\&#x27; -f1</span><br><span class=\"line\">    IP = subprocess.check_output(cmd, shell = True )</span><br><span class=\"line\">    cmd = top -bn1 | grep load | awk &#x27;&#123;printf \\CPU: %.2f\\, $(NF-2)&#125;&#x27;</span><br><span class=\"line\">    CPU = subprocess.check_output(cmd, shell = True )</span><br><span class=\"line\">    cmd = free -m | awk &#x27;NR==2&#123;printf \\Mem: %s/%sMB %.2f%%\\, $3,$2,$3*100/$2 &#125;&#x27;</span><br><span class=\"line\">    MemUsage = subprocess.check_output(cmd, shell = True )</span><br><span class=\"line\">    cmd = df -h | awk &#x27;$NF==\\/\\&#123;printf \\Disk: %d/%dGB %s\\, $3,$2,$5&#125;&#x27;</span><br><span class=\"line\">    Disk = subprocess.check_output(cmd, shell = True )</span><br><span class=\"line\">    cmd = vcgencmd measure_temp</span><br><span class=\"line\">    Temp = subprocess.check_output(cmd, shell = True )</span><br><span class=\"line\"></span><br><span class=\"line\">  # Return CPU temperature as a character string</span><br><span class=\"line\"></span><br><span class=\"line\">    # Write two lines of text.</span><br><span class=\"line\"></span><br><span class=\"line\">    draw.text((x, top),       IP:  + str(IP),  font=font, fill=255)</span><br><span class=\"line\">    draw.text((x, top+9),     str(CPU), font=font, fill=255)</span><br><span class=\"line\">    draw.text((x, top+18),    str(MemUsage),  font=font, fill=255)</span><br><span class=\"line\">    draw.text((x, top+27),    str(Disk),  font=font, fill=255)</span><br><span class=\"line\">    draw.text((60, top+9),    str(Temp), font=font, fill=255)</span><br><span class=\"line\"></span><br><span class=\"line\">    # Display image.</span><br><span class=\"line\">    disp.image(image)</span><br><span class=\"line\">    disp.display()</span><br><span class=\"line\">\t# 设置屏幕刷新间隔秒数，与CPU损耗相关</span><br><span class=\"line\">    time.sleep(5)</span><br></pre></td></tr></table></figure>\n\n<p>通过 <code>python sys_info.py</code> 运行它，如果提示却什么模块可以直接安装再执行，比如我这边缺了utmp模块，输入 <code>apt-get install python-utmp</code> 来进行安装。</p>\n<p>再次运行python sys_info.py成功点亮～<br>这里值得注意的是<code>time.sleep(5)</code>参数，起初的demo值默认为<code>.1</code>，这意味着每0.1秒就刷新一次屏幕，不管我是否注释掉这一行CPU负载都会迅速提升。所以我的建议值是5秒，这足够我们获取到刷新的信息而不烦躁，并且有效降低树莓派的CPU复杂。</p>\n<p><img src=\"/images/2020/04/sys_info.jpg\" alt=\"\" title=\"Processed with VSCO with a8 preset\"></p>\n<h2 id=\"4-设置开机启动\"><a href=\"#4-设置开机启动\" class=\"headerlink\" title=\"4. 设置开机启动\"></a>4. 设置开机启动</h2><p>进入目录 /lib/systemd/system 创建<code>sys_info.service</code>文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=sys——info service</span><br><span class=\"line\">After=network.target syslog.target</span><br><span class=\"line\">Wants=network.target</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">启动服务的命令（此处写你的frps的实际安装目录）</span><br><span class=\"line\">ExecStart=python /root/sys_info.py</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target`</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-1-启动-sys-info\"><a href=\"#4-1-启动-sys-info\" class=\"headerlink\" title=\"4.1 启动 sys_info\"></a>4.1 启动 sys_info</h4><p><code>sudo systemctl start sys_info</code></p>\n<h4 id=\"4-1-设为开机自启动\"><a href=\"#4-1-设为开机自启动\" class=\"headerlink\" title=\"4.1 设为开机自启动\"></a>4.1 设为开机自启动</h4><p><code>sudo systemctl enable sys_info</code></p>\n","site":{"data":{"menu":[{"name":"文章","icon":"fas fa-newspaper","rows":[{"name":"分类","icon":"fas fa-folder-open","url":"categories/"},{"name":"标签","icon":"fas fa-tags","url":"tags/"},{"name":"归档","icon":"fas fa-archive","url":"archives/"}]},{"name":"邻星","icon":"fas fa-link","url":"friends/"},{"name":"关于","icon":"fas fa-info-circle","url":"about/"},{"name":"留言板","icon":"fas fa-comment-dots","url":"bbs/"},{"name":"实验室","icon":"fas fa-flask","rows":[{"name":"Pi","icon":"fab fa-raspberry-pi","url":"https://pi.purel.in"},{"name":"Cloud","icon":"fab fa-cloudversify","url":"https://cloud.purel.in/"}]}]}},"excerpt":"<p><img src=\"/images/2020/04/spi-night.jpg\" alt=\"\"><br>当这块小屏幕在夜里散发着光芒，你看到它便能回忆起整个部署的过程……</p>","more":"<h2 id=\"1-硬件的选配\"><a href=\"#1-硬件的选配\" class=\"headerlink\" title=\"1. 硬件的选配\"></a>1. 硬件的选配</h2><p>淘宝搜索ssd1306 spi选一家十块钱左右有眼缘的，为什么选择spi的7针而不是i2c简单的4针呢？因为i2c刷新率只有10fps，而spi高达64-364fps。然后再加1.5元买40根杜邦线，虽然用不了这么多，但是为了以后扩展GPIO接口做备胎，然后apt-get安装Adafruit的1306库，对example代码稍事调整，然后在cmd输入一条python指令成功点亮….</p>\n<h2 id=\"2-连接GPIO排线\"><a href=\"#2-连接GPIO排线\" class=\"headerlink\" title=\"2. 连接GPIO排线\"></a>2. 连接GPIO排线</h2><p>ls /dev/spidev* #如果目录为空，可能之前安装过spi屏幕占用了接口，正常应该显示 /dev/spidev0.0 /dev/spidev0.1 查看config.txt文件是否有dtoverlay开头的命令，如果有就加#注释掉。还可以通过lsmod #查看是否开启了spi模块。</p>\n<p><img src=\"https://purel.in/wp-content/uploads/2020/04/spi.bmp\" alt=\"\">把模块的引脚接到树莓派的GPIO上， 需要注意这里要分清GPIO引脚号是BCM编号还是实际编号。GND脚和树莓派的GND连接；VCC接到3.3V脚；D0接到树莓派的SCLK脚（第23号脚），即BCM.11脚；D1接到MOSI脚（第19号脚），即BCM.10；RES接到BCM.17脚，即第11号脚；DC接到BCM.22脚，即第15号脚；CS接到CE0脚（第24号脚）。总之，除了RES和DC是可以任意指定GPIO口，其他引脚是必须和树莓派上的指定脚连接的。</p>\n<h2 id=\"3-安装软件\"><a href=\"#3-安装软件\" class=\"headerlink\" title=\"3. 安装软件\"></a>3. 安装软件</h2><h4 id=\"3-1-安装ssd1306库\"><a href=\"#3-1-安装ssd1306库\" class=\"headerlink\" title=\"3.1 安装ssd1306库\"></a>3.1 安装ssd1306库</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br><span class=\"line\">git clone https://github.com/adafruit/Adafruit_Python_SSD1306.git</span><br><span class=\"line\">cd Adafruit_Python_SSD1306</span><br><span class=\"line\">sudo python setup.py install</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-2-创建一个py文件\"><a href=\"#3-2-创建一个py文件\" class=\"headerlink\" title=\"3.2 创建一个py文件\"></a>3.2 创建一个py文件</h4><p>我希望用这块屏幕显示本机IP地址/CPU内存/磁盘使用情况，用以下代码创建一个文件命名为sys_info.py。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">import Adafruit_GPIO.SPI as SPI</span><br><span class=\"line\">import Adafruit_SSD1306</span><br><span class=\"line\">from PIL import Image</span><br><span class=\"line\">from PIL import ImageDraw</span><br><span class=\"line\">from PIL import ImageFont</span><br><span class=\"line\">import subprocess</span><br><span class=\"line\"></span><br><span class=\"line\"># Raspberry Pi pin configuration:</span><br><span class=\"line\">RST = 17     # 注意这里填BCM标准的针脚号</span><br><span class=\"line\"># Note the following are only used with SPI:</span><br><span class=\"line\">DC = 22</span><br><span class=\"line\">SPI_PORT = 0</span><br><span class=\"line\">SPI_DEVICE = 0</span><br><span class=\"line\"></span><br><span class=\"line\"># 128x64 display with hardware SPI:</span><br><span class=\"line\">disp = Adafruit_SSD1306.SSD1306_128_64(rst=RST, dc=DC, spi=SPI.SpiDev(SPI_PORT, SPI_DEVICE, max_speed_hz=8000000))</span><br><span class=\"line\"></span><br><span class=\"line\"># Initialize library.</span><br><span class=\"line\">disp.begin()</span><br><span class=\"line\"></span><br><span class=\"line\"># Clear display.</span><br><span class=\"line\">disp.clear()</span><br><span class=\"line\">disp.display()</span><br><span class=\"line\"></span><br><span class=\"line\"># Create blank image for drawing.</span><br><span class=\"line\"># Make sure to create image with mode &#x27;1&#x27; for 1-bit color.</span><br><span class=\"line\">width = disp.width</span><br><span class=\"line\">height = disp.height</span><br><span class=\"line\">image = Image.new(&#x27;1&#x27;, (width, height))</span><br><span class=\"line\"></span><br><span class=\"line\"># Get drawing object to draw on image.</span><br><span class=\"line\">draw = ImageDraw.Draw(image)</span><br><span class=\"line\"></span><br><span class=\"line\"># Draw a black filled box to clear the image.</span><br><span class=\"line\">draw.rectangle((0,0,width,height), outline=0, fill=0)</span><br><span class=\"line\"></span><br><span class=\"line\"># Draw some shapes.</span><br><span class=\"line\"># First define some constants to allow easy resizing of shapes.</span><br><span class=\"line\">padding = -2</span><br><span class=\"line\">top = padding</span><br><span class=\"line\">bottom = height-padding</span><br><span class=\"line\"># Move left to right keeping track of the current x position for drawing shapes.</span><br><span class=\"line\">x = 0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># Load default font.</span><br><span class=\"line\">font = ImageFont.load_default()</span><br><span class=\"line\"></span><br><span class=\"line\"># Alternatively load a TTF font.  Make sure the .ttf font file is in the same directory as the python script!</span><br><span class=\"line\"># Some other nice fonts to try: http://www.dafont.com/bitmap.php</span><br><span class=\"line\"># font = ImageFont.truetype(&#x27;Minecraftia.ttf&#x27;, 8)</span><br><span class=\"line\"></span><br><span class=\"line\">while True:</span><br><span class=\"line\"></span><br><span class=\"line\">    # Draw a black filled box to clear the image.</span><br><span class=\"line\">    draw.rectangle((0,0,width,height), outline=0, fill=0)</span><br><span class=\"line\"></span><br><span class=\"line\">    # Shell scripts for system monitoring from here : https://unix.stackexchange.com/questions/119126/command-to-display-memory-usage-disk-usage-and-cpu-load</span><br><span class=\"line\">    cmd = hostname -I | cut -d\\&#x27; \\&#x27; -f1</span><br><span class=\"line\">    IP = subprocess.check_output(cmd, shell = True )</span><br><span class=\"line\">    cmd = top -bn1 | grep load | awk &#x27;&#123;printf \\CPU: %.2f\\, $(NF-2)&#125;&#x27;</span><br><span class=\"line\">    CPU = subprocess.check_output(cmd, shell = True )</span><br><span class=\"line\">    cmd = free -m | awk &#x27;NR==2&#123;printf \\Mem: %s/%sMB %.2f%%\\, $3,$2,$3*100/$2 &#125;&#x27;</span><br><span class=\"line\">    MemUsage = subprocess.check_output(cmd, shell = True )</span><br><span class=\"line\">    cmd = df -h | awk &#x27;$NF==\\/\\&#123;printf \\Disk: %d/%dGB %s\\, $3,$2,$5&#125;&#x27;</span><br><span class=\"line\">    Disk = subprocess.check_output(cmd, shell = True )</span><br><span class=\"line\">    cmd = vcgencmd measure_temp</span><br><span class=\"line\">    Temp = subprocess.check_output(cmd, shell = True )</span><br><span class=\"line\"></span><br><span class=\"line\">  # Return CPU temperature as a character string</span><br><span class=\"line\"></span><br><span class=\"line\">    # Write two lines of text.</span><br><span class=\"line\"></span><br><span class=\"line\">    draw.text((x, top),       IP:  + str(IP),  font=font, fill=255)</span><br><span class=\"line\">    draw.text((x, top+9),     str(CPU), font=font, fill=255)</span><br><span class=\"line\">    draw.text((x, top+18),    str(MemUsage),  font=font, fill=255)</span><br><span class=\"line\">    draw.text((x, top+27),    str(Disk),  font=font, fill=255)</span><br><span class=\"line\">    draw.text((60, top+9),    str(Temp), font=font, fill=255)</span><br><span class=\"line\"></span><br><span class=\"line\">    # Display image.</span><br><span class=\"line\">    disp.image(image)</span><br><span class=\"line\">    disp.display()</span><br><span class=\"line\">\t# 设置屏幕刷新间隔秒数，与CPU损耗相关</span><br><span class=\"line\">    time.sleep(5)</span><br></pre></td></tr></table></figure>\n\n<p>通过 <code>python sys_info.py</code> 运行它，如果提示却什么模块可以直接安装再执行，比如我这边缺了utmp模块，输入 <code>apt-get install python-utmp</code> 来进行安装。</p>\n<p>再次运行python sys_info.py成功点亮～<br>这里值得注意的是<code>time.sleep(5)</code>参数，起初的demo值默认为<code>.1</code>，这意味着每0.1秒就刷新一次屏幕，不管我是否注释掉这一行CPU负载都会迅速提升。所以我的建议值是5秒，这足够我们获取到刷新的信息而不烦躁，并且有效降低树莓派的CPU复杂。</p>\n<p><img src=\"/images/2020/04/sys_info.jpg\" alt=\"\" title=\"Processed with VSCO with a8 preset\"></p>\n<h2 id=\"4-设置开机启动\"><a href=\"#4-设置开机启动\" class=\"headerlink\" title=\"4. 设置开机启动\"></a>4. 设置开机启动</h2><p>进入目录 /lib/systemd/system 创建<code>sys_info.service</code>文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=sys——info service</span><br><span class=\"line\">After=network.target syslog.target</span><br><span class=\"line\">Wants=network.target</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">启动服务的命令（此处写你的frps的实际安装目录）</span><br><span class=\"line\">ExecStart=python /root/sys_info.py</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target`</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-1-启动-sys-info\"><a href=\"#4-1-启动-sys-info\" class=\"headerlink\" title=\"4.1 启动 sys_info\"></a>4.1 启动 sys_info</h4><p><code>sudo systemctl start sys_info</code></p>\n<h4 id=\"4-1-设为开机自启动\"><a href=\"#4-1-设为开机自启动\" class=\"headerlink\" title=\"4.1 设为开机自启动\"></a>4.1 设为开机自启动</h4><p><code>sudo systemctl enable sys_info</code></p>"},{"title":"树莓派：安装rtl8812bu双频无线网卡驱动","type":"post","date":"2020-04-03T21:49:36.000Z","_content":"![](/images/2020/04/ac1200.jpg)\n突发奇想，可不可以将Pi作为一个无线中继，转发5G的WIFI信号并共享给所有连接到它的设备呢？说干就干吧，第一步先从搭配硬件环境开始。\n<!--more-->\n## 1. 选择无线网卡\n树莓派本身是千兆以太网口，以及5G/2.4G双频WIFI无线网卡，但是要让它彻底作为无线中继，那个前兆以太网口就不用了，取而代之的是需要另一块无线WIFI，为了使网络带宽最大化被利用起来，我需要一款双频的无线网卡。\n\n![](/images/2020/04/ac1200m.jpg \"rtl8812bu\")\n\n在淘宝看了很久，最终选择了一款超级迷你款的rtl8812bu芯片作为双频发射端，客服说是出口外贸的商品，这款和ASUS的AC53很像，功能上基本一致，但是增加了USB3.0接口，这样能让5G的WIFI网速最大限度跑起来，目前大部分5G无线网卡还都是USB2.0接口，并且个头比较大插在Pi上面很突兀，这也是经常被我们忽略的部分。\n\n理论上所有rtl8812bu芯片都可以在树莓派或者linux上安装驱动，但我还是废了一些周折，因为之前rpi-update升级了kernel内核，于是初次安装rtl8812bu驱动无法正常工作，现在写一下正确安装方法。\n\n## 2. 卸载旧驱动\n\n```\nls /lib/modules/*/build -la #查看所有已经建立的驱动模块\ndkms uninstall -m rtl88x2bu -v 5.6.1 # 卸载驱动模块\nrpi-update # 升级内核到最新版，也可以跳过\nrpi-source # 构建正在运行的最新内核的源代码\n```\n\n## 3. 安装rtl8812bu驱动\n\n`git clone https://github.com/cilynx/rtl88x2bu` #下载驱动\n如果配置了代理，通过proxychains指令代理下载会更快，[可以参照我前面的文章来设置代理。](https://purel.in/raspberry-pi-quantum-cloud-lab-in-your-pocket-software/)\n\n## 4. 树莓派安装步骤\n```\n# Update all packages per normal\nsudo apt update\nsudo apt upgrade\n\n# Install prereqs\nsudo apt install git dnsmasq hostapd bc build-essential dkms raspberrypi-kernel-headers\n\n# Reboot just in case there were any kernel updates\nsudo reboot\n\n# Pull down the driver source\ngit clone https://github.com/cilynx/rtl88x2bu\ncd rtl88x2bu/\n\n# Configure for RasPi\nsed -i 's/I386_PC = y/I386_PC = n/' Makefile\nsed -i 's/ARM_RPI = n/ARM_RPI = y/' Makefile\n\n# DKMS as above\nVER=$(sed -n 's/\\PACKAGE_VERSION=\\(.*\\)/\\1/p' dkms.conf)\nsudo rsync -rvhP ./ /usr/src/rtl88x2bu-${VER}\nsudo dkms add -m rtl88x2bu -v ${VER}\nsudo dkms build -m rtl88x2bu -v ${VER} # Takes ~3-minutes on a 3B+\nsudo dkms install -m rtl88x2bu -v ${VER}\n\n# Plug in your adapter then confirm your new interface name\nip addr\n```\n\n最后敲入`lsmod`看到88x2bu赫然在列，完美。\n至此，我的rtl88x2bu无线双频网卡已经可以使用了～","source":"_posts/2020-04-04-raspberry-pi-install-rtl8812bu-dual-band-wireless-network-card-driver.md","raw":"---\ntitle: 树莓派：安装rtl8812bu双频无线网卡驱动\ntype: post\ndate: 2020-04-04T05:49:36+00:00\ncategories: [树梅派]\ntags: [树梅派,无线网卡,rtl8812bu,驱动,Pi]\n---\n![](/images/2020/04/ac1200.jpg)\n突发奇想，可不可以将Pi作为一个无线中继，转发5G的WIFI信号并共享给所有连接到它的设备呢？说干就干吧，第一步先从搭配硬件环境开始。\n<!--more-->\n## 1. 选择无线网卡\n树莓派本身是千兆以太网口，以及5G/2.4G双频WIFI无线网卡，但是要让它彻底作为无线中继，那个前兆以太网口就不用了，取而代之的是需要另一块无线WIFI，为了使网络带宽最大化被利用起来，我需要一款双频的无线网卡。\n\n![](/images/2020/04/ac1200m.jpg \"rtl8812bu\")\n\n在淘宝看了很久，最终选择了一款超级迷你款的rtl8812bu芯片作为双频发射端，客服说是出口外贸的商品，这款和ASUS的AC53很像，功能上基本一致，但是增加了USB3.0接口，这样能让5G的WIFI网速最大限度跑起来，目前大部分5G无线网卡还都是USB2.0接口，并且个头比较大插在Pi上面很突兀，这也是经常被我们忽略的部分。\n\n理论上所有rtl8812bu芯片都可以在树莓派或者linux上安装驱动，但我还是废了一些周折，因为之前rpi-update升级了kernel内核，于是初次安装rtl8812bu驱动无法正常工作，现在写一下正确安装方法。\n\n## 2. 卸载旧驱动\n\n```\nls /lib/modules/*/build -la #查看所有已经建立的驱动模块\ndkms uninstall -m rtl88x2bu -v 5.6.1 # 卸载驱动模块\nrpi-update # 升级内核到最新版，也可以跳过\nrpi-source # 构建正在运行的最新内核的源代码\n```\n\n## 3. 安装rtl8812bu驱动\n\n`git clone https://github.com/cilynx/rtl88x2bu` #下载驱动\n如果配置了代理，通过proxychains指令代理下载会更快，[可以参照我前面的文章来设置代理。](https://purel.in/raspberry-pi-quantum-cloud-lab-in-your-pocket-software/)\n\n## 4. 树莓派安装步骤\n```\n# Update all packages per normal\nsudo apt update\nsudo apt upgrade\n\n# Install prereqs\nsudo apt install git dnsmasq hostapd bc build-essential dkms raspberrypi-kernel-headers\n\n# Reboot just in case there were any kernel updates\nsudo reboot\n\n# Pull down the driver source\ngit clone https://github.com/cilynx/rtl88x2bu\ncd rtl88x2bu/\n\n# Configure for RasPi\nsed -i 's/I386_PC = y/I386_PC = n/' Makefile\nsed -i 's/ARM_RPI = n/ARM_RPI = y/' Makefile\n\n# DKMS as above\nVER=$(sed -n 's/\\PACKAGE_VERSION=\\(.*\\)/\\1/p' dkms.conf)\nsudo rsync -rvhP ./ /usr/src/rtl88x2bu-${VER}\nsudo dkms add -m rtl88x2bu -v ${VER}\nsudo dkms build -m rtl88x2bu -v ${VER} # Takes ~3-minutes on a 3B+\nsudo dkms install -m rtl88x2bu -v ${VER}\n\n# Plug in your adapter then confirm your new interface name\nip addr\n```\n\n最后敲入`lsmod`看到88x2bu赫然在列，完美。\n至此，我的rtl88x2bu无线双频网卡已经可以使用了～","slug":"raspberry-pi-install-rtl8812bu-dual-band-wireless-network-card-driver","published":1,"updated":"2020-04-03T21:49:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zfpkcm000hloc60w7n8j0s","content":"<p><img src=\"/images/2020/04/ac1200.jpg\" alt=\"\"><br>突发奇想，可不可以将Pi作为一个无线中继，转发5G的WIFI信号并共享给所有连接到它的设备呢？说干就干吧，第一步先从搭配硬件环境开始。</p>\n<span id=\"more\"></span>\n<h2 id=\"1-选择无线网卡\"><a href=\"#1-选择无线网卡\" class=\"headerlink\" title=\"1. 选择无线网卡\"></a>1. 选择无线网卡</h2><p>树莓派本身是千兆以太网口，以及5G/2.4G双频WIFI无线网卡，但是要让它彻底作为无线中继，那个前兆以太网口就不用了，取而代之的是需要另一块无线WIFI，为了使网络带宽最大化被利用起来，我需要一款双频的无线网卡。</p>\n<p><img src=\"/images/2020/04/ac1200m.jpg\" alt=\"\" title=\"rtl8812bu\"></p>\n<p>在淘宝看了很久，最终选择了一款超级迷你款的rtl8812bu芯片作为双频发射端，客服说是出口外贸的商品，这款和ASUS的AC53很像，功能上基本一致，但是增加了USB3.0接口，这样能让5G的WIFI网速最大限度跑起来，目前大部分5G无线网卡还都是USB2.0接口，并且个头比较大插在Pi上面很突兀，这也是经常被我们忽略的部分。</p>\n<p>理论上所有rtl8812bu芯片都可以在树莓派或者linux上安装驱动，但我还是废了一些周折，因为之前rpi-update升级了kernel内核，于是初次安装rtl8812bu驱动无法正常工作，现在写一下正确安装方法。</p>\n<h2 id=\"2-卸载旧驱动\"><a href=\"#2-卸载旧驱动\" class=\"headerlink\" title=\"2. 卸载旧驱动\"></a>2. 卸载旧驱动</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls /lib/modules/*/build -la #查看所有已经建立的驱动模块</span><br><span class=\"line\">dkms uninstall -m rtl88x2bu -v 5.6.1 # 卸载驱动模块</span><br><span class=\"line\">rpi-update # 升级内核到最新版，也可以跳过</span><br><span class=\"line\">rpi-source # 构建正在运行的最新内核的源代码</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-安装rtl8812bu驱动\"><a href=\"#3-安装rtl8812bu驱动\" class=\"headerlink\" title=\"3. 安装rtl8812bu驱动\"></a>3. 安装rtl8812bu驱动</h2><p><code>git clone https://github.com/cilynx/rtl88x2bu</code> #下载驱动<br>如果配置了代理，通过proxychains指令代理下载会更快，<a href=\"https://purel.in/raspberry-pi-quantum-cloud-lab-in-your-pocket-software/\">可以参照我前面的文章来设置代理。</a></p>\n<h2 id=\"4-树莓派安装步骤\"><a href=\"#4-树莓派安装步骤\" class=\"headerlink\" title=\"4. 树莓派安装步骤\"></a>4. 树莓派安装步骤</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Update all packages per normal</span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt upgrade</span><br><span class=\"line\"></span><br><span class=\"line\"># Install prereqs</span><br><span class=\"line\">sudo apt install git dnsmasq hostapd bc build-essential dkms raspberrypi-kernel-headers</span><br><span class=\"line\"></span><br><span class=\"line\"># Reboot just in case there were any kernel updates</span><br><span class=\"line\">sudo reboot</span><br><span class=\"line\"></span><br><span class=\"line\"># Pull down the driver source</span><br><span class=\"line\">git clone https://github.com/cilynx/rtl88x2bu</span><br><span class=\"line\">cd rtl88x2bu/</span><br><span class=\"line\"></span><br><span class=\"line\"># Configure for RasPi</span><br><span class=\"line\">sed -i &#x27;s/I386_PC = y/I386_PC = n/&#x27; Makefile</span><br><span class=\"line\">sed -i &#x27;s/ARM_RPI = n/ARM_RPI = y/&#x27; Makefile</span><br><span class=\"line\"></span><br><span class=\"line\"># DKMS as above</span><br><span class=\"line\">VER=$(sed -n &#x27;s/\\PACKAGE_VERSION=\\(.*\\)/\\1/p&#x27; dkms.conf)</span><br><span class=\"line\">sudo rsync -rvhP ./ /usr/src/rtl88x2bu-$&#123;VER&#125;</span><br><span class=\"line\">sudo dkms add -m rtl88x2bu -v $&#123;VER&#125;</span><br><span class=\"line\">sudo dkms build -m rtl88x2bu -v $&#123;VER&#125; # Takes ~3-minutes on a 3B+</span><br><span class=\"line\">sudo dkms install -m rtl88x2bu -v $&#123;VER&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># Plug in your adapter then confirm your new interface name</span><br><span class=\"line\">ip addr</span><br></pre></td></tr></table></figure>\n\n<p>最后敲入<code>lsmod</code>看到88x2bu赫然在列，完美。<br>至此，我的rtl88x2bu无线双频网卡已经可以使用了～</p>\n","site":{"data":{"menu":[{"name":"文章","icon":"fas fa-newspaper","rows":[{"name":"分类","icon":"fas fa-folder-open","url":"categories/"},{"name":"标签","icon":"fas fa-tags","url":"tags/"},{"name":"归档","icon":"fas fa-archive","url":"archives/"}]},{"name":"邻星","icon":"fas fa-link","url":"friends/"},{"name":"关于","icon":"fas fa-info-circle","url":"about/"},{"name":"留言板","icon":"fas fa-comment-dots","url":"bbs/"},{"name":"实验室","icon":"fas fa-flask","rows":[{"name":"Pi","icon":"fab fa-raspberry-pi","url":"https://pi.purel.in"},{"name":"Cloud","icon":"fab fa-cloudversify","url":"https://cloud.purel.in/"}]}]}},"excerpt":"<p><img src=\"/images/2020/04/ac1200.jpg\" alt=\"\"><br>突发奇想，可不可以将Pi作为一个无线中继，转发5G的WIFI信号并共享给所有连接到它的设备呢？说干就干吧，第一步先从搭配硬件环境开始。</p>","more":"<h2 id=\"1-选择无线网卡\"><a href=\"#1-选择无线网卡\" class=\"headerlink\" title=\"1. 选择无线网卡\"></a>1. 选择无线网卡</h2><p>树莓派本身是千兆以太网口，以及5G/2.4G双频WIFI无线网卡，但是要让它彻底作为无线中继，那个前兆以太网口就不用了，取而代之的是需要另一块无线WIFI，为了使网络带宽最大化被利用起来，我需要一款双频的无线网卡。</p>\n<p><img src=\"/images/2020/04/ac1200m.jpg\" alt=\"\" title=\"rtl8812bu\"></p>\n<p>在淘宝看了很久，最终选择了一款超级迷你款的rtl8812bu芯片作为双频发射端，客服说是出口外贸的商品，这款和ASUS的AC53很像，功能上基本一致，但是增加了USB3.0接口，这样能让5G的WIFI网速最大限度跑起来，目前大部分5G无线网卡还都是USB2.0接口，并且个头比较大插在Pi上面很突兀，这也是经常被我们忽略的部分。</p>\n<p>理论上所有rtl8812bu芯片都可以在树莓派或者linux上安装驱动，但我还是废了一些周折，因为之前rpi-update升级了kernel内核，于是初次安装rtl8812bu驱动无法正常工作，现在写一下正确安装方法。</p>\n<h2 id=\"2-卸载旧驱动\"><a href=\"#2-卸载旧驱动\" class=\"headerlink\" title=\"2. 卸载旧驱动\"></a>2. 卸载旧驱动</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls /lib/modules/*/build -la #查看所有已经建立的驱动模块</span><br><span class=\"line\">dkms uninstall -m rtl88x2bu -v 5.6.1 # 卸载驱动模块</span><br><span class=\"line\">rpi-update # 升级内核到最新版，也可以跳过</span><br><span class=\"line\">rpi-source # 构建正在运行的最新内核的源代码</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-安装rtl8812bu驱动\"><a href=\"#3-安装rtl8812bu驱动\" class=\"headerlink\" title=\"3. 安装rtl8812bu驱动\"></a>3. 安装rtl8812bu驱动</h2><p><code>git clone https://github.com/cilynx/rtl88x2bu</code> #下载驱动<br>如果配置了代理，通过proxychains指令代理下载会更快，<a href=\"https://purel.in/raspberry-pi-quantum-cloud-lab-in-your-pocket-software/\">可以参照我前面的文章来设置代理。</a></p>\n<h2 id=\"4-树莓派安装步骤\"><a href=\"#4-树莓派安装步骤\" class=\"headerlink\" title=\"4. 树莓派安装步骤\"></a>4. 树莓派安装步骤</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Update all packages per normal</span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt upgrade</span><br><span class=\"line\"></span><br><span class=\"line\"># Install prereqs</span><br><span class=\"line\">sudo apt install git dnsmasq hostapd bc build-essential dkms raspberrypi-kernel-headers</span><br><span class=\"line\"></span><br><span class=\"line\"># Reboot just in case there were any kernel updates</span><br><span class=\"line\">sudo reboot</span><br><span class=\"line\"></span><br><span class=\"line\"># Pull down the driver source</span><br><span class=\"line\">git clone https://github.com/cilynx/rtl88x2bu</span><br><span class=\"line\">cd rtl88x2bu/</span><br><span class=\"line\"></span><br><span class=\"line\"># Configure for RasPi</span><br><span class=\"line\">sed -i &#x27;s/I386_PC = y/I386_PC = n/&#x27; Makefile</span><br><span class=\"line\">sed -i &#x27;s/ARM_RPI = n/ARM_RPI = y/&#x27; Makefile</span><br><span class=\"line\"></span><br><span class=\"line\"># DKMS as above</span><br><span class=\"line\">VER=$(sed -n &#x27;s/\\PACKAGE_VERSION=\\(.*\\)/\\1/p&#x27; dkms.conf)</span><br><span class=\"line\">sudo rsync -rvhP ./ /usr/src/rtl88x2bu-$&#123;VER&#125;</span><br><span class=\"line\">sudo dkms add -m rtl88x2bu -v $&#123;VER&#125;</span><br><span class=\"line\">sudo dkms build -m rtl88x2bu -v $&#123;VER&#125; # Takes ~3-minutes on a 3B+</span><br><span class=\"line\">sudo dkms install -m rtl88x2bu -v $&#123;VER&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># Plug in your adapter then confirm your new interface name</span><br><span class=\"line\">ip addr</span><br></pre></td></tr></table></figure>\n\n<p>最后敲入<code>lsmod</code>看到88x2bu赫然在列，完美。<br>至此，我的rtl88x2bu无线双频网卡已经可以使用了～</p>"},{"title":"frp全自动化守护进程","date":"2020-04-13T07:19:06.000Z","_content":"![](/images/2020/04/frp.png)\n一觉睡醒后发现树莓派上的博客无法访问了，通过检查日志找到了原因，原来是一向乖巧的frp服务被莫名中断，看起来它也有脆弱的一面呀。世间万物都在进化，是时候实现frp的自我管理了，让它可以在各种原因中断后自行检查并自行恢复。这篇文章记录了我是如何高效且快速创建一个frp全自动化守护进程的。\n<!--more-->\nfrp分为frpc客户端和frps服务器端，这里以frpc为例，frps是一样的，只需要把以下目录或代码frpc或frpcd改成frps或frpsd。\n\n## 1. 创建frpc开机启动\n创建一个systemctl文件\n```\nnano /lib/systemd/system/frpc.service\n```\n保存以下内容\n```\n[Unit]\nDescription=frpc service\n#设置网络启动后依赖\nAfter=network.target syslog.target network-online.target\nWants=network.target\nRequires=network-online.target\n\n[Service]\nType=simple\n#启动服务的命令（此处写你的frps(frpc)的实际安装目录）\nExecStart=/usr/local/frp/frpc -c /usr/local/frp/frpc.ini\n#设置失败5秒后重启\nRestart=on-failure\nRestartSec=5s\nKillSignal=SIGQUIT\nTimeoutStopSec=5\nKillMode=process\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n```\n开启frpc开机启动\n`systemctl enable frpc.service`\n\n## 2. 创建frpcd守护进程\n接下来需要实现实时检查frpc状态，如果frpc运行失败则重启服务，以免你睡觉的时候frp因各种原因中断服务。\n首先创建一个frpcd.sh文件\n```\nnano /usr/local/frp/frpcd.sh\n```\n保存以下内容\n```\n#!/bin/bash\nwhile true; do\n\nstr1=\"service frpc status\"\nstr2=\"start proxy success\"\nresult=$($str1 | grep \"${str2}\")\nif [[ \"$result\" != \"\" ]]\nthen\n#    echo \"frpc 正在工作中...\"\n：\nelse\n#    echo \"frpc 运行失败，正在重启...\"\nservice frpc restart\nfi\nsleep 5\ndone\n```\n\n给它设置执行权限\nchmod -x /usr/local/frp/frpcd.sh\n\n启动试试`./frpcd.sh`\n你可以先停止frpc服务然后看看守护程序能否实现自动检测并重启frcp，通过以下三个命令。\nservice frpc stop #停止frpc服务\n/usr/local/frp/frpcd.sh #启动frpcd守护\nservice frpc status #检查frpc服务状态\n如果看到`proxy start success`就是成功了\n\n## 3. 开机启动frpcd守护进程\n创建一个systemctl文件\n```\nnano /lib/systemd/system/frpcd.service\n```\n保存以下内容\n```\n[Unit]\nDescription=frpc daemon service\nAfter=network.target syslog.target\nWants=network.target\nRequires=network-online.target\n\n[Service]\nType=simple\n#启动服务的命令（此处写你的frps的实际安装目录）\nExecStart=/usr/local/frp/frpcd.sh\nRestart=on-failure\nRestartSec=5s\nKillSignal=SIGQUIT\nTimeoutStopSec=5\nKillMode=process\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n\n```\n把守护进程设为开机启动\n`systemctl enable frpcd.service`\n最后别忘了重新加载systemctl服务\n`systemctl daemon-reload`\n## 4. 设置frps的注意事项\nfrps服务器端也是同理，但是要注意systemctl的路径，尽量避免路径不准确造成的重定向反馈。用于锚定返回值的str2建议设为`running`更为合理，避免frps一直在重启从而导致连接失败的问题。\n## 5. reboot\nOk，至此Frp已经完成了自我进化，再也不用担心它什么时候断掉了服务，当然你可以`reboot`来测试一下我的这套frp自我管理系统是否对你的小可爱奏效。","source":"_posts/2020-04-13-frp-fully-automated-daemon.md","raw":"---\ntitle: frp全自动化守护进程\ndate: 2020-04-13 15:19:06\ntags: [Frp,树莓派,守护进程]\ncategories: [网站]\n---\n![](/images/2020/04/frp.png)\n一觉睡醒后发现树莓派上的博客无法访问了，通过检查日志找到了原因，原来是一向乖巧的frp服务被莫名中断，看起来它也有脆弱的一面呀。世间万物都在进化，是时候实现frp的自我管理了，让它可以在各种原因中断后自行检查并自行恢复。这篇文章记录了我是如何高效且快速创建一个frp全自动化守护进程的。\n<!--more-->\nfrp分为frpc客户端和frps服务器端，这里以frpc为例，frps是一样的，只需要把以下目录或代码frpc或frpcd改成frps或frpsd。\n\n## 1. 创建frpc开机启动\n创建一个systemctl文件\n```\nnano /lib/systemd/system/frpc.service\n```\n保存以下内容\n```\n[Unit]\nDescription=frpc service\n#设置网络启动后依赖\nAfter=network.target syslog.target network-online.target\nWants=network.target\nRequires=network-online.target\n\n[Service]\nType=simple\n#启动服务的命令（此处写你的frps(frpc)的实际安装目录）\nExecStart=/usr/local/frp/frpc -c /usr/local/frp/frpc.ini\n#设置失败5秒后重启\nRestart=on-failure\nRestartSec=5s\nKillSignal=SIGQUIT\nTimeoutStopSec=5\nKillMode=process\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n```\n开启frpc开机启动\n`systemctl enable frpc.service`\n\n## 2. 创建frpcd守护进程\n接下来需要实现实时检查frpc状态，如果frpc运行失败则重启服务，以免你睡觉的时候frp因各种原因中断服务。\n首先创建一个frpcd.sh文件\n```\nnano /usr/local/frp/frpcd.sh\n```\n保存以下内容\n```\n#!/bin/bash\nwhile true; do\n\nstr1=\"service frpc status\"\nstr2=\"start proxy success\"\nresult=$($str1 | grep \"${str2}\")\nif [[ \"$result\" != \"\" ]]\nthen\n#    echo \"frpc 正在工作中...\"\n：\nelse\n#    echo \"frpc 运行失败，正在重启...\"\nservice frpc restart\nfi\nsleep 5\ndone\n```\n\n给它设置执行权限\nchmod -x /usr/local/frp/frpcd.sh\n\n启动试试`./frpcd.sh`\n你可以先停止frpc服务然后看看守护程序能否实现自动检测并重启frcp，通过以下三个命令。\nservice frpc stop #停止frpc服务\n/usr/local/frp/frpcd.sh #启动frpcd守护\nservice frpc status #检查frpc服务状态\n如果看到`proxy start success`就是成功了\n\n## 3. 开机启动frpcd守护进程\n创建一个systemctl文件\n```\nnano /lib/systemd/system/frpcd.service\n```\n保存以下内容\n```\n[Unit]\nDescription=frpc daemon service\nAfter=network.target syslog.target\nWants=network.target\nRequires=network-online.target\n\n[Service]\nType=simple\n#启动服务的命令（此处写你的frps的实际安装目录）\nExecStart=/usr/local/frp/frpcd.sh\nRestart=on-failure\nRestartSec=5s\nKillSignal=SIGQUIT\nTimeoutStopSec=5\nKillMode=process\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n\n```\n把守护进程设为开机启动\n`systemctl enable frpcd.service`\n最后别忘了重新加载systemctl服务\n`systemctl daemon-reload`\n## 4. 设置frps的注意事项\nfrps服务器端也是同理，但是要注意systemctl的路径，尽量避免路径不准确造成的重定向反馈。用于锚定返回值的str2建议设为`running`更为合理，避免frps一直在重启从而导致连接失败的问题。\n## 5. reboot\nOk，至此Frp已经完成了自我进化，再也不用担心它什么时候断掉了服务，当然你可以`reboot`来测试一下我的这套frp自我管理系统是否对你的小可爱奏效。","slug":"frp-fully-automated-daemon","published":1,"updated":"2020-04-13T07:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zfpkco000mloc6eeki001o","content":"<p><img src=\"/images/2020/04/frp.png\" alt=\"\"><br>一觉睡醒后发现树莓派上的博客无法访问了，通过检查日志找到了原因，原来是一向乖巧的frp服务被莫名中断，看起来它也有脆弱的一面呀。世间万物都在进化，是时候实现frp的自我管理了，让它可以在各种原因中断后自行检查并自行恢复。这篇文章记录了我是如何高效且快速创建一个frp全自动化守护进程的。</p>\n<span id=\"more\"></span>\n<p>frp分为frpc客户端和frps服务器端，这里以frpc为例，frps是一样的，只需要把以下目录或代码frpc或frpcd改成frps或frpsd。</p>\n<h2 id=\"1-创建frpc开机启动\"><a href=\"#1-创建frpc开机启动\" class=\"headerlink\" title=\"1. 创建frpc开机启动\"></a>1. 创建frpc开机启动</h2><p>创建一个systemctl文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /lib/systemd/system/frpc.service</span><br></pre></td></tr></table></figure>\n<p>保存以下内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=frpc service</span><br><span class=\"line\">#设置网络启动后依赖</span><br><span class=\"line\">After=network.target syslog.target network-online.target</span><br><span class=\"line\">Wants=network.target</span><br><span class=\"line\">Requires=network-online.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">#启动服务的命令（此处写你的frps(frpc)的实际安装目录）</span><br><span class=\"line\">ExecStart=/usr/local/frp/frpc -c /usr/local/frp/frpc.ini</span><br><span class=\"line\">#设置失败5秒后重启</span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\">RestartSec=5s</span><br><span class=\"line\">KillSignal=SIGQUIT</span><br><span class=\"line\">TimeoutStopSec=5</span><br><span class=\"line\">KillMode=process</span><br><span class=\"line\">PrivateTmp=true</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<p>开启frpc开机启动<br><code>systemctl enable frpc.service</code></p>\n<h2 id=\"2-创建frpcd守护进程\"><a href=\"#2-创建frpcd守护进程\" class=\"headerlink\" title=\"2. 创建frpcd守护进程\"></a>2. 创建frpcd守护进程</h2><p>接下来需要实现实时检查frpc状态，如果frpc运行失败则重启服务，以免你睡觉的时候frp因各种原因中断服务。<br>首先创建一个frpcd.sh文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /usr/local/frp/frpcd.sh</span><br></pre></td></tr></table></figure>\n<p>保存以下内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">while true; do</span><br><span class=\"line\"></span><br><span class=\"line\">str1=&quot;service frpc status&quot;</span><br><span class=\"line\">str2=&quot;start proxy success&quot;</span><br><span class=\"line\">result=$($str1 | grep &quot;$&#123;str2&#125;&quot;)</span><br><span class=\"line\">if [[ &quot;$result&quot; != &quot;&quot; ]]</span><br><span class=\"line\">then</span><br><span class=\"line\">#    echo &quot;frpc 正在工作中...&quot;</span><br><span class=\"line\">：</span><br><span class=\"line\">else</span><br><span class=\"line\">#    echo &quot;frpc 运行失败，正在重启...&quot;</span><br><span class=\"line\">service frpc restart</span><br><span class=\"line\">fi</span><br><span class=\"line\">sleep 5</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<p>给它设置执行权限<br>chmod -x /usr/local/frp/frpcd.sh</p>\n<p>启动试试<code>./frpcd.sh</code><br>你可以先停止frpc服务然后看看守护程序能否实现自动检测并重启frcp，通过以下三个命令。<br>service frpc stop #停止frpc服务<br>/usr/local/frp/frpcd.sh #启动frpcd守护<br>service frpc status #检查frpc服务状态<br>如果看到<code>proxy start success</code>就是成功了</p>\n<h2 id=\"3-开机启动frpcd守护进程\"><a href=\"#3-开机启动frpcd守护进程\" class=\"headerlink\" title=\"3. 开机启动frpcd守护进程\"></a>3. 开机启动frpcd守护进程</h2><p>创建一个systemctl文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /lib/systemd/system/frpcd.service</span><br></pre></td></tr></table></figure>\n<p>保存以下内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=frpc daemon service</span><br><span class=\"line\">After=network.target syslog.target</span><br><span class=\"line\">Wants=network.target</span><br><span class=\"line\">Requires=network-online.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">#启动服务的命令（此处写你的frps的实际安装目录）</span><br><span class=\"line\">ExecStart=/usr/local/frp/frpcd.sh</span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\">RestartSec=5s</span><br><span class=\"line\">KillSignal=SIGQUIT</span><br><span class=\"line\">TimeoutStopSec=5</span><br><span class=\"line\">KillMode=process</span><br><span class=\"line\">PrivateTmp=true</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>把守护进程设为开机启动<br><code>systemctl enable frpcd.service</code><br>最后别忘了重新加载systemctl服务<br><code>systemctl daemon-reload</code></p>\n<h2 id=\"4-设置frps的注意事项\"><a href=\"#4-设置frps的注意事项\" class=\"headerlink\" title=\"4. 设置frps的注意事项\"></a>4. 设置frps的注意事项</h2><p>frps服务器端也是同理，但是要注意systemctl的路径，尽量避免路径不准确造成的重定向反馈。用于锚定返回值的str2建议设为<code>running</code>更为合理，避免frps一直在重启从而导致连接失败的问题。</p>\n<h2 id=\"5-reboot\"><a href=\"#5-reboot\" class=\"headerlink\" title=\"5. reboot\"></a>5. reboot</h2><p>Ok，至此Frp已经完成了自我进化，再也不用担心它什么时候断掉了服务，当然你可以<code>reboot</code>来测试一下我的这套frp自我管理系统是否对你的小可爱奏效。</p>\n","site":{"data":{"menu":[{"name":"文章","icon":"fas fa-newspaper","rows":[{"name":"分类","icon":"fas fa-folder-open","url":"categories/"},{"name":"标签","icon":"fas fa-tags","url":"tags/"},{"name":"归档","icon":"fas fa-archive","url":"archives/"}]},{"name":"邻星","icon":"fas fa-link","url":"friends/"},{"name":"关于","icon":"fas fa-info-circle","url":"about/"},{"name":"留言板","icon":"fas fa-comment-dots","url":"bbs/"},{"name":"实验室","icon":"fas fa-flask","rows":[{"name":"Pi","icon":"fab fa-raspberry-pi","url":"https://pi.purel.in"},{"name":"Cloud","icon":"fab fa-cloudversify","url":"https://cloud.purel.in/"}]}]}},"excerpt":"<p><img src=\"/images/2020/04/frp.png\" alt=\"\"><br>一觉睡醒后发现树莓派上的博客无法访问了，通过检查日志找到了原因，原来是一向乖巧的frp服务被莫名中断，看起来它也有脆弱的一面呀。世间万物都在进化，是时候实现frp的自我管理了，让它可以在各种原因中断后自行检查并自行恢复。这篇文章记录了我是如何高效且快速创建一个frp全自动化守护进程的。</p>","more":"<p>frp分为frpc客户端和frps服务器端，这里以frpc为例，frps是一样的，只需要把以下目录或代码frpc或frpcd改成frps或frpsd。</p>\n<h2 id=\"1-创建frpc开机启动\"><a href=\"#1-创建frpc开机启动\" class=\"headerlink\" title=\"1. 创建frpc开机启动\"></a>1. 创建frpc开机启动</h2><p>创建一个systemctl文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /lib/systemd/system/frpc.service</span><br></pre></td></tr></table></figure>\n<p>保存以下内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=frpc service</span><br><span class=\"line\">#设置网络启动后依赖</span><br><span class=\"line\">After=network.target syslog.target network-online.target</span><br><span class=\"line\">Wants=network.target</span><br><span class=\"line\">Requires=network-online.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">#启动服务的命令（此处写你的frps(frpc)的实际安装目录）</span><br><span class=\"line\">ExecStart=/usr/local/frp/frpc -c /usr/local/frp/frpc.ini</span><br><span class=\"line\">#设置失败5秒后重启</span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\">RestartSec=5s</span><br><span class=\"line\">KillSignal=SIGQUIT</span><br><span class=\"line\">TimeoutStopSec=5</span><br><span class=\"line\">KillMode=process</span><br><span class=\"line\">PrivateTmp=true</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<p>开启frpc开机启动<br><code>systemctl enable frpc.service</code></p>\n<h2 id=\"2-创建frpcd守护进程\"><a href=\"#2-创建frpcd守护进程\" class=\"headerlink\" title=\"2. 创建frpcd守护进程\"></a>2. 创建frpcd守护进程</h2><p>接下来需要实现实时检查frpc状态，如果frpc运行失败则重启服务，以免你睡觉的时候frp因各种原因中断服务。<br>首先创建一个frpcd.sh文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /usr/local/frp/frpcd.sh</span><br></pre></td></tr></table></figure>\n<p>保存以下内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">while true; do</span><br><span class=\"line\"></span><br><span class=\"line\">str1=&quot;service frpc status&quot;</span><br><span class=\"line\">str2=&quot;start proxy success&quot;</span><br><span class=\"line\">result=$($str1 | grep &quot;$&#123;str2&#125;&quot;)</span><br><span class=\"line\">if [[ &quot;$result&quot; != &quot;&quot; ]]</span><br><span class=\"line\">then</span><br><span class=\"line\">#    echo &quot;frpc 正在工作中...&quot;</span><br><span class=\"line\">：</span><br><span class=\"line\">else</span><br><span class=\"line\">#    echo &quot;frpc 运行失败，正在重启...&quot;</span><br><span class=\"line\">service frpc restart</span><br><span class=\"line\">fi</span><br><span class=\"line\">sleep 5</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<p>给它设置执行权限<br>chmod -x /usr/local/frp/frpcd.sh</p>\n<p>启动试试<code>./frpcd.sh</code><br>你可以先停止frpc服务然后看看守护程序能否实现自动检测并重启frcp，通过以下三个命令。<br>service frpc stop #停止frpc服务<br>/usr/local/frp/frpcd.sh #启动frpcd守护<br>service frpc status #检查frpc服务状态<br>如果看到<code>proxy start success</code>就是成功了</p>\n<h2 id=\"3-开机启动frpcd守护进程\"><a href=\"#3-开机启动frpcd守护进程\" class=\"headerlink\" title=\"3. 开机启动frpcd守护进程\"></a>3. 开机启动frpcd守护进程</h2><p>创建一个systemctl文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /lib/systemd/system/frpcd.service</span><br></pre></td></tr></table></figure>\n<p>保存以下内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=frpc daemon service</span><br><span class=\"line\">After=network.target syslog.target</span><br><span class=\"line\">Wants=network.target</span><br><span class=\"line\">Requires=network-online.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">#启动服务的命令（此处写你的frps的实际安装目录）</span><br><span class=\"line\">ExecStart=/usr/local/frp/frpcd.sh</span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\">RestartSec=5s</span><br><span class=\"line\">KillSignal=SIGQUIT</span><br><span class=\"line\">TimeoutStopSec=5</span><br><span class=\"line\">KillMode=process</span><br><span class=\"line\">PrivateTmp=true</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>把守护进程设为开机启动<br><code>systemctl enable frpcd.service</code><br>最后别忘了重新加载systemctl服务<br><code>systemctl daemon-reload</code></p>\n<h2 id=\"4-设置frps的注意事项\"><a href=\"#4-设置frps的注意事项\" class=\"headerlink\" title=\"4. 设置frps的注意事项\"></a>4. 设置frps的注意事项</h2><p>frps服务器端也是同理，但是要注意systemctl的路径，尽量避免路径不准确造成的重定向反馈。用于锚定返回值的str2建议设为<code>running</code>更为合理，避免frps一直在重启从而导致连接失败的问题。</p>\n<h2 id=\"5-reboot\"><a href=\"#5-reboot\" class=\"headerlink\" title=\"5. reboot\"></a>5. reboot</h2><p>Ok，至此Frp已经完成了自我进化，再也不用担心它什么时候断掉了服务，当然你可以<code>reboot</code>来测试一下我的这套frp自我管理系统是否对你的小可爱奏效。</p>"},{"title":"Hexo + Frp + iAWriter = Overclocked Blogger","date":"2020-04-09T10:13:17.000Z","_content":"![](/images/2020/04/hexo-index.png)\n这篇文章通过我的iPhone和iPad基于Markdown标准写作而成，并由Hexo生成纯静态网页发布在Github和我的树莓派上，通过甲骨文在首尔数据中心的服务器对树莓派进行Frp反向代理，最终实现加速访问。\n<!--more-->\n## Less is more\n\n抛弃臃肿的Wordpress迫在眉睫，博客作为一个专注于码字的工具越是精简越好，如此我们才能聚焦在脑海中每一个转瞬即逝的思绪中。\n\n最早关注这类静态博客生成器是因为Github的码农们，我发现他们大部分博客都部署于Github的Pages，一个由Hexo或Hugo驱动的博客似乎成了“大佬”的标志。自从入手树莓派之后自己对于Linux环境也变得愈发熟悉，那么选择一款静态博客生成器并部署在树莓派上，再通过Frp反向代理让我随时随地都能访问、编辑和发布文章岂不是很有趣的一件事。既然想法有了，咱们说干就干吧。\n\n市面上的静态博客生成器那么多，我到底该选哪一款呢，毕竟初衷是为了专注于写作这件事而不是来回折腾（打脸～）。\n\n## Hexo or Hugo?\n\n>困扰我们的不是没有选择，往往是因为选择太多。\n\n最终我在Hexo和Hugo中做出了选择，如果你去Google就会发现，几乎所有人都在从Hexo搬家到Hugo，因为Hugo基于Go语言使网页生成速度快到可以忽略不计，而Hexo的页面生成对于文章和页面众多的博客主来说就要花些时间，但这依然不妨碍我对Hexo的青睐，因为Hugo由一群搞后端的程序员们开发和维护，而Hexo则是由一群搞前端的设计师们簇拥的。\n\n>赏心悦目绝不仅仅是因为表面的光鲜，而是与每个人的内在相互关联。\n—Jacob Xu\n\n## Always Online\n\n随时随地用iA Writer在iPad或iPhone上就可以轻松编辑Markdown文章，通过Samba实时同步连接到我的树莓派，这个我专属的微型云计算数据中心会透过Frp将文章发布到互联网上。当我携带这张只有信用卡大小的数据中心外出时，即便没有Wifi的情况下，比如我乘坐高铁或者公交出行时，我依然可以通过手机给树莓派的共享热点来发布文章。\n\n如果乘坐飞机或者进入深山老林没有了任何网络和蜂窝信号该怎么办？这时候树莓派双Wifi中的一个就开始工作了，它可以作为AP热点开放一个5G共享网络给附近的人，人们通过这个私有网络依然可以协同办公，包括更新文章到Purel.in。","source":"_posts/2020-04-09-Hexo-Frp-iAWriter-Overclocked-Blogger.md","raw":"---\ntitle: Hexo + Frp + iAWriter = Overclocked Blogger\ndate: 2020-04-09 18:13:17\ncategories: [网站]\ntags: [Hexo,Markdown,Blog,Purel.in,树莓派,iA Writer,Samba]\n---\n![](/images/2020/04/hexo-index.png)\n这篇文章通过我的iPhone和iPad基于Markdown标准写作而成，并由Hexo生成纯静态网页发布在Github和我的树莓派上，通过甲骨文在首尔数据中心的服务器对树莓派进行Frp反向代理，最终实现加速访问。\n<!--more-->\n## Less is more\n\n抛弃臃肿的Wordpress迫在眉睫，博客作为一个专注于码字的工具越是精简越好，如此我们才能聚焦在脑海中每一个转瞬即逝的思绪中。\n\n最早关注这类静态博客生成器是因为Github的码农们，我发现他们大部分博客都部署于Github的Pages，一个由Hexo或Hugo驱动的博客似乎成了“大佬”的标志。自从入手树莓派之后自己对于Linux环境也变得愈发熟悉，那么选择一款静态博客生成器并部署在树莓派上，再通过Frp反向代理让我随时随地都能访问、编辑和发布文章岂不是很有趣的一件事。既然想法有了，咱们说干就干吧。\n\n市面上的静态博客生成器那么多，我到底该选哪一款呢，毕竟初衷是为了专注于写作这件事而不是来回折腾（打脸～）。\n\n## Hexo or Hugo?\n\n>困扰我们的不是没有选择，往往是因为选择太多。\n\n最终我在Hexo和Hugo中做出了选择，如果你去Google就会发现，几乎所有人都在从Hexo搬家到Hugo，因为Hugo基于Go语言使网页生成速度快到可以忽略不计，而Hexo的页面生成对于文章和页面众多的博客主来说就要花些时间，但这依然不妨碍我对Hexo的青睐，因为Hugo由一群搞后端的程序员们开发和维护，而Hexo则是由一群搞前端的设计师们簇拥的。\n\n>赏心悦目绝不仅仅是因为表面的光鲜，而是与每个人的内在相互关联。\n—Jacob Xu\n\n## Always Online\n\n随时随地用iA Writer在iPad或iPhone上就可以轻松编辑Markdown文章，通过Samba实时同步连接到我的树莓派，这个我专属的微型云计算数据中心会透过Frp将文章发布到互联网上。当我携带这张只有信用卡大小的数据中心外出时，即便没有Wifi的情况下，比如我乘坐高铁或者公交出行时，我依然可以通过手机给树莓派的共享热点来发布文章。\n\n如果乘坐飞机或者进入深山老林没有了任何网络和蜂窝信号该怎么办？这时候树莓派双Wifi中的一个就开始工作了，它可以作为AP热点开放一个5G共享网络给附近的人，人们通过这个私有网络依然可以协同办公，包括更新文章到Purel.in。","slug":"Hexo-Frp-iAWriter-Overclocked-Blogger","published":1,"updated":"2020-04-09T10:13:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zfpkd50034loc63pey1uku","content":"<p><img src=\"/images/2020/04/hexo-index.png\" alt=\"\"><br>这篇文章通过我的iPhone和iPad基于Markdown标准写作而成，并由Hexo生成纯静态网页发布在Github和我的树莓派上，通过甲骨文在首尔数据中心的服务器对树莓派进行Frp反向代理，最终实现加速访问。</p>\n<span id=\"more\"></span>\n<h2 id=\"Less-is-more\"><a href=\"#Less-is-more\" class=\"headerlink\" title=\"Less is more\"></a>Less is more</h2><p>抛弃臃肿的Wordpress迫在眉睫，博客作为一个专注于码字的工具越是精简越好，如此我们才能聚焦在脑海中每一个转瞬即逝的思绪中。</p>\n<p>最早关注这类静态博客生成器是因为Github的码农们，我发现他们大部分博客都部署于Github的Pages，一个由Hexo或Hugo驱动的博客似乎成了“大佬”的标志。自从入手树莓派之后自己对于Linux环境也变得愈发熟悉，那么选择一款静态博客生成器并部署在树莓派上，再通过Frp反向代理让我随时随地都能访问、编辑和发布文章岂不是很有趣的一件事。既然想法有了，咱们说干就干吧。</p>\n<p>市面上的静态博客生成器那么多，我到底该选哪一款呢，毕竟初衷是为了专注于写作这件事而不是来回折腾（打脸～）。</p>\n<h2 id=\"Hexo-or-Hugo\"><a href=\"#Hexo-or-Hugo\" class=\"headerlink\" title=\"Hexo or Hugo?\"></a>Hexo or Hugo?</h2><blockquote>\n<p>困扰我们的不是没有选择，往往是因为选择太多。</p>\n</blockquote>\n<p>最终我在Hexo和Hugo中做出了选择，如果你去Google就会发现，几乎所有人都在从Hexo搬家到Hugo，因为Hugo基于Go语言使网页生成速度快到可以忽略不计，而Hexo的页面生成对于文章和页面众多的博客主来说就要花些时间，但这依然不妨碍我对Hexo的青睐，因为Hugo由一群搞后端的程序员们开发和维护，而Hexo则是由一群搞前端的设计师们簇拥的。</p>\n<blockquote>\n<p>赏心悦目绝不仅仅是因为表面的光鲜，而是与每个人的内在相互关联。<br>—Jacob Xu</p>\n</blockquote>\n<h2 id=\"Always-Online\"><a href=\"#Always-Online\" class=\"headerlink\" title=\"Always Online\"></a>Always Online</h2><p>随时随地用iA Writer在iPad或iPhone上就可以轻松编辑Markdown文章，通过Samba实时同步连接到我的树莓派，这个我专属的微型云计算数据中心会透过Frp将文章发布到互联网上。当我携带这张只有信用卡大小的数据中心外出时，即便没有Wifi的情况下，比如我乘坐高铁或者公交出行时，我依然可以通过手机给树莓派的共享热点来发布文章。</p>\n<p>如果乘坐飞机或者进入深山老林没有了任何网络和蜂窝信号该怎么办？这时候树莓派双Wifi中的一个就开始工作了，它可以作为AP热点开放一个5G共享网络给附近的人，人们通过这个私有网络依然可以协同办公，包括更新文章到Purel.in。</p>\n","site":{"data":{"menu":[{"name":"文章","icon":"fas fa-newspaper","rows":[{"name":"分类","icon":"fas fa-folder-open","url":"categories/"},{"name":"标签","icon":"fas fa-tags","url":"tags/"},{"name":"归档","icon":"fas fa-archive","url":"archives/"}]},{"name":"邻星","icon":"fas fa-link","url":"friends/"},{"name":"关于","icon":"fas fa-info-circle","url":"about/"},{"name":"留言板","icon":"fas fa-comment-dots","url":"bbs/"},{"name":"实验室","icon":"fas fa-flask","rows":[{"name":"Pi","icon":"fab fa-raspberry-pi","url":"https://pi.purel.in"},{"name":"Cloud","icon":"fab fa-cloudversify","url":"https://cloud.purel.in/"}]}]}},"excerpt":"<p><img src=\"/images/2020/04/hexo-index.png\" alt=\"\"><br>这篇文章通过我的iPhone和iPad基于Markdown标准写作而成，并由Hexo生成纯静态网页发布在Github和我的树莓派上，通过甲骨文在首尔数据中心的服务器对树莓派进行Frp反向代理，最终实现加速访问。</p>","more":"<h2 id=\"Less-is-more\"><a href=\"#Less-is-more\" class=\"headerlink\" title=\"Less is more\"></a>Less is more</h2><p>抛弃臃肿的Wordpress迫在眉睫，博客作为一个专注于码字的工具越是精简越好，如此我们才能聚焦在脑海中每一个转瞬即逝的思绪中。</p>\n<p>最早关注这类静态博客生成器是因为Github的码农们，我发现他们大部分博客都部署于Github的Pages，一个由Hexo或Hugo驱动的博客似乎成了“大佬”的标志。自从入手树莓派之后自己对于Linux环境也变得愈发熟悉，那么选择一款静态博客生成器并部署在树莓派上，再通过Frp反向代理让我随时随地都能访问、编辑和发布文章岂不是很有趣的一件事。既然想法有了，咱们说干就干吧。</p>\n<p>市面上的静态博客生成器那么多，我到底该选哪一款呢，毕竟初衷是为了专注于写作这件事而不是来回折腾（打脸～）。</p>\n<h2 id=\"Hexo-or-Hugo\"><a href=\"#Hexo-or-Hugo\" class=\"headerlink\" title=\"Hexo or Hugo?\"></a>Hexo or Hugo?</h2><blockquote>\n<p>困扰我们的不是没有选择，往往是因为选择太多。</p>\n</blockquote>\n<p>最终我在Hexo和Hugo中做出了选择，如果你去Google就会发现，几乎所有人都在从Hexo搬家到Hugo，因为Hugo基于Go语言使网页生成速度快到可以忽略不计，而Hexo的页面生成对于文章和页面众多的博客主来说就要花些时间，但这依然不妨碍我对Hexo的青睐，因为Hugo由一群搞后端的程序员们开发和维护，而Hexo则是由一群搞前端的设计师们簇拥的。</p>\n<blockquote>\n<p>赏心悦目绝不仅仅是因为表面的光鲜，而是与每个人的内在相互关联。<br>—Jacob Xu</p>\n</blockquote>\n<h2 id=\"Always-Online\"><a href=\"#Always-Online\" class=\"headerlink\" title=\"Always Online\"></a>Always Online</h2><p>随时随地用iA Writer在iPad或iPhone上就可以轻松编辑Markdown文章，通过Samba实时同步连接到我的树莓派，这个我专属的微型云计算数据中心会透过Frp将文章发布到互联网上。当我携带这张只有信用卡大小的数据中心外出时，即便没有Wifi的情况下，比如我乘坐高铁或者公交出行时，我依然可以通过手机给树莓派的共享热点来发布文章。</p>\n<p>如果乘坐飞机或者进入深山老林没有了任何网络和蜂窝信号该怎么办？这时候树莓派双Wifi中的一个就开始工作了，它可以作为AP热点开放一个5G共享网络给附近的人，人们通过这个私有网络依然可以协同办公，包括更新文章到Purel.in。</p>"},{"title":"Hexo同步部署到树莓派与Github","date":"2020-04-12T04:01:50.000Z","_content":"![](/images/2020/04/hexopi.jpg)\n这篇文章记录了我是如何实现通过一个指令将树莓派生成的文章发布到互联网，以及即便换了电脑也可以一键拉取Github上全部Hexo的备份，快速完成本地Hexo部署。\n<!--more-->\n## 1. 安装Git\n### 1.1 将Git部署到树莓派\nVPS服务器请注意设置防火墙相关端口开放，树莓派则建议安装ufw解决一切防火墙端口问题造成的坑。\n首先通过指令`apt install git`安装Git和Node.js，如果是CentOS服务器需要把apt换成yum，我这里主要以树莓派的Debian环境来记录整个部署过程。\n\n### 1.2 全局修改Github用户名\n在树莓派终端输入下列命令修改全局用户名（注意将引号内替换为个人帐号）：\n```\ngit config --global user.name \"你的GitHub用户名\"\ngit config --global user.email \"你的GitHub邮箱\"\n```\n然后查看是否已经全局修改用户名：\n`git config --list`\n返回显示下面信息就是正确了\n```\nuser.name=你的用户名\nuser.email=你的邮箱\n```\n安装NodeJS\n```\ncurl --silent --location https://rpm.nodesource.com/setup_13.x | bash -\n```\n添加git用户\n```\nadduser git \nchmod 740 /etc/sudoers \nnano /etc/sudoers \n```\n找到以下内容 \n```\n## Allow root to run any commands anywhere \nroot ALL=(ALL) ALL \n```\n在下面添加一行 \n`git ALL=(ALL) ALL`\n保存退出并改回权限\n`chmod 400 /etc/sudoers`\n设置 git 用户密码\n`sudo passwd git`\n切换至git用户，创建 ~/.ssh 文件夹和 ~/.ssh/authorized_keys 文件，并赋予相应的权限\n```\nsu git \nmkdir ~/.ssh \nnano ~/.ssh/authorized_keys \n```\n设置SSH Key要回到Mac/PC本机终端内执行：ssh-keygen -t rsa -C \"邮箱地址”，根据提示输入密码等完成设置。查看公开密钥：cat ~/.ssh/id_rsa.pub复制显示的内容。将公钥复制粘贴到\n```\nchmod 600 ~/.ssh/authorized_keys\nchmod 700 ~/.ssh\n```\n在Mac Git Bash 中测试\n`ssh -v git@ip地址 # 服务器外网地址`\n\n测试后如果不需要密码则成功！\n\n如果是树莓派本机从root部署到git，需要注意切换用户来生成和保存密钥。指令和上面一样，在root用户和默认目录下生成ssh并保存至git默认目录即可。\n\n## 2. 部署Nginx环境\n如果还想部署多个网站或者安装lnmp环境，建议使用OneInStack来一键部署。若是单纯为了Hexo，只安装Nginx就足够了，轻量化的部署可以有效减少树莓派的负载。\n### 2.1 安装\n`apt install nginx`\n### 2.2 启动\n```\nsystemctl start nginx # 启动\nsystemctl enable nginx # 开机启动\n```\n输入服务器外网地址出现nginx信息表示启动成功。\n### 2.3 配置\n```\nnano /etc/nginx/nginx.conf\n```\n\n修改内容 server 下\nserver_name 如有域名可以改为自己的;\nlocation / {\n  root /usr/share/nginx/html/blog; # 此处增加为\"/blog\",root指向博客所在目录\n  ...\n}\n修改内容头部`user  nginx;`更改为`user  root;`\n保存退出后执行：\n```\nsudo mkdir -p /usr/share/nginx/html/blog\nsudo chown -R git:git /usr/share/nginx/html/blog\n```\n\n## 3. 部署Git库\n### 3.1 在派初始化一个git裸库\n切换到git用户，然后切换到git用户目录，接着初始化裸库：\n```\nsu git\ncd ~\ngit init --bare blog.git\n```\n### 3.2 新建post-receive文件\n`nano ~/blog.git/hooks/post-receive`\n然后在该文件中输入以下内容：\n```\n#！/bin/sh\ngit --work-tree=/data/wwwroot/blog --git-dir=/home/git/blog.git checkout -f\n```\n### 3.3 备选方案\n```\n#!/bin/bash\nGIT_REPO=/home/git/blog.git\nTMP_GIT_CLONE=/tmp/blog\nPUBLIC_WWW=/data/wwwroot/blog\nrm -rf ${TMP_GIT_CLONE}\ngit clone $GIT_REPO $TMP_GIT_CLONE\nrm -rf ${PUBLIC_WWW}/*\ncp -rf ${TMP_GIT_CLONE}/* ${PUBLIC_WWW}\n```\n### 3.4 赋予权限\n以上两种二选一，保存退出之后再输入以下代码，赋予该文件可执行权限:\n```\nchmod +x ~/blog.git/hooks/post-receive\nchown git:git -R /data/wwwroot/blog\n```\n## 4. 同时部署多平台设置\n编辑blog/_config.yml设置repo源，pi是树莓派的git库，它被指向部署到我们刚刚设置的nginx网站目录，使之可以被访问。\n```\n  repo: \n    pi: git@VPS_IP:/home/git/blog.git\n    github: https://github.com/yourname/yourname.github.io\n  branch: master\n  message:\n```\n## 5. 发布或调试Hexo博客\n`hexo clean && hexo g`\n清除并生成新的Hexo网站\n`hexo clean && hexo g -d`\n清除、生成新的网站并发布到Git或服务器\n通过以上指令发布后打开vps的网址就能看到新的hexo博客啦，也可以通过`hexo s`在浏览器打开`localhost:4000`进行本地调试Hexo。\n## 6. 安装和卸载Hexo插件\n### 6.1 安装插件\n```\nnpm install hexo-deployer-git --save #安装git部署\nnpm install --save hexo-admin #安装后台发布\nnpm install hexo-generator-feed --save #安装rss生成\nnpm install hexo-generator-sitemap --save #安装sitemap\nnpm i -S hexo-generator-search hexo-generator-json-content #搜索依赖包\nnpm i -S hexo-renderer-stylus #安装stylus渲染器\nnpm i -S hexo-helper-qrcode #qr二维码插件\nnpm i -S hexo-related-popular-posts #安装相关文章插件\nnpm i hexo-offline --save #加载加速插件\nnpm install hexo-lazyload-image --save #图片懒加载\nnpm install hexo-baidu-url-submit --save #百度实时提交\n```\n### 6.2 卸载插件\n`npm list`查看已安装的插件列表\n`npm uninstall <插件名>` #卸载哞个插件\n进入node_modules/目录删除对应的插件文件\n`rm -rf <插件名>` #删除插件目录\n清除cache缓存\n`npm cache clean -f`\n至此插件干干净净的卸载完毕\n\n## 7. 备份整个Hexo\n### 7.1 在Github新建分支\n在master下新建分支名为hexo，setting-branch下修改default源为hexo，然后\ngit clone到本地，在MacOS下 Command+Shift+. 查看隐藏文件，删除该目录下.git外所有文件，树莓派则在文件夹点击右键显示隐藏文件。\n\n新建或修改.gitignore用来忽略一些不需要的文件\n```\n.DS_Store\nThumbs.db\ndb.json\n*.log\nnode_modules/\npublic/\n.deploy*/\n```\n### 7.2 PUSH到Github\n```\ngit add .\ngit commit -m “注释”\ngit push\n```\n### 7.3 Git的常用指令\nadd、commit、push命令，简单的代码提交流程\n`git status` 查看工作区代码相对于暂存区的差别\n`git add . `将当前目录下修改的所有代码从工作区添加到暂存区 . 代表当前目录\n`git commit -m ‘注释’ `将缓存区内容添加到本地仓库\n`git push origin master `将本地版本库推送到远程服务器，\norigin是远程主机，master表示是远程服务器上的master分支，分支名是可以修改的\n### 7.4 一键发布博客并完整备份\n现在Github有两个分支，一个是master用于存放Hexo生成的public文件，上文我们新建的hexo分支用于存放Hexo的完整备份。\n#### 7.4.1 发布博客指令\n`hexo clean && hexo g -d`\n#### 7.4.2 备份完整的Hexo\n同步Hexo完整备份到Github分支hexo\n`git add . && git commit –m \"注释\" && git push`\n## 8. 升级nodejs的方法\n更新升级node版本的方法如下：\n### 8.1 查看当前node版本\n`node –v`\n### 8.2 安装n模块\n`npm install -g n`\n### 8.3 升级到指定版本/最新版本\n该步骤可能需要花费一些时间。升级之前，可以执行`n ls`查看可升级的版本，如：`n 6.9.1`\n或者你也可以告诉管理器，安装最新的稳定版本\n`n stable`\n### 8.4 检查升级是否成功\n`node -v`\n如果得到的版本信息不正确，可能需要重启机器。\n### 8.5 常见问题\n如果遇到npm指令出现错误比如`Error: Cannot find module 'semver'`\n重新安装最新版本即可：\n```\ncurl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -\napt-get update\napt-get install nodejs\n```\n之后检查它们是否被正确部署\n```\nnode -v\nnodes -v\nnpm -v\n```\n全部正确输出则代表安装正确。\n然后重新安装Hexo\n`npm install -g hexo-cli`","source":"_posts/2020-04-12-Deploy-Hexo-to-Raspberry-Pi-and-Github.md","raw":"---\ntitle: Hexo同步部署到树莓派与Github\ndate: 2020-04-12 12:01:50\ncategories: [网站]\ntags: [树梅派,Hexo,Github,Purel.in]\n---\n![](/images/2020/04/hexopi.jpg)\n这篇文章记录了我是如何实现通过一个指令将树莓派生成的文章发布到互联网，以及即便换了电脑也可以一键拉取Github上全部Hexo的备份，快速完成本地Hexo部署。\n<!--more-->\n## 1. 安装Git\n### 1.1 将Git部署到树莓派\nVPS服务器请注意设置防火墙相关端口开放，树莓派则建议安装ufw解决一切防火墙端口问题造成的坑。\n首先通过指令`apt install git`安装Git和Node.js，如果是CentOS服务器需要把apt换成yum，我这里主要以树莓派的Debian环境来记录整个部署过程。\n\n### 1.2 全局修改Github用户名\n在树莓派终端输入下列命令修改全局用户名（注意将引号内替换为个人帐号）：\n```\ngit config --global user.name \"你的GitHub用户名\"\ngit config --global user.email \"你的GitHub邮箱\"\n```\n然后查看是否已经全局修改用户名：\n`git config --list`\n返回显示下面信息就是正确了\n```\nuser.name=你的用户名\nuser.email=你的邮箱\n```\n安装NodeJS\n```\ncurl --silent --location https://rpm.nodesource.com/setup_13.x | bash -\n```\n添加git用户\n```\nadduser git \nchmod 740 /etc/sudoers \nnano /etc/sudoers \n```\n找到以下内容 \n```\n## Allow root to run any commands anywhere \nroot ALL=(ALL) ALL \n```\n在下面添加一行 \n`git ALL=(ALL) ALL`\n保存退出并改回权限\n`chmod 400 /etc/sudoers`\n设置 git 用户密码\n`sudo passwd git`\n切换至git用户，创建 ~/.ssh 文件夹和 ~/.ssh/authorized_keys 文件，并赋予相应的权限\n```\nsu git \nmkdir ~/.ssh \nnano ~/.ssh/authorized_keys \n```\n设置SSH Key要回到Mac/PC本机终端内执行：ssh-keygen -t rsa -C \"邮箱地址”，根据提示输入密码等完成设置。查看公开密钥：cat ~/.ssh/id_rsa.pub复制显示的内容。将公钥复制粘贴到\n```\nchmod 600 ~/.ssh/authorized_keys\nchmod 700 ~/.ssh\n```\n在Mac Git Bash 中测试\n`ssh -v git@ip地址 # 服务器外网地址`\n\n测试后如果不需要密码则成功！\n\n如果是树莓派本机从root部署到git，需要注意切换用户来生成和保存密钥。指令和上面一样，在root用户和默认目录下生成ssh并保存至git默认目录即可。\n\n## 2. 部署Nginx环境\n如果还想部署多个网站或者安装lnmp环境，建议使用OneInStack来一键部署。若是单纯为了Hexo，只安装Nginx就足够了，轻量化的部署可以有效减少树莓派的负载。\n### 2.1 安装\n`apt install nginx`\n### 2.2 启动\n```\nsystemctl start nginx # 启动\nsystemctl enable nginx # 开机启动\n```\n输入服务器外网地址出现nginx信息表示启动成功。\n### 2.3 配置\n```\nnano /etc/nginx/nginx.conf\n```\n\n修改内容 server 下\nserver_name 如有域名可以改为自己的;\nlocation / {\n  root /usr/share/nginx/html/blog; # 此处增加为\"/blog\",root指向博客所在目录\n  ...\n}\n修改内容头部`user  nginx;`更改为`user  root;`\n保存退出后执行：\n```\nsudo mkdir -p /usr/share/nginx/html/blog\nsudo chown -R git:git /usr/share/nginx/html/blog\n```\n\n## 3. 部署Git库\n### 3.1 在派初始化一个git裸库\n切换到git用户，然后切换到git用户目录，接着初始化裸库：\n```\nsu git\ncd ~\ngit init --bare blog.git\n```\n### 3.2 新建post-receive文件\n`nano ~/blog.git/hooks/post-receive`\n然后在该文件中输入以下内容：\n```\n#！/bin/sh\ngit --work-tree=/data/wwwroot/blog --git-dir=/home/git/blog.git checkout -f\n```\n### 3.3 备选方案\n```\n#!/bin/bash\nGIT_REPO=/home/git/blog.git\nTMP_GIT_CLONE=/tmp/blog\nPUBLIC_WWW=/data/wwwroot/blog\nrm -rf ${TMP_GIT_CLONE}\ngit clone $GIT_REPO $TMP_GIT_CLONE\nrm -rf ${PUBLIC_WWW}/*\ncp -rf ${TMP_GIT_CLONE}/* ${PUBLIC_WWW}\n```\n### 3.4 赋予权限\n以上两种二选一，保存退出之后再输入以下代码，赋予该文件可执行权限:\n```\nchmod +x ~/blog.git/hooks/post-receive\nchown git:git -R /data/wwwroot/blog\n```\n## 4. 同时部署多平台设置\n编辑blog/_config.yml设置repo源，pi是树莓派的git库，它被指向部署到我们刚刚设置的nginx网站目录，使之可以被访问。\n```\n  repo: \n    pi: git@VPS_IP:/home/git/blog.git\n    github: https://github.com/yourname/yourname.github.io\n  branch: master\n  message:\n```\n## 5. 发布或调试Hexo博客\n`hexo clean && hexo g`\n清除并生成新的Hexo网站\n`hexo clean && hexo g -d`\n清除、生成新的网站并发布到Git或服务器\n通过以上指令发布后打开vps的网址就能看到新的hexo博客啦，也可以通过`hexo s`在浏览器打开`localhost:4000`进行本地调试Hexo。\n## 6. 安装和卸载Hexo插件\n### 6.1 安装插件\n```\nnpm install hexo-deployer-git --save #安装git部署\nnpm install --save hexo-admin #安装后台发布\nnpm install hexo-generator-feed --save #安装rss生成\nnpm install hexo-generator-sitemap --save #安装sitemap\nnpm i -S hexo-generator-search hexo-generator-json-content #搜索依赖包\nnpm i -S hexo-renderer-stylus #安装stylus渲染器\nnpm i -S hexo-helper-qrcode #qr二维码插件\nnpm i -S hexo-related-popular-posts #安装相关文章插件\nnpm i hexo-offline --save #加载加速插件\nnpm install hexo-lazyload-image --save #图片懒加载\nnpm install hexo-baidu-url-submit --save #百度实时提交\n```\n### 6.2 卸载插件\n`npm list`查看已安装的插件列表\n`npm uninstall <插件名>` #卸载哞个插件\n进入node_modules/目录删除对应的插件文件\n`rm -rf <插件名>` #删除插件目录\n清除cache缓存\n`npm cache clean -f`\n至此插件干干净净的卸载完毕\n\n## 7. 备份整个Hexo\n### 7.1 在Github新建分支\n在master下新建分支名为hexo，setting-branch下修改default源为hexo，然后\ngit clone到本地，在MacOS下 Command+Shift+. 查看隐藏文件，删除该目录下.git外所有文件，树莓派则在文件夹点击右键显示隐藏文件。\n\n新建或修改.gitignore用来忽略一些不需要的文件\n```\n.DS_Store\nThumbs.db\ndb.json\n*.log\nnode_modules/\npublic/\n.deploy*/\n```\n### 7.2 PUSH到Github\n```\ngit add .\ngit commit -m “注释”\ngit push\n```\n### 7.3 Git的常用指令\nadd、commit、push命令，简单的代码提交流程\n`git status` 查看工作区代码相对于暂存区的差别\n`git add . `将当前目录下修改的所有代码从工作区添加到暂存区 . 代表当前目录\n`git commit -m ‘注释’ `将缓存区内容添加到本地仓库\n`git push origin master `将本地版本库推送到远程服务器，\norigin是远程主机，master表示是远程服务器上的master分支，分支名是可以修改的\n### 7.4 一键发布博客并完整备份\n现在Github有两个分支，一个是master用于存放Hexo生成的public文件，上文我们新建的hexo分支用于存放Hexo的完整备份。\n#### 7.4.1 发布博客指令\n`hexo clean && hexo g -d`\n#### 7.4.2 备份完整的Hexo\n同步Hexo完整备份到Github分支hexo\n`git add . && git commit –m \"注释\" && git push`\n## 8. 升级nodejs的方法\n更新升级node版本的方法如下：\n### 8.1 查看当前node版本\n`node –v`\n### 8.2 安装n模块\n`npm install -g n`\n### 8.3 升级到指定版本/最新版本\n该步骤可能需要花费一些时间。升级之前，可以执行`n ls`查看可升级的版本，如：`n 6.9.1`\n或者你也可以告诉管理器，安装最新的稳定版本\n`n stable`\n### 8.4 检查升级是否成功\n`node -v`\n如果得到的版本信息不正确，可能需要重启机器。\n### 8.5 常见问题\n如果遇到npm指令出现错误比如`Error: Cannot find module 'semver'`\n重新安装最新版本即可：\n```\ncurl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -\napt-get update\napt-get install nodejs\n```\n之后检查它们是否被正确部署\n```\nnode -v\nnodes -v\nnpm -v\n```\n全部正确输出则代表安装正确。\n然后重新安装Hexo\n`npm install -g hexo-cli`","slug":"Deploy-Hexo-to-Raspberry-Pi-and-Github","published":1,"updated":"2020-04-12T04:01:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zfpkd60035loc6bhez09ia","content":"<p><img src=\"/images/2020/04/hexopi.jpg\" alt=\"\"><br>这篇文章记录了我是如何实现通过一个指令将树莓派生成的文章发布到互联网，以及即便换了电脑也可以一键拉取Github上全部Hexo的备份，快速完成本地Hexo部署。</p>\n<span id=\"more\"></span>\n<h2 id=\"1-安装Git\"><a href=\"#1-安装Git\" class=\"headerlink\" title=\"1. 安装Git\"></a>1. 安装Git</h2><h3 id=\"1-1-将Git部署到树莓派\"><a href=\"#1-1-将Git部署到树莓派\" class=\"headerlink\" title=\"1.1 将Git部署到树莓派\"></a>1.1 将Git部署到树莓派</h3><p>VPS服务器请注意设置防火墙相关端口开放，树莓派则建议安装ufw解决一切防火墙端口问题造成的坑。<br>首先通过指令<code>apt install git</code>安装Git和Node.js，如果是CentOS服务器需要把apt换成yum，我这里主要以树莓派的Debian环境来记录整个部署过程。</p>\n<h3 id=\"1-2-全局修改Github用户名\"><a href=\"#1-2-全局修改Github用户名\" class=\"headerlink\" title=\"1.2 全局修改Github用户名\"></a>1.2 全局修改Github用户名</h3><p>在树莓派终端输入下列命令修改全局用户名（注意将引号内替换为个人帐号）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class=\"line\">git config --global user.email &quot;你的GitHub邮箱&quot;</span><br></pre></td></tr></table></figure>\n<p>然后查看是否已经全局修改用户名：<br><code>git config --list</code><br>返回显示下面信息就是正确了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user.name=你的用户名</span><br><span class=\"line\">user.email=你的邮箱</span><br></pre></td></tr></table></figure>\n<p>安装NodeJS</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --silent --location https://rpm.nodesource.com/setup_13.x | bash -</span><br></pre></td></tr></table></figure>\n<p>添加git用户</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adduser git </span><br><span class=\"line\">chmod 740 /etc/sudoers </span><br><span class=\"line\">nano /etc/sudoers </span><br></pre></td></tr></table></figure>\n<p>找到以下内容 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## Allow root to run any commands anywhere </span><br><span class=\"line\">root ALL=(ALL) ALL </span><br></pre></td></tr></table></figure>\n<p>在下面添加一行<br><code>git ALL=(ALL) ALL</code><br>保存退出并改回权限<br><code>chmod 400 /etc/sudoers</code><br>设置 git 用户密码<br><code>sudo passwd git</code><br>切换至git用户，创建 ~/.ssh 文件夹和 ~/.ssh/authorized_keys 文件，并赋予相应的权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su git </span><br><span class=\"line\">mkdir ~/.ssh </span><br><span class=\"line\">nano ~/.ssh/authorized_keys </span><br></pre></td></tr></table></figure>\n<p>设置SSH Key要回到Mac/PC本机终端内执行：ssh-keygen -t rsa -C “邮箱地址”，根据提示输入密码等完成设置。查看公开密钥：cat ~/.ssh/id_rsa.pub复制显示的内容。将公钥复制粘贴到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 600 ~/.ssh/authorized_keys</span><br><span class=\"line\">chmod 700 ~/.ssh</span><br></pre></td></tr></table></figure>\n<p>在Mac Git Bash 中测试<br><code>ssh -v git@ip地址 # 服务器外网地址</code></p>\n<p>测试后如果不需要密码则成功！</p>\n<p>如果是树莓派本机从root部署到git，需要注意切换用户来生成和保存密钥。指令和上面一样，在root用户和默认目录下生成ssh并保存至git默认目录即可。</p>\n<h2 id=\"2-部署Nginx环境\"><a href=\"#2-部署Nginx环境\" class=\"headerlink\" title=\"2. 部署Nginx环境\"></a>2. 部署Nginx环境</h2><p>如果还想部署多个网站或者安装lnmp环境，建议使用OneInStack来一键部署。若是单纯为了Hexo，只安装Nginx就足够了，轻量化的部署可以有效减少树莓派的负载。</p>\n<h3 id=\"2-1-安装\"><a href=\"#2-1-安装\" class=\"headerlink\" title=\"2.1 安装\"></a>2.1 安装</h3><p><code>apt install nginx</code></p>\n<h3 id=\"2-2-启动\"><a href=\"#2-2-启动\" class=\"headerlink\" title=\"2.2 启动\"></a>2.2 启动</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start nginx # 启动</span><br><span class=\"line\">systemctl enable nginx # 开机启动</span><br></pre></td></tr></table></figure>\n<p>输入服务器外网地址出现nginx信息表示启动成功。</p>\n<h3 id=\"2-3-配置\"><a href=\"#2-3-配置\" class=\"headerlink\" title=\"2.3 配置\"></a>2.3 配置</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p>修改内容 server 下<br>server_name 如有域名可以改为自己的;<br>location / {<br>  root /usr/share/nginx/html/blog; # 此处增加为”/blog”,root指向博客所在目录<br>  …<br>}<br>修改内容头部<code>user  nginx;</code>更改为<code>user  root;</code><br>保存退出后执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /usr/share/nginx/html/blog</span><br><span class=\"line\">sudo chown -R git:git /usr/share/nginx/html/blog</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-部署Git库\"><a href=\"#3-部署Git库\" class=\"headerlink\" title=\"3. 部署Git库\"></a>3. 部署Git库</h2><h3 id=\"3-1-在派初始化一个git裸库\"><a href=\"#3-1-在派初始化一个git裸库\" class=\"headerlink\" title=\"3.1 在派初始化一个git裸库\"></a>3.1 在派初始化一个git裸库</h3><p>切换到git用户，然后切换到git用户目录，接着初始化裸库：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su git</span><br><span class=\"line\">cd ~</span><br><span class=\"line\">git init --bare blog.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-新建post-receive文件\"><a href=\"#3-2-新建post-receive文件\" class=\"headerlink\" title=\"3.2 新建post-receive文件\"></a>3.2 新建post-receive文件</h3><p><code>nano ~/blog.git/hooks/post-receive</code><br>然后在该文件中输入以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#！/bin/sh</span><br><span class=\"line\">git --work-tree=/data/wwwroot/blog --git-dir=/home/git/blog.git checkout -f</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-备选方案\"><a href=\"#3-3-备选方案\" class=\"headerlink\" title=\"3.3 备选方案\"></a>3.3 备选方案</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">GIT_REPO=/home/git/blog.git</span><br><span class=\"line\">TMP_GIT_CLONE=/tmp/blog</span><br><span class=\"line\">PUBLIC_WWW=/data/wwwroot/blog</span><br><span class=\"line\">rm -rf $&#123;TMP_GIT_CLONE&#125;</span><br><span class=\"line\">git clone $GIT_REPO $TMP_GIT_CLONE</span><br><span class=\"line\">rm -rf $&#123;PUBLIC_WWW&#125;/*</span><br><span class=\"line\">cp -rf $&#123;TMP_GIT_CLONE&#125;/* $&#123;PUBLIC_WWW&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-4-赋予权限\"><a href=\"#3-4-赋予权限\" class=\"headerlink\" title=\"3.4 赋予权限\"></a>3.4 赋予权限</h3><p>以上两种二选一，保存退出之后再输入以下代码，赋予该文件可执行权限:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x ~/blog.git/hooks/post-receive</span><br><span class=\"line\">chown git:git -R /data/wwwroot/blog</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-同时部署多平台设置\"><a href=\"#4-同时部署多平台设置\" class=\"headerlink\" title=\"4. 同时部署多平台设置\"></a>4. 同时部署多平台设置</h2><p>编辑blog/_config.yml设置repo源，pi是树莓派的git库，它被指向部署到我们刚刚设置的nginx网站目录，使之可以被访问。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repo: </span><br><span class=\"line\">  pi: git@VPS_IP:/home/git/blog.git</span><br><span class=\"line\">  github: https://github.com/yourname/yourname.github.io</span><br><span class=\"line\">branch: master</span><br><span class=\"line\">message:</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-发布或调试Hexo博客\"><a href=\"#5-发布或调试Hexo博客\" class=\"headerlink\" title=\"5. 发布或调试Hexo博客\"></a>5. 发布或调试Hexo博客</h2><p><code>hexo clean &amp;&amp; hexo g</code><br>清除并生成新的Hexo网站<br><code>hexo clean &amp;&amp; hexo g -d</code><br>清除、生成新的网站并发布到Git或服务器<br>通过以上指令发布后打开vps的网址就能看到新的hexo博客啦，也可以通过<code>hexo s</code>在浏览器打开<code>localhost:4000</code>进行本地调试Hexo。</p>\n<h2 id=\"6-安装和卸载Hexo插件\"><a href=\"#6-安装和卸载Hexo插件\" class=\"headerlink\" title=\"6. 安装和卸载Hexo插件\"></a>6. 安装和卸载Hexo插件</h2><h3 id=\"6-1-安装插件\"><a href=\"#6-1-安装插件\" class=\"headerlink\" title=\"6.1 安装插件\"></a>6.1 安装插件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save #安装git部署</span><br><span class=\"line\">npm install --save hexo-admin #安装后台发布</span><br><span class=\"line\">npm install hexo-generator-feed --save #安装rss生成</span><br><span class=\"line\">npm install hexo-generator-sitemap --save #安装sitemap</span><br><span class=\"line\">npm i -S hexo-generator-search hexo-generator-json-content #搜索依赖包</span><br><span class=\"line\">npm i -S hexo-renderer-stylus #安装stylus渲染器</span><br><span class=\"line\">npm i -S hexo-helper-qrcode #qr二维码插件</span><br><span class=\"line\">npm i -S hexo-related-popular-posts #安装相关文章插件</span><br><span class=\"line\">npm i hexo-offline --save #加载加速插件</span><br><span class=\"line\">npm install hexo-lazyload-image --save #图片懒加载</span><br><span class=\"line\">npm install hexo-baidu-url-submit --save #百度实时提交</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-2-卸载插件\"><a href=\"#6-2-卸载插件\" class=\"headerlink\" title=\"6.2 卸载插件\"></a>6.2 卸载插件</h3><p><code>npm list</code>查看已安装的插件列表<br><code>npm uninstall &lt;插件名&gt;</code> #卸载哞个插件<br>进入node_modules/目录删除对应的插件文件<br><code>rm -rf &lt;插件名&gt;</code> #删除插件目录<br>清除cache缓存<br><code>npm cache clean -f</code><br>至此插件干干净净的卸载完毕</p>\n<h2 id=\"7-备份整个Hexo\"><a href=\"#7-备份整个Hexo\" class=\"headerlink\" title=\"7. 备份整个Hexo\"></a>7. 备份整个Hexo</h2><h3 id=\"7-1-在Github新建分支\"><a href=\"#7-1-在Github新建分支\" class=\"headerlink\" title=\"7.1 在Github新建分支\"></a>7.1 在Github新建分支</h3><p>在master下新建分支名为hexo，setting-branch下修改default源为hexo，然后<br>git clone到本地，在MacOS下 Command+Shift+. 查看隐藏文件，删除该目录下.git外所有文件，树莓派则在文件夹点击右键显示隐藏文件。</p>\n<p>新建或修改.gitignore用来忽略一些不需要的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.DS_Store</span><br><span class=\"line\">Thumbs.db</span><br><span class=\"line\">db.json</span><br><span class=\"line\">*.log</span><br><span class=\"line\">node_modules/</span><br><span class=\"line\">public/</span><br><span class=\"line\">.deploy*/</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-2-PUSH到Github\"><a href=\"#7-2-PUSH到Github\" class=\"headerlink\" title=\"7.2 PUSH到Github\"></a>7.2 PUSH到Github</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m “注释”</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-3-Git的常用指令\"><a href=\"#7-3-Git的常用指令\" class=\"headerlink\" title=\"7.3 Git的常用指令\"></a>7.3 Git的常用指令</h3><p>add、commit、push命令，简单的代码提交流程<br><code>git status</code> 查看工作区代码相对于暂存区的差别<br><code>git add .</code>将当前目录下修改的所有代码从工作区添加到暂存区 . 代表当前目录<br><code>git commit -m ‘注释’</code>将缓存区内容添加到本地仓库<br><code>git push origin master</code>将本地版本库推送到远程服务器，<br>origin是远程主机，master表示是远程服务器上的master分支，分支名是可以修改的</p>\n<h3 id=\"7-4-一键发布博客并完整备份\"><a href=\"#7-4-一键发布博客并完整备份\" class=\"headerlink\" title=\"7.4 一键发布博客并完整备份\"></a>7.4 一键发布博客并完整备份</h3><p>现在Github有两个分支，一个是master用于存放Hexo生成的public文件，上文我们新建的hexo分支用于存放Hexo的完整备份。</p>\n<h4 id=\"7-4-1-发布博客指令\"><a href=\"#7-4-1-发布博客指令\" class=\"headerlink\" title=\"7.4.1 发布博客指令\"></a>7.4.1 发布博客指令</h4><p><code>hexo clean &amp;&amp; hexo g -d</code></p>\n<h4 id=\"7-4-2-备份完整的Hexo\"><a href=\"#7-4-2-备份完整的Hexo\" class=\"headerlink\" title=\"7.4.2 备份完整的Hexo\"></a>7.4.2 备份完整的Hexo</h4><p>同步Hexo完整备份到Github分支hexo<br><code>git add . &amp;&amp; git commit –m &quot;注释&quot; &amp;&amp; git push</code></p>\n<h2 id=\"8-升级nodejs的方法\"><a href=\"#8-升级nodejs的方法\" class=\"headerlink\" title=\"8. 升级nodejs的方法\"></a>8. 升级nodejs的方法</h2><p>更新升级node版本的方法如下：</p>\n<h3 id=\"8-1-查看当前node版本\"><a href=\"#8-1-查看当前node版本\" class=\"headerlink\" title=\"8.1 查看当前node版本\"></a>8.1 查看当前node版本</h3><p><code>node –v</code></p>\n<h3 id=\"8-2-安装n模块\"><a href=\"#8-2-安装n模块\" class=\"headerlink\" title=\"8.2 安装n模块\"></a>8.2 安装n模块</h3><p><code>npm install -g n</code></p>\n<h3 id=\"8-3-升级到指定版本-最新版本\"><a href=\"#8-3-升级到指定版本-最新版本\" class=\"headerlink\" title=\"8.3 升级到指定版本/最新版本\"></a>8.3 升级到指定版本/最新版本</h3><p>该步骤可能需要花费一些时间。升级之前，可以执行<code>n ls</code>查看可升级的版本，如：<code>n 6.9.1</code><br>或者你也可以告诉管理器，安装最新的稳定版本<br><code>n stable</code></p>\n<h3 id=\"8-4-检查升级是否成功\"><a href=\"#8-4-检查升级是否成功\" class=\"headerlink\" title=\"8.4 检查升级是否成功\"></a>8.4 检查升级是否成功</h3><p><code>node -v</code><br>如果得到的版本信息不正确，可能需要重启机器。</p>\n<h3 id=\"8-5-常见问题\"><a href=\"#8-5-常见问题\" class=\"headerlink\" title=\"8.5 常见问题\"></a>8.5 常见问题</h3><p>如果遇到npm指令出现错误比如<code>Error: Cannot find module &#39;semver&#39;</code><br>重新安装最新版本即可：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -</span><br><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install nodejs</span><br></pre></td></tr></table></figure>\n<p>之后检查它们是否被正确部署</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br><span class=\"line\">nodes -v</span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n<p>全部正确输出则代表安装正确。<br>然后重新安装Hexo<br><code>npm install -g hexo-cli</code></p>\n","site":{"data":{"menu":[{"name":"文章","icon":"fas fa-newspaper","rows":[{"name":"分类","icon":"fas fa-folder-open","url":"categories/"},{"name":"标签","icon":"fas fa-tags","url":"tags/"},{"name":"归档","icon":"fas fa-archive","url":"archives/"}]},{"name":"邻星","icon":"fas fa-link","url":"friends/"},{"name":"关于","icon":"fas fa-info-circle","url":"about/"},{"name":"留言板","icon":"fas fa-comment-dots","url":"bbs/"},{"name":"实验室","icon":"fas fa-flask","rows":[{"name":"Pi","icon":"fab fa-raspberry-pi","url":"https://pi.purel.in"},{"name":"Cloud","icon":"fab fa-cloudversify","url":"https://cloud.purel.in/"}]}]}},"excerpt":"<p><img src=\"/images/2020/04/hexopi.jpg\" alt=\"\"><br>这篇文章记录了我是如何实现通过一个指令将树莓派生成的文章发布到互联网，以及即便换了电脑也可以一键拉取Github上全部Hexo的备份，快速完成本地Hexo部署。</p>","more":"<h2 id=\"1-安装Git\"><a href=\"#1-安装Git\" class=\"headerlink\" title=\"1. 安装Git\"></a>1. 安装Git</h2><h3 id=\"1-1-将Git部署到树莓派\"><a href=\"#1-1-将Git部署到树莓派\" class=\"headerlink\" title=\"1.1 将Git部署到树莓派\"></a>1.1 将Git部署到树莓派</h3><p>VPS服务器请注意设置防火墙相关端口开放，树莓派则建议安装ufw解决一切防火墙端口问题造成的坑。<br>首先通过指令<code>apt install git</code>安装Git和Node.js，如果是CentOS服务器需要把apt换成yum，我这里主要以树莓派的Debian环境来记录整个部署过程。</p>\n<h3 id=\"1-2-全局修改Github用户名\"><a href=\"#1-2-全局修改Github用户名\" class=\"headerlink\" title=\"1.2 全局修改Github用户名\"></a>1.2 全局修改Github用户名</h3><p>在树莓派终端输入下列命令修改全局用户名（注意将引号内替换为个人帐号）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class=\"line\">git config --global user.email &quot;你的GitHub邮箱&quot;</span><br></pre></td></tr></table></figure>\n<p>然后查看是否已经全局修改用户名：<br><code>git config --list</code><br>返回显示下面信息就是正确了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user.name=你的用户名</span><br><span class=\"line\">user.email=你的邮箱</span><br></pre></td></tr></table></figure>\n<p>安装NodeJS</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --silent --location https://rpm.nodesource.com/setup_13.x | bash -</span><br></pre></td></tr></table></figure>\n<p>添加git用户</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adduser git </span><br><span class=\"line\">chmod 740 /etc/sudoers </span><br><span class=\"line\">nano /etc/sudoers </span><br></pre></td></tr></table></figure>\n<p>找到以下内容 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## Allow root to run any commands anywhere </span><br><span class=\"line\">root ALL=(ALL) ALL </span><br></pre></td></tr></table></figure>\n<p>在下面添加一行<br><code>git ALL=(ALL) ALL</code><br>保存退出并改回权限<br><code>chmod 400 /etc/sudoers</code><br>设置 git 用户密码<br><code>sudo passwd git</code><br>切换至git用户，创建 ~/.ssh 文件夹和 ~/.ssh/authorized_keys 文件，并赋予相应的权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su git </span><br><span class=\"line\">mkdir ~/.ssh </span><br><span class=\"line\">nano ~/.ssh/authorized_keys </span><br></pre></td></tr></table></figure>\n<p>设置SSH Key要回到Mac/PC本机终端内执行：ssh-keygen -t rsa -C “邮箱地址”，根据提示输入密码等完成设置。查看公开密钥：cat ~/.ssh/id_rsa.pub复制显示的内容。将公钥复制粘贴到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 600 ~/.ssh/authorized_keys</span><br><span class=\"line\">chmod 700 ~/.ssh</span><br></pre></td></tr></table></figure>\n<p>在Mac Git Bash 中测试<br><code>ssh -v git@ip地址 # 服务器外网地址</code></p>\n<p>测试后如果不需要密码则成功！</p>\n<p>如果是树莓派本机从root部署到git，需要注意切换用户来生成和保存密钥。指令和上面一样，在root用户和默认目录下生成ssh并保存至git默认目录即可。</p>\n<h2 id=\"2-部署Nginx环境\"><a href=\"#2-部署Nginx环境\" class=\"headerlink\" title=\"2. 部署Nginx环境\"></a>2. 部署Nginx环境</h2><p>如果还想部署多个网站或者安装lnmp环境，建议使用OneInStack来一键部署。若是单纯为了Hexo，只安装Nginx就足够了，轻量化的部署可以有效减少树莓派的负载。</p>\n<h3 id=\"2-1-安装\"><a href=\"#2-1-安装\" class=\"headerlink\" title=\"2.1 安装\"></a>2.1 安装</h3><p><code>apt install nginx</code></p>\n<h3 id=\"2-2-启动\"><a href=\"#2-2-启动\" class=\"headerlink\" title=\"2.2 启动\"></a>2.2 启动</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start nginx # 启动</span><br><span class=\"line\">systemctl enable nginx # 开机启动</span><br></pre></td></tr></table></figure>\n<p>输入服务器外网地址出现nginx信息表示启动成功。</p>\n<h3 id=\"2-3-配置\"><a href=\"#2-3-配置\" class=\"headerlink\" title=\"2.3 配置\"></a>2.3 配置</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p>修改内容 server 下<br>server_name 如有域名可以改为自己的;<br>location / {<br>  root /usr/share/nginx/html/blog; # 此处增加为”/blog”,root指向博客所在目录<br>  …<br>}<br>修改内容头部<code>user  nginx;</code>更改为<code>user  root;</code><br>保存退出后执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /usr/share/nginx/html/blog</span><br><span class=\"line\">sudo chown -R git:git /usr/share/nginx/html/blog</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-部署Git库\"><a href=\"#3-部署Git库\" class=\"headerlink\" title=\"3. 部署Git库\"></a>3. 部署Git库</h2><h3 id=\"3-1-在派初始化一个git裸库\"><a href=\"#3-1-在派初始化一个git裸库\" class=\"headerlink\" title=\"3.1 在派初始化一个git裸库\"></a>3.1 在派初始化一个git裸库</h3><p>切换到git用户，然后切换到git用户目录，接着初始化裸库：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su git</span><br><span class=\"line\">cd ~</span><br><span class=\"line\">git init --bare blog.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-新建post-receive文件\"><a href=\"#3-2-新建post-receive文件\" class=\"headerlink\" title=\"3.2 新建post-receive文件\"></a>3.2 新建post-receive文件</h3><p><code>nano ~/blog.git/hooks/post-receive</code><br>然后在该文件中输入以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#！/bin/sh</span><br><span class=\"line\">git --work-tree=/data/wwwroot/blog --git-dir=/home/git/blog.git checkout -f</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-备选方案\"><a href=\"#3-3-备选方案\" class=\"headerlink\" title=\"3.3 备选方案\"></a>3.3 备选方案</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">GIT_REPO=/home/git/blog.git</span><br><span class=\"line\">TMP_GIT_CLONE=/tmp/blog</span><br><span class=\"line\">PUBLIC_WWW=/data/wwwroot/blog</span><br><span class=\"line\">rm -rf $&#123;TMP_GIT_CLONE&#125;</span><br><span class=\"line\">git clone $GIT_REPO $TMP_GIT_CLONE</span><br><span class=\"line\">rm -rf $&#123;PUBLIC_WWW&#125;/*</span><br><span class=\"line\">cp -rf $&#123;TMP_GIT_CLONE&#125;/* $&#123;PUBLIC_WWW&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-4-赋予权限\"><a href=\"#3-4-赋予权限\" class=\"headerlink\" title=\"3.4 赋予权限\"></a>3.4 赋予权限</h3><p>以上两种二选一，保存退出之后再输入以下代码，赋予该文件可执行权限:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x ~/blog.git/hooks/post-receive</span><br><span class=\"line\">chown git:git -R /data/wwwroot/blog</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-同时部署多平台设置\"><a href=\"#4-同时部署多平台设置\" class=\"headerlink\" title=\"4. 同时部署多平台设置\"></a>4. 同时部署多平台设置</h2><p>编辑blog/_config.yml设置repo源，pi是树莓派的git库，它被指向部署到我们刚刚设置的nginx网站目录，使之可以被访问。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repo: </span><br><span class=\"line\">  pi: git@VPS_IP:/home/git/blog.git</span><br><span class=\"line\">  github: https://github.com/yourname/yourname.github.io</span><br><span class=\"line\">branch: master</span><br><span class=\"line\">message:</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-发布或调试Hexo博客\"><a href=\"#5-发布或调试Hexo博客\" class=\"headerlink\" title=\"5. 发布或调试Hexo博客\"></a>5. 发布或调试Hexo博客</h2><p><code>hexo clean &amp;&amp; hexo g</code><br>清除并生成新的Hexo网站<br><code>hexo clean &amp;&amp; hexo g -d</code><br>清除、生成新的网站并发布到Git或服务器<br>通过以上指令发布后打开vps的网址就能看到新的hexo博客啦，也可以通过<code>hexo s</code>在浏览器打开<code>localhost:4000</code>进行本地调试Hexo。</p>\n<h2 id=\"6-安装和卸载Hexo插件\"><a href=\"#6-安装和卸载Hexo插件\" class=\"headerlink\" title=\"6. 安装和卸载Hexo插件\"></a>6. 安装和卸载Hexo插件</h2><h3 id=\"6-1-安装插件\"><a href=\"#6-1-安装插件\" class=\"headerlink\" title=\"6.1 安装插件\"></a>6.1 安装插件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save #安装git部署</span><br><span class=\"line\">npm install --save hexo-admin #安装后台发布</span><br><span class=\"line\">npm install hexo-generator-feed --save #安装rss生成</span><br><span class=\"line\">npm install hexo-generator-sitemap --save #安装sitemap</span><br><span class=\"line\">npm i -S hexo-generator-search hexo-generator-json-content #搜索依赖包</span><br><span class=\"line\">npm i -S hexo-renderer-stylus #安装stylus渲染器</span><br><span class=\"line\">npm i -S hexo-helper-qrcode #qr二维码插件</span><br><span class=\"line\">npm i -S hexo-related-popular-posts #安装相关文章插件</span><br><span class=\"line\">npm i hexo-offline --save #加载加速插件</span><br><span class=\"line\">npm install hexo-lazyload-image --save #图片懒加载</span><br><span class=\"line\">npm install hexo-baidu-url-submit --save #百度实时提交</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-2-卸载插件\"><a href=\"#6-2-卸载插件\" class=\"headerlink\" title=\"6.2 卸载插件\"></a>6.2 卸载插件</h3><p><code>npm list</code>查看已安装的插件列表<br><code>npm uninstall &lt;插件名&gt;</code> #卸载哞个插件<br>进入node_modules/目录删除对应的插件文件<br><code>rm -rf &lt;插件名&gt;</code> #删除插件目录<br>清除cache缓存<br><code>npm cache clean -f</code><br>至此插件干干净净的卸载完毕</p>\n<h2 id=\"7-备份整个Hexo\"><a href=\"#7-备份整个Hexo\" class=\"headerlink\" title=\"7. 备份整个Hexo\"></a>7. 备份整个Hexo</h2><h3 id=\"7-1-在Github新建分支\"><a href=\"#7-1-在Github新建分支\" class=\"headerlink\" title=\"7.1 在Github新建分支\"></a>7.1 在Github新建分支</h3><p>在master下新建分支名为hexo，setting-branch下修改default源为hexo，然后<br>git clone到本地，在MacOS下 Command+Shift+. 查看隐藏文件，删除该目录下.git外所有文件，树莓派则在文件夹点击右键显示隐藏文件。</p>\n<p>新建或修改.gitignore用来忽略一些不需要的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.DS_Store</span><br><span class=\"line\">Thumbs.db</span><br><span class=\"line\">db.json</span><br><span class=\"line\">*.log</span><br><span class=\"line\">node_modules/</span><br><span class=\"line\">public/</span><br><span class=\"line\">.deploy*/</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-2-PUSH到Github\"><a href=\"#7-2-PUSH到Github\" class=\"headerlink\" title=\"7.2 PUSH到Github\"></a>7.2 PUSH到Github</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m “注释”</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-3-Git的常用指令\"><a href=\"#7-3-Git的常用指令\" class=\"headerlink\" title=\"7.3 Git的常用指令\"></a>7.3 Git的常用指令</h3><p>add、commit、push命令，简单的代码提交流程<br><code>git status</code> 查看工作区代码相对于暂存区的差别<br><code>git add .</code>将当前目录下修改的所有代码从工作区添加到暂存区 . 代表当前目录<br><code>git commit -m ‘注释’</code>将缓存区内容添加到本地仓库<br><code>git push origin master</code>将本地版本库推送到远程服务器，<br>origin是远程主机，master表示是远程服务器上的master分支，分支名是可以修改的</p>\n<h3 id=\"7-4-一键发布博客并完整备份\"><a href=\"#7-4-一键发布博客并完整备份\" class=\"headerlink\" title=\"7.4 一键发布博客并完整备份\"></a>7.4 一键发布博客并完整备份</h3><p>现在Github有两个分支，一个是master用于存放Hexo生成的public文件，上文我们新建的hexo分支用于存放Hexo的完整备份。</p>\n<h4 id=\"7-4-1-发布博客指令\"><a href=\"#7-4-1-发布博客指令\" class=\"headerlink\" title=\"7.4.1 发布博客指令\"></a>7.4.1 发布博客指令</h4><p><code>hexo clean &amp;&amp; hexo g -d</code></p>\n<h4 id=\"7-4-2-备份完整的Hexo\"><a href=\"#7-4-2-备份完整的Hexo\" class=\"headerlink\" title=\"7.4.2 备份完整的Hexo\"></a>7.4.2 备份完整的Hexo</h4><p>同步Hexo完整备份到Github分支hexo<br><code>git add . &amp;&amp; git commit –m &quot;注释&quot; &amp;&amp; git push</code></p>\n<h2 id=\"8-升级nodejs的方法\"><a href=\"#8-升级nodejs的方法\" class=\"headerlink\" title=\"8. 升级nodejs的方法\"></a>8. 升级nodejs的方法</h2><p>更新升级node版本的方法如下：</p>\n<h3 id=\"8-1-查看当前node版本\"><a href=\"#8-1-查看当前node版本\" class=\"headerlink\" title=\"8.1 查看当前node版本\"></a>8.1 查看当前node版本</h3><p><code>node –v</code></p>\n<h3 id=\"8-2-安装n模块\"><a href=\"#8-2-安装n模块\" class=\"headerlink\" title=\"8.2 安装n模块\"></a>8.2 安装n模块</h3><p><code>npm install -g n</code></p>\n<h3 id=\"8-3-升级到指定版本-最新版本\"><a href=\"#8-3-升级到指定版本-最新版本\" class=\"headerlink\" title=\"8.3 升级到指定版本/最新版本\"></a>8.3 升级到指定版本/最新版本</h3><p>该步骤可能需要花费一些时间。升级之前，可以执行<code>n ls</code>查看可升级的版本，如：<code>n 6.9.1</code><br>或者你也可以告诉管理器，安装最新的稳定版本<br><code>n stable</code></p>\n<h3 id=\"8-4-检查升级是否成功\"><a href=\"#8-4-检查升级是否成功\" class=\"headerlink\" title=\"8.4 检查升级是否成功\"></a>8.4 检查升级是否成功</h3><p><code>node -v</code><br>如果得到的版本信息不正确，可能需要重启机器。</p>\n<h3 id=\"8-5-常见问题\"><a href=\"#8-5-常见问题\" class=\"headerlink\" title=\"8.5 常见问题\"></a>8.5 常见问题</h3><p>如果遇到npm指令出现错误比如<code>Error: Cannot find module &#39;semver&#39;</code><br>重新安装最新版本即可：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -</span><br><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install nodejs</span><br></pre></td></tr></table></figure>\n<p>之后检查它们是否被正确部署</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br><span class=\"line\">nodes -v</span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n<p>全部正确输出则代表安装正确。<br>然后重新安装Hexo<br><code>npm install -g hexo-cli</code></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cl0zfpkc70001loc6387l8nnz","category_id":"cl0zfpkce0004loc6hrjh11uw","_id":"cl0zfpkcn000jloc6dfei1dup"},{"post_id":"cl0zfpkcb0003loc69gahexcd","category_id":"cl0zfpkce0004loc6hrjh11uw","_id":"cl0zfpkcp000ploc68v3jemaf"},{"post_id":"cl0zfpkco000mloc6eeki001o","category_id":"cl0zfpkce0004loc6hrjh11uw","_id":"cl0zfpkcq000tloc65p957qp6"},{"post_id":"cl0zfpkcg0007loc6ba7gdrfd","category_id":"cl0zfpkcn000iloc6a0ld2gg3","_id":"cl0zfpkcr000wloc6dyecf76i"},{"post_id":"cl0zfpkch0009loc69mjcc7eb","category_id":"cl0zfpkcp000rloc6hav78ioi","_id":"cl0zfpkcs000yloc6adxodnog"},{"post_id":"cl0zfpkci000bloc66bt69tfx","category_id":"cl0zfpkcp000rloc6hav78ioi","_id":"cl0zfpkct0011loc61mqy9hjc"},{"post_id":"cl0zfpkcl000floc62wfeemu0","category_id":"cl0zfpkcp000rloc6hav78ioi","_id":"cl0zfpkcu0014loc63ypn0j3z"},{"post_id":"cl0zfpkcm000hloc60w7n8j0s","category_id":"cl0zfpkcp000rloc6hav78ioi","_id":"cl0zfpkcv0018loc6grea45zc"},{"post_id":"cl0zfpkd50034loc63pey1uku","category_id":"cl0zfpkce0004loc6hrjh11uw","_id":"cl0zfpkd70037loc64kkn0hau"},{"post_id":"cl0zfpkd60035loc6bhez09ia","category_id":"cl0zfpkce0004loc6hrjh11uw","_id":"cl0zfpkd70038loc62thf4379"}],"PostTag":[{"post_id":"cl0zfpkc70001loc6387l8nnz","tag_id":"cl0zfpkcf0005loc61ntp5lqt","_id":"cl0zfpkcp000nloc6942ofler"},{"post_id":"cl0zfpkc70001loc6387l8nnz","tag_id":"cl0zfpkcj000dloc6emcecpg5","_id":"cl0zfpkcp000qloc6ej7f6nud"},{"post_id":"cl0zfpkcb0003loc69gahexcd","tag_id":"cl0zfpkcf0005loc61ntp5lqt","_id":"cl0zfpkcu0013loc6akh1cdxw"},{"post_id":"cl0zfpkcb0003loc69gahexcd","tag_id":"cl0zfpkcq000sloc61ffugvha","_id":"cl0zfpkcu0015loc67mbv4bvq"},{"post_id":"cl0zfpkcb0003loc69gahexcd","tag_id":"cl0zfpkcq000vloc66xzj0chu","_id":"cl0zfpkcu0017loc6c65p51o1"},{"post_id":"cl0zfpkcb0003loc69gahexcd","tag_id":"cl0zfpkcj000dloc6emcecpg5","_id":"cl0zfpkcv0019loc6elbbe0vu"},{"post_id":"cl0zfpkcg0007loc6ba7gdrfd","tag_id":"cl0zfpkcu0012loc6eupbhj3u","_id":"cl0zfpkcw001floc6a936db9s"},{"post_id":"cl0zfpkcg0007loc6ba7gdrfd","tag_id":"cl0zfpkcu0016loc62kmu1bui","_id":"cl0zfpkcw001gloc698yv4ck3"},{"post_id":"cl0zfpkcg0007loc6ba7gdrfd","tag_id":"cl0zfpkcv001aloc69ui31dds","_id":"cl0zfpkcw001iloc647m28o0t"},{"post_id":"cl0zfpkcg0007loc6ba7gdrfd","tag_id":"cl0zfpkcv001bloc63waj8l21","_id":"cl0zfpkcw001jloc69k8d373a"},{"post_id":"cl0zfpkcg0007loc6ba7gdrfd","tag_id":"cl0zfpkcv001cloc60vogco8y","_id":"cl0zfpkcw001lloc6dwon5dqu"},{"post_id":"cl0zfpkcg0007loc6ba7gdrfd","tag_id":"cl0zfpkcv001dloc6b82who4h","_id":"cl0zfpkcw001mloc6glxd8v2n"},{"post_id":"cl0zfpkch0009loc69mjcc7eb","tag_id":"cl0zfpkcv001eloc6cclmgc9r","_id":"cl0zfpkcy001rloc69mhsgkg3"},{"post_id":"cl0zfpkch0009loc69mjcc7eb","tag_id":"cl0zfpkcw001hloc6axve8xbv","_id":"cl0zfpkcy001sloc6b022071x"},{"post_id":"cl0zfpkch0009loc69mjcc7eb","tag_id":"cl0zfpkcw001kloc63tkyg21i","_id":"cl0zfpkcy001uloc65b4p42mp"},{"post_id":"cl0zfpkch0009loc69mjcc7eb","tag_id":"cl0zfpkcw001nloc6hvmp5dxx","_id":"cl0zfpkcy001vloc644331798"},{"post_id":"cl0zfpkch0009loc69mjcc7eb","tag_id":"cl0zfpkcx001oloc689ix3sbw","_id":"cl0zfpkcy001xloc62js619th"},{"post_id":"cl0zfpkch0009loc69mjcc7eb","tag_id":"cl0zfpkcq000sloc61ffugvha","_id":"cl0zfpkcy001yloc68vtxeq9h"},{"post_id":"cl0zfpkci000bloc66bt69tfx","tag_id":"cl0zfpkcv001eloc6cclmgc9r","_id":"cl0zfpkcz0024loc6bjea0pub"},{"post_id":"cl0zfpkci000bloc66bt69tfx","tag_id":"cl0zfpkcy001tloc6el5telps","_id":"cl0zfpkcz0025loc6bo5a6l7w"},{"post_id":"cl0zfpkci000bloc66bt69tfx","tag_id":"cl0zfpkcy001wloc6bu1i8n9e","_id":"cl0zfpkd00027loc64q2x84tz"},{"post_id":"cl0zfpkci000bloc66bt69tfx","tag_id":"cl0zfpkcy001zloc6he5h5u76","_id":"cl0zfpkd00028loc647bhhhrm"},{"post_id":"cl0zfpkci000bloc66bt69tfx","tag_id":"cl0zfpkcy0020loc62yv25b24","_id":"cl0zfpkd0002aloc64txw5v7k"},{"post_id":"cl0zfpkci000bloc66bt69tfx","tag_id":"cl0zfpkcz0021loc62m6octms","_id":"cl0zfpkd0002bloc65kk32w1a"},{"post_id":"cl0zfpkci000bloc66bt69tfx","tag_id":"cl0zfpkcz0022loc65hs4erli","_id":"cl0zfpkd0002dloc6aopc2q8j"},{"post_id":"cl0zfpkcl000floc62wfeemu0","tag_id":"cl0zfpkcv001eloc6cclmgc9r","_id":"cl0zfpkd1002iloc68b9w2cjx"},{"post_id":"cl0zfpkcl000floc62wfeemu0","tag_id":"cl0zfpkd00026loc63jrt42y2","_id":"cl0zfpkd1002jloc67zlng2vi"},{"post_id":"cl0zfpkcl000floc62wfeemu0","tag_id":"cl0zfpkcw001kloc63tkyg21i","_id":"cl0zfpkd2002lloc6gue617tu"},{"post_id":"cl0zfpkcl000floc62wfeemu0","tag_id":"cl0zfpkd0002cloc62dlq1xce","_id":"cl0zfpkd2002mloc6fetfez9y"},{"post_id":"cl0zfpkcl000floc62wfeemu0","tag_id":"cl0zfpkcx001oloc689ix3sbw","_id":"cl0zfpkd2002oloc67f67b623"},{"post_id":"cl0zfpkcl000floc62wfeemu0","tag_id":"cl0zfpkd1002floc63wal8arx","_id":"cl0zfpkd2002ploc6bye1fvto"},{"post_id":"cl0zfpkcl000floc62wfeemu0","tag_id":"cl0zfpkd1002gloc65q698bi7","_id":"cl0zfpkd2002rloc60l836ekm"},{"post_id":"cl0zfpkcm000hloc60w7n8j0s","tag_id":"cl0zfpkcv001eloc6cclmgc9r","_id":"cl0zfpkd3002uloc63u0x42fw"},{"post_id":"cl0zfpkcm000hloc60w7n8j0s","tag_id":"cl0zfpkd1002kloc6ckkihcpc","_id":"cl0zfpkd3002vloc6hfbv7n65"},{"post_id":"cl0zfpkcm000hloc60w7n8j0s","tag_id":"cl0zfpkd2002nloc634i66cjk","_id":"cl0zfpkd3002xloc61v3rag51"},{"post_id":"cl0zfpkcm000hloc60w7n8j0s","tag_id":"cl0zfpkd1002gloc65q698bi7","_id":"cl0zfpkd3002yloc6gpmgd4dv"},{"post_id":"cl0zfpkcm000hloc60w7n8j0s","tag_id":"cl0zfpkcx001oloc689ix3sbw","_id":"cl0zfpkd30030loc6edi15q5n"},{"post_id":"cl0zfpkco000mloc6eeki001o","tag_id":"cl0zfpkcy001tloc6el5telps","_id":"cl0zfpkd40031loc6cel52voz"},{"post_id":"cl0zfpkco000mloc6eeki001o","tag_id":"cl0zfpkd3002wloc650jw3n0m","_id":"cl0zfpkd40032loc60cnn5ujk"},{"post_id":"cl0zfpkco000mloc6eeki001o","tag_id":"cl0zfpkd3002zloc6bkda834u","_id":"cl0zfpkd40033loc68pvxgszs"},{"post_id":"cl0zfpkd50034loc63pey1uku","tag_id":"cl0zfpkd70036loc66s6pdlsa","_id":"cl0zfpkd8003eloc6adjp05qe"},{"post_id":"cl0zfpkd50034loc63pey1uku","tag_id":"cl0zfpkd70039loc6a2w423ft","_id":"cl0zfpkd8003floc694kf4z5l"},{"post_id":"cl0zfpkd50034loc63pey1uku","tag_id":"cl0zfpkd7003aloc6cxwr3zrm","_id":"cl0zfpkd9003hloc6dfnfhipq"},{"post_id":"cl0zfpkd50034loc63pey1uku","tag_id":"cl0zfpkcf0005loc61ntp5lqt","_id":"cl0zfpkd9003iloc68gjp7fyw"},{"post_id":"cl0zfpkd50034loc63pey1uku","tag_id":"cl0zfpkd3002wloc650jw3n0m","_id":"cl0zfpkd9003jloc6efk5635j"},{"post_id":"cl0zfpkd50034loc63pey1uku","tag_id":"cl0zfpkd8003bloc66d9t5vmh","_id":"cl0zfpkd9003kloc68nm8b99w"},{"post_id":"cl0zfpkd50034loc63pey1uku","tag_id":"cl0zfpkd8003cloc6h6ux1pj4","_id":"cl0zfpkd9003lloc6htb3he0s"},{"post_id":"cl0zfpkd60035loc6bhez09ia","tag_id":"cl0zfpkcv001eloc6cclmgc9r","_id":"cl0zfpkd9003mloc6bfsqfaau"},{"post_id":"cl0zfpkd60035loc6bhez09ia","tag_id":"cl0zfpkd70036loc66s6pdlsa","_id":"cl0zfpkd9003nloc679dvggjs"},{"post_id":"cl0zfpkd60035loc6bhez09ia","tag_id":"cl0zfpkd8003gloc64rqe5a3q","_id":"cl0zfpkd9003oloc6dr332788"},{"post_id":"cl0zfpkd60035loc6bhez09ia","tag_id":"cl0zfpkcf0005loc61ntp5lqt","_id":"cl0zfpkd9003ploc6fpx59k6m"}],"Tag":[{"name":"Purel.in","_id":"cl0zfpkcf0005loc61ntp5lqt"},{"name":"Wordpress","_id":"cl0zfpkcj000dloc6emcecpg5"},{"name":"服务器","_id":"cl0zfpkcq000sloc61ffugvha"},{"name":"数据中心","_id":"cl0zfpkcq000vloc66xzj0chu"},{"name":"领导力","_id":"cl0zfpkcu0012loc6eupbhj3u"},{"name":"Leadership","_id":"cl0zfpkcu0016loc62kmu1bui"},{"name":"修炼","_id":"cl0zfpkcv001aloc69ui31dds"},{"name":"合一","_id":"cl0zfpkcv001bloc63waj8l21"},{"name":"疫情","_id":"cl0zfpkcv001cloc60vogco8y"},{"name":"学习","_id":"cl0zfpkcv001dloc6b82who4h"},{"name":"树梅派","_id":"cl0zfpkcv001eloc6cclmgc9r"},{"name":"3.5inch","_id":"cl0zfpkcw001hloc6axve8xbv"},{"name":"LCD","_id":"cl0zfpkcw001kloc63tkyg21i"},{"name":"Lofree","_id":"cl0zfpkcw001nloc6hvmp5dxx"},{"name":"Pi","_id":"cl0zfpkcx001oloc689ix3sbw"},{"name":"Frp","_id":"cl0zfpkcy001tloc6el5telps"},{"name":"内网穿透","_id":"cl0zfpkcy001wloc6bu1i8n9e"},{"name":"WIFI","_id":"cl0zfpkcy001zloc6he5h5u76"},{"name":"SSH","_id":"cl0zfpkcy0020loc62yv25b24"},{"name":"root","_id":"cl0zfpkcz0021loc62m6octms"},{"name":"SSR","_id":"cl0zfpkcz0022loc65hs4erli"},{"name":"ssd1306","_id":"cl0zfpkd00026loc63jrt42y2"},{"name":"SPI","_id":"cl0zfpkd0002cloc62dlq1xce"},{"name":"Python","_id":"cl0zfpkd1002floc63wal8arx"},{"name":"驱动","_id":"cl0zfpkd1002gloc65q698bi7"},{"name":"无线网卡","_id":"cl0zfpkd1002kloc6ckkihcpc"},{"name":"rtl8812bu","_id":"cl0zfpkd2002nloc634i66cjk"},{"name":"树莓派","_id":"cl0zfpkd3002wloc650jw3n0m"},{"name":"守护进程","_id":"cl0zfpkd3002zloc6bkda834u"},{"name":"Hexo","_id":"cl0zfpkd70036loc66s6pdlsa"},{"name":"Markdown","_id":"cl0zfpkd70039loc6a2w423ft"},{"name":"Blog","_id":"cl0zfpkd7003aloc6cxwr3zrm"},{"name":"iA Writer","_id":"cl0zfpkd8003bloc66d9t5vmh"},{"name":"Samba","_id":"cl0zfpkd8003cloc6h6ux1pj4"},{"name":"Github","_id":"cl0zfpkd8003gloc64rqe5a3q"}]}}